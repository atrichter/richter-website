%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bwtrumanlogonew.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Matt Derezinski
%%CreationDate: 2/12/08
%%BoundingBox: 0 0 234 153
%%HiResBoundingBox: 0 0 233.2959 152.1827
%%CropBox: 0 0 233.2959 152.1827
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 10038 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDB0FF5284FD7DFF7D2727FD7DFFA8F827A8FD7DFFA8A8FD78FFA8%52275252FFA8A8FD79FF2727F827F8527D59A8FD76FFA8522727F852527D%527DA8FD7BFFA8A8FD7EFF7D7EA8A8A8FD7BFFA87D2852A8FD7BFF7D2727%277DFD7BFFA852A87DA8FD7BFF7D7DFD7EFF7D7DFD7EFF277DFD7DFF2727%277DFD7BFFA827525252FD7CFFF87DFF52FD7BFF52277DFF7D7DFD79FF7D%27F8A8FFFFA8FD78FF7D522752537D527DA8FD75FF7D2752285227272752%2752527EA8FD70FFA852272727522752285252522727275252FD6EFFA852%2727F8527D7D527D7D7D527D52522752FD6EFF522727F82752FD057DA87D%527D527D2752FD6EFF28F8277DFFA87D527D52FFA8FD047DFF52FD6EFF52%277D527DFF847D53A8A8FF7D5252A87DA8FD6EFFA8535227A8FFA8F852A8%FFFF53527DFF7DA8FD6EFFA827F87D7DFF522727A8A8A8F82752FF52A8FD%6FFF272727A8FF7D2752A8FFA852527DA8A8FD70FF52F8527DFF522727A8%A8A8F8527DA9FD71FF522727A8FF7D287DA8FFA85252A8A8FD71FF52F852%7DFF522727A8A8A8F8527DAFFD71FF2727F87DFF7D5253A8FFA8525284A8%FD71FF52F8527DFF2727F8A8A8A8F8527DFD72FF2727277DFFA8537DA8FF%A97D52A8A8FD71FF52F852FFA8527D5252A8FF527D7DFD72FF525252FFA8%A8A8FFA8FFFFA87D52A8FD70FFA87D2727A8FD09FFA87EFD24FFA8FFA8FD%21FFA8525252FD047D7E7D7D7D7E7D7D7D7E7D7D7D7EFD047D27A8FD0EFF%272728A8A8A8FD057DA9FFFFA8FD1FFFA87E52522752272727527DFD1EFF%7D52F827F827F827F827F827F827F827F827F827F827F827F82752FD0EFF%A8525227522E5227527D522752527DFD1DFFA82727277D7DA8A8FF847D27%27277DFD1CFF7D5227F827F8FD0427522727F827F8FD0527F827F827F852%FD0EFF7D27F8527D52527D52FFA87D5252527DFD1AFFA852F8277DFD09FF%A852F852A8FD1AFF5227F87DA8FFA8FFA8FFFF7D5227F827A8FFA8FFA8FF%A8A85227F8FD0BFFA8FFFF52F82752FD09FF7DFFA8FD19FF7D52F852FD0D%FF7D27527EFD19FF5227A8FD08FF7D52F82727FD09FF5227A8FFFD08527D%FF5352275227FD0D52277DFF8427FD11527DFF7D52F87DFD0FFF7D5252FF%FFFD1652A8527DFD09FF7D5227F827A8FD08FF7D52A8FF52525352525253%52A8FF7D5252527D52525253525252535252525352527DFF7D5252595252%52535252525352525253525252FF7D52F852FD11FF525259FF7D27525252%27522E5227522E5227522E5227522E5227A8FD0BFF7D52F82720FD3FFFA8%522727A8FD11FFA85252A8FD22FF7D2827F827A8FFFFFF7D7DFD06522752%527D7DFD04FFA85352527D7D7D527DA8FD05FF7D7D527D7D7D52A8FFA852%5253FD0EFF59272752FD09FFA87D5252FD06FF525352FF5252F8A8FD0AFF%7D7D527D7D7D527DFD0BFF7D52F82727FD05FFA87D2727F82727522727F8%27277DFFFFFFA82727F827F852A8FD07FF7D52F827F87DA8FF7D522727FD%0EFF2E52F8A8FD09FF7E2727F8A8FD05FFA8527DA8525227F8A8FD0AFF7D%522727F852A8FD0BFF7D5227F827A8FD06FF522727F8A8FFFF7D27F827F8%7DFFFFFFA82727F827A8FD09FF7D2EF852FFFFFF7D5227F87DFD0CFF5252%F827A8FD09FF5252F82752FD05FFA852527E5252F82720A8FD0AFF7D5227%27A8FD0CFF7D52F82727FD07FF5252F8277EFFFFFF7D28F82720FFFFFFA8%52272720A8FD09FF84522752FFFFFF5252272727FD0BFFA852522727FD09%FFA8522727F827FD06FF527D7D7D5227F82727FD0AFFA85252F8FD0DFF7D%5227F827A8FD05FFA8522727F8A8FD04FF2727F82752FFFFA82727F827A8%FD09FF7D52F852FFFFFF522727F82752FD0AFF7D2727F827A8FD08FF7D27%27F827F87DFD05FF7D527D5252F827F82727FD09FF7D522727A8FD0CFF7D%52F82727FD07FF5252F8277EFD04FF7D2727F87DFFFFA852272720A8FD09%FFA8522752FFFFFF5252F827F827FD0AFF5252F827F8A8FD08FF5252F853%272752FD05FF527D7D7D52275227F82727FD08FFA82752F8FD0DFF7D5227%F827A8FD05FFA8522727F8A8FD04FF5952F82752FFFFA82727F827A8FD09%FF7D52F852FFFFFF5252272727F87DFD08FF7D52F85227277DFD07FF7D52%27275227F827A8FD04FF52527D5252F8272727F82727FD07FFA8522727A8%FD0CFF7D52F82720FD07FF2752F8277DFD04FF7D2727F884FFFFA8522727%F8A9FD09FFA8522752FFFFFF5252F87D272727FD08FF5252275252F87DFD%07FF7D28277D525227F87DFFFFFFA85252A85352277D522727F82752FD07%FF2852F8FD0DFF7D2827F827A8FD05FFA8522727F8A8FD04FF5252F827A8%FFFFA82727F827A8FD09FF7D52F852FFFFA85227272752F82752FD06FF7D%27272752272752FD07FF2752F8FF5252F82727FFFFFF525252FF5252F8FF%A8272727F82728FD05FFA8522727A8FD0CFF7D52F82727FD07FF2E52F827%7DFFFFFFA85227277DFFFFFFA8522727F8FD0AFFA8522752FFFFA8525227%525227F827FD06FF5252277D5252F87DFD06FF7D52277DFF7D2E52F82784%FFFF5227A8FF525227A8FF7D522727F82752FD05FF5252F8FD0DFF7D5227%F827A8FD06FF522727F8A8FFFFFF7D272752FD04FFA82727F827A8FD09FF%7D52F852FFFF7D5227527D522727F87DFD04FF7D522752A852272752FFFF%FFA8A8FF532E277DFFA8525227F852FF7D2752FFFF5252F8A8FFFF7D5227%27F82752FFFFFFA8272727A8FD0CFF7D52F82727FD07FF5252F827527D7D%7D272752FD05FFA8522727F8A8FD09FFA8522752FFFF7D522752FF2752F8%2727FD04FF525227A8FF2752F852FFFF7D522752525220FFFFFF5252F827%277D2752FFFFFF5352277DFFFFFF7D522727F8277DFFFFFF2752F8FD0DFF%7D5227F827A8FD05FFA8522727F8272727F827F8A8FD05FFA82727F827A8%FD09FF7D52F852FFFF5252F859FF7D2728F82752FFFFA8272727FFA85252%2727FFFFA82727F827F852FFFFFF7E2728F827F852A8FFFFFF5252F884FD%04FF52522727F8277DFFA8525227A8FD0CFF7D52F82727FD07FF2852F827%7EFF7DFD0427FD05FFA852272727A9FD09FFA8522752FFFF7D52277DFFFF%525227F827FFFF5252F8A8FFFF5252F827A9FFFFFF7D52272752A8A8FFFF%525227F827FD05FF7D52277DFD05FF52522727F8277DFF5252F8FD0DFF7D%5227F827A8FD05FFA8522727F8A8FFFF5227F82727FD04FFA85227F827A8%FD09FF7D52F853FFFF5252F87DFFFF53522727F8A8A8522752FFFFFF5252%27F8A8FD04FF2752F827F8272752F827F827F8A8FD04FF5252F8A8FD06FF%52272727F8277D525227A8FD0CFF7D52F82720FD07FF2752F8277DFFFFFF%5227F82752FFFFFFA8522727F8A8FD09FF7D27277DFFFF5252277DFFFFFF%2752F827275952277DFFFFFF525227277DFFFFFF5252F853FFA87D84A8A8%2752F82752FD04FF5252277DFD07FF52522727F827277DF8FD0DFF7D2727%F827A8FD05FFA8522727F8A8FD04FF2727F8277DFFFFFF2E28F82752FD09%FF5227F8A8FFFF2752F8A8FFFFFF7D2728F827275227FD04FF532727F87D%FFFFFF5227277DFD06FF522827F827FD04FF5252F87DFD08FF5228F827F8%272727A8FD0CFF7D53F827F8FD07FF2752F8277DFD05FF2727F827A8FFFF%7D2727F852FD08FFA8522728FFFFA8525227A8FD04FF525227F827F8A8FD%04FF5252272759FFFFA8285227FD07FF7D522727F8A8FFFFFF7D27277DFD%09FF52522727F82727FD0DFF7D2727F827A8FD06FF522727F884FD05FFA8%2727F827A8FFA8522727F884FD07FF7D272759FFFFA82752F8FD05FF5252%2727F827FD05FF7D5227F852FFFF5252F87DFD08FF2752F82727FFFFFF52%52F87DFD0AFF52522727F827A8FD0CFF5352F827F8A8FD06FF5252F8277D%FD06FFA82727F852FFFF7D27F827F8A8FD05FFA8272728FFFFFF7D522727%FD06FF2752F8277DFD05FF7D52272728FFA85252277EFD08FF535227F827%84FFFF5252277DFD0BFF5252272727FD0AFFA8A85227F827F82727A8A8FF%FFFF7D52F827F852FD07FF7DF827F827A8FF5227F827F87DA8FF7E7DF827%27FD04FF7D2727F8A8FD05FF7D2727F8FD06FFA82752F8277D7D2727F8A8%FD08FF7D522727F827A8A82752F852FD0CFF2E27F827A8FD08FF7D7D2752%52522E525252285252FFA87D2752275227527DFD06FFA82727F827A8FFA8%532727F8272727F8527DFFFFFFA87D52522727277DFD05FF7D7D7EFD06FF%8452275227272752272752A8FD07FFA85252272727525252272727527DFD%0BFF525227FD28FF5227F8277DFFFFFFA8FD047DFD07FFA8FD33FFA9FD12%FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87EFF7D52F827277DA8FFFFFFA8A87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87D7EA8A8FD2627A8FFA87D7D525252FFA852FD4C27F87DFD27%FFA8FDFCFFFD6AFFA8FD73FF7E7DFFFFFFA87D7DA87D7DA8FD05FFA8FD05%FF7DA87DA87DA8FFFFFFA87D847DFD09FF7DA8A8FFA8A8A8FFFFFFA8FFFF%FFA8A8A8FFFFFFA8A87DFFFFFF7DA8A8FFFFA87DFFFFFF7DA87DA8FD04FF%7DA87DFD07FF7D7DA8FFFFFFA8A8A8FFFFFF7D847DA87DA8FFFFA8A8A8FF%FFA87DA8527D527DFFFF7D527DF859527DFD04FF5252FD04FF84527D2752%7D52FFFFFF52277D52A8FD07FFA82727FFFF7D27A8FFFFFF5228FFFFFF27%7DFD04FF2752FFFFFF7DF8A8FFFF277DFFFFFF52277D52FFFFFFA852277D%21A8FD04FF527D527DFFFFFFA8F87DFFFFA8527D52277D52A8FFA8F852FF%FF2784A8F8FD08FF277DFD06FF52F8FD07FF277DFD05FF7D27FD0BFF5252%FFFFA852FD04FF592752FFFF7D7DFD04FF5252FD04FF2752FFA852FD04FF%5252FD06FF5252FF2752FFFFFFA827A8FFA8FD04FF277DFD05FF5252FD05%FF84F8FF7D7DFFFF52F8A8FD06FFF87EFD05FFA8525252FD06FF2752FD05%FF7D27537DA8FD08FF5227FFFFA827FD04FF7D522752FF527DFD04FF2753%FD04FF7D27FF7D52FD04FF52277D7DFD04FF5227FF27A8FD04FF2E277DFD%05FFF8A8FD05FF5227FD06FF522752A8FFFFFF52F8FD06FF277DFD05FF52%7D5228FD06FF277DFD05FF7D27A87DFD09FF5252FFFFA852FD04FF52A8A8%277D7D7DFD04FF5252FD05FF278452FD05FF5252847DFD04FF52522752FD%06FF522784FFFFFFA8277DFD05FF5252FD06FFA8277DFFFFA8FFFF2752FD%05FFF8A8FD04FFA852A8A8F8A8FD05FF2753FD05FF7D27FD0BFF5227FFFF%A827FD04FF527DFF7D2727A8FD04FF277DFD05FF52F87DFD05FF5227FD06%FF5252FFF87DFD04FFA8FF2752FD04FFF8A8FD05FF5227FD07FFF8A8FFFF%7D52FF2EA8FD04FFA8277DFD04FF5252FFFF5227FD05FFF87DFD05FF7DF8%A859A8FD08FFA82752A8527DFD04FF277DFFFF7D27A8FD04FF2752FD05FF%A827A8FD05FF5227A87DA8FFFFFF2752FF7EF87DFFFFA852A8527DFFFFFF%A8277DFD05FF5227A8FD05FFA8277DFFFFA85952A8FD05FFA8527EA8FFFF%A852A8FFFFA87D7DFFFFFFA87D7DA9FD04FF7D7D527DA8FD09FF7D52527E%FD04FFA87D7DFFFFFF7DA9FFFFFFA87D7DA8FD05FF7DFD05FFA87D537D52%FFFFFFA87D7DA8FFA852A8FFFF527D7DFD04FFA8597DA8FFFFFFA87D7DA8%FD05FFA8597DA8FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-02-12T10:53:58-06:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-12T10:53:58-06:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-12T10:53:58-06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqg9ZvpdP0e+v4bdrua0t5Z47VPtStGhcRr13YigxV5f/AM4+fmdq/naw1dNQ0+O2FlO0&#xA;yz24kEfO8nmleB/U/bj2b4SRxYVocVeuYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYqw/8ANzWNb0f8v9V1LQ7ia21e2VHs3t7Zbt2f1F+AxOrjiwqG&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D2310733DA1111DCB7258B61B728EAEA</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D2310734DA1111DCB7258B61B728EAEA</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:E186B6EEF59B11DB988EBEE2284D12AA</stRef:instanceID>
            <stRef:documentID>uuid:E186B6EDF59B11DB988EBEE2284D12AA</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=45 Y=60 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=20 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>19.999998</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=40 Y=15 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>14.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=100 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=40 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=90 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Aqua</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>55.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue Gray</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>40.000000</xapG:magenta>
                           <xapG:yellow>30.000002</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Blue Sky</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>5.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Brown</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>85.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Dark Blue</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>10.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Forest Green</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>55.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Gold</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>5.000000</xapG:cyan>
                           <xapG:magenta>20.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Grass Green</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>5.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Orange</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Red</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>14.999999</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Violet</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>45.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Pantone 2613</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Pantone 872</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -152.183 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 152.183 li
233.296 152.183 li
233.296 0 li
cp
clp
[1 0 0 1 0 0 ]ct
131.655 117.676 mo
146.217 86.7705 li
150.586 77.8857 158.405 74.5977 164.51 73.5273 cv
158.251 74.3271 149.521 77.3994 144.806 86.9854 cv
130.984 116.32 li
131.655 117.676 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
181.639 108.216 mo
181.715 108.415 181.792 108.613 181.867 108.811 cv
183.821 107.604 185.411 106.065 186.652 104.336 cv
188.553 101.343 189.755 97.5908 189.56 93.3525 cv
189.31 87.9414 186.674 82.4287 182.283 78.5518 cv
178.872 75.9365 174.527 74.3223 169.694 74.3633 cv
167.931 74.3672 166.297 74.5225 164.777 74.7939 cv
165.888 74.6572 167.055 74.5801 168.284 74.5771 cv
179.714 74.4814 188.437 83.6191 188.437 93.4414 cv
188.78 98.8477 186.496 104.613 181.639 108.216 cv
cp
f
175.534 112.353 mo
176.158 112.258 176.939 112.104 177.284 111.966 cv
171.188 94.3398 li
170.931 93.5703 170.676 93.5703 170.419 94.3398 cv
170.071 95.3965 li
175.506 110.978 li
175.388 111.024 175.249 111.071 175.096 111.117 cv
175.271 111.58 175.534 112.353 175.534 112.353 cv
cp
f
219.585 87.6895 mo
219.995 87.6895 221.173 87.7402 222.096 87.9443 cv
223.684 88.3555 224.042 89.4814 224.093 92.8115 cv
224.615 115.609 li
225.234 116.28 225.734 116.817 226.067 117.16 cv
225.504 92.5977 li
225.452 89.2676 225.094 88.1406 223.506 87.7305 cv
222.584 87.5264 221.405 87.4746 220.996 87.4746 cv
220.637 87.4746 220.586 87.3203 220.586 87.1162 cv
220.586 87.0596 220.604 87.0146 220.63 86.9736 cv
220.486 86.9727 220.343 86.9717 220.2 86.9717 cv
219.585 86.9717 219.176 87.0234 219.176 87.3311 cv
219.176 87.5352 219.227 87.6895 219.585 87.6895 cv
cp
f
171.23 86.3555 mo
170.758 86.0332 170.419 86.2539 170.238 86.2539 cv
169.931 86.2539 169.726 86.5615 169.111 88.252 cv
161.858 107.871 li
162.213 108.119 162.572 108.351 162.932 108.566 cv
170.521 88.0381 li
170.848 87.1396 171.059 86.6348 171.23 86.3555 cv
cp
f
191.912 124.752 mo
192.632 124.702 193.251 124.556 193.538 124.46 cv
194.818 124.102 195.075 122.615 195.075 117.955 cv
195.126 88.6016 li
195.093 87.1621 195.262 86.4053 195.506 86.0205 cv
195.456 85.999 195.407 85.9805 195.365 85.9805 cv
195.161 85.9805 194.727 85.7354 194.354 85.9658 cv
193.982 86.1982 193.672 86.9063 193.716 88.8164 cv
193.664 118.169 li
193.664 122.83 193.408 124.315 192.127 124.675 cv
192.059 124.697 191.971 124.724 191.867 124.75 cv
191.881 124.75 191.898 124.752 191.912 124.752 cv
cp
f
158.893 119.85 mo
162.42 110.202 li
160.896 109.267 158.826 108.619 157.616 107.314 cv
157.634 106.732 157.846 106.276 158.104 105.933 cv
157.948 105.739 157.799 105.539 157.655 105.328 cv
157.655 105.328 156.25 105.994 156.206 107.528 cv
157.416 108.834 159.337 109.89 160.861 110.826 cv
157.483 120.064 li
156.753 122.092 155.955 123.73 154.487 124.479 cv
154.667 124.521 154.843 124.558 155.014 124.589 cv
157.073 124.113 158.028 122.252 158.893 119.85 cv
cp
f
224.223 122.564 mo
223.659 122.053 216.283 114.522 210.853 108.682 cv
204.91 102.278 199.121 95.8242 197.482 93.9805 cv
197.533 95.8301 li
200.045 98.6318 204.691 103.777 209.442 108.896 cv
214.872 114.736 222.249 122.268 222.813 122.779 cv
225.527 125.494 226.142 126.058 226.552 126.058 cv
226.762 126.058 226.884 125.965 226.949 125.215 cv
226.404 124.733 225.574 123.915 224.223 122.564 cv
cp
f
196.766 125.331 mo
196.305 125.331 194.152 125.485 191.848 125.485 cv
191.335 125.485 186.101 125.396 182.566 125.293 cv
181.593 125.242 181.029 125.242 181.029 124.935 cv
181.029 124.729 181.184 124.627 181.388 124.576 cv
181.695 124.474 182.003 124.012 181.695 123.193 cv
177.502 111.997 li
175.904 112.419 174.321 112.999 172.59 112.999 cv
169.791 112.999 167.13 112.408 164.723 111.349 cv
164.413 112.26 li
166.521 113.023 168.816 113.431 171.18 113.431 cv
172.91 113.431 174.588 112.985 176.186 112.563 cv
180.285 123.407 li
180.592 124.227 180.285 124.688 179.979 124.79 cv
179.772 124.841 179.619 124.944 179.619 125.148 cv
179.619 125.456 180.183 125.456 181.155 125.507 cv
184.69 125.61 189.925 125.699 190.438 125.699 cv
192.742 125.699 194.895 125.545 195.354 125.545 cv
195.816 125.545 197.865 125.699 200.785 125.699 cv
201.246 125.699 201.534 125.642 201.649 125.482 cv
199.021 125.466 197.197 125.331 196.766 125.331 cv
cp
f
230.421 87.6279 mo
230.336 87.6465 230.259 87.668 230.181 87.6895 cv
230.2 87.6895 230.222 87.6895 230.24 87.6895 cv
230.428 87.6895 230.571 87.6455 230.667 87.5762 cv
230.587 87.5928 230.512 87.6055 230.421 87.6279 cv
cp
f
111.536 125.242 mo
111.075 125.242 108.616 125.396 107.233 125.396 cv
106.721 125.396 106.362 125.293 106.362 124.935 cv
106.362 124.9 106.379 124.869 106.402 124.84 cv
106.012 124.892 105.749 124.893 105.464 124.893 cv
105.208 124.893 104.952 124.995 104.952 125.148 cv
104.952 125.507 105.311 125.61 105.823 125.61 cv
107.206 125.61 109.665 125.456 110.126 125.456 cv
110.536 125.456 112.995 125.61 114.89 125.61 cv
115.333 125.61 115.613 125.556 115.737 125.391 cv
113.949 125.367 111.906 125.242 111.536 125.242 cv
cp
f
108.411 124.524 mo
110.102 124.218 110.255 122.219 110.46 120.272 cv
114.149 86.873 li
114.19 86.6445 114.241 86.4521 114.307 86.3008 cv
113.938 86.1641 113.495 86.165 113.302 86.165 cv
112.995 86.165 112.841 86.5234 112.738 87.0879 cv
109.05 120.487 li
108.856 122.33 108.706 124.216 107.257 124.673 cv
107.548 124.663 107.882 124.631 108.411 124.524 cv
cp
f
159.361 125.242 mo
159.075 125.242 155.774 125.389 155.213 125.376 cv
154.665 125.388 148.924 125.17 147.906 125.088 cv
146.729 124.985 146.473 124.832 146.473 124.576 cv
146.473 124.371 146.575 124.269 146.831 124.218 cv
147.088 124.166 147.139 123.295 147.036 122.373 cv
144.577 95.9395 li
144.424 95.9395 li
143.357 98.2021 li
145.626 122.588 li
145.729 123.51 145.677 124.381 145.421 124.432 cv
145.164 124.482 145.063 124.586 145.063 124.79 cv
145.063 125.047 145.318 125.2 146.496 125.303 cv
147.513 125.385 153.255 125.603 153.803 125.59 cv
154.364 125.603 157.664 125.456 157.95 125.456 cv
158.514 125.456 160.717 125.61 161.946 125.61 cv
162.299 125.61 162.56 125.549 162.664 125.384 cv
161.431 125.348 159.829 125.242 159.361 125.242 cv
cp
f
128.595 122.937 mo
127.263 120.427 122.857 111.564 122.602 111.052 cv
122.141 110.13 116.403 97.8359 115.839 96.4521 cv
115.634 96.4521 li
115.424 98.8906 li
117.24 102.862 120.83 110.545 121.19 111.266 cv
121.447 111.778 125.852 120.641 127.184 123.151 cv
128.157 124.995 128.413 125.507 128.771 125.507 cv
129.053 125.507 129.221 125.334 129.55 124.694 cv
129.326 124.329 129.034 123.77 128.595 122.937 cv
cp
f
166.364 109.952 mo
171.501 94.3398 li
171.758 93.5703 172.014 93.5703 172.27 94.3398 cv
178.158 111.266 li
176.372 111.98 170.286 112.096 166.364 109.952 cv
cp
174.908 87.8848 mo
173.801 85.3887 173.038 86.04 172.73 86.04 cv
172.424 86.04 172.218 86.3477 171.604 88.0381 cv
164.015 108.566 li
162.606 107.72 161.195 106.665 160.148 105.114 cv
160.148 105.114 158.743 105.78 158.699 107.314 cv
159.908 108.619 161.979 109.267 163.502 110.202 cv
159.976 119.85 li
159.11 122.252 158.155 124.113 156.097 124.589 cv
155.726 124.522 155.332 124.433 154.925 124.307 cv
152.722 123.59 152.363 120.721 152.159 118.877 cv
149.391 93.5059 li
149.389 90.9063 149.255 88.6279 150.059 86.7529 cv
152.2 81.6611 158.431 74.3896 170.776 74.3633 cv
182.207 74.2676 190.93 83.4043 190.93 93.2275 cv
191.3 99.0566 188.621 105.307 182.949 108.811 cv
179.454 99.7188 175.51 89.2422 174.908 87.8848 cv
cp
196.847 85.752 mo
196.476 85.9834 196.165 86.6924 196.209 88.6016 cv
196.157 117.955 li
196.157 122.615 195.9 124.102 194.62 124.46 cv
194.333 124.556 193.714 124.702 192.994 124.752 cv
192.555 124.763 191.658 124.544 191.204 124.371 cv
190.129 124.063 188.643 123.244 186.799 118.685 cv
185.976 116.632 184.615 113.166 183.338 109.849 cv
188.092 107.061 192.41 100.906 192.053 93.1387 cv
191.598 83.2803 183.233 73.0684 170.731 73.0684 cv
164.815 73.0684 153.059 75.0596 147.299 86.7705 cv
132.737 117.676 li
117.306 86.5098 li
117.049 85.9453 116.102 85.9512 115.794 85.9512 cv
115.487 85.9512 115.333 86.3096 115.231 86.873 cv
111.542 120.272 li
111.337 122.219 111.184 124.218 109.494 124.524 cv
108.725 124.678 108.367 124.678 107.957 124.678 cv
107.701 124.678 107.444 124.781 107.444 124.935 cv
107.444 125.293 107.803 125.396 108.315 125.396 cv
109.698 125.396 112.157 125.242 112.619 125.242 cv
113.028 125.242 115.487 125.396 117.382 125.396 cv
117.997 125.396 118.305 125.293 118.305 124.935 cv
118.305 124.781 118.1 124.678 117.895 124.678 cv
117.587 124.678 116.819 124.627 115.948 124.422 cv
115.18 124.269 114.616 123.603 114.616 122.834 cv
114.616 121.964 114.616 121.041 114.667 120.222 cv
116.716 96.4521 li
116.921 96.4521 li
117.485 97.8359 123.223 110.13 123.684 111.052 cv
123.939 111.564 128.345 120.427 129.677 122.937 cv
130.65 124.781 130.906 125.293 131.265 125.293 cv
131.726 125.293 131.88 124.832 132.955 122.578 cv
145.506 95.9395 li
145.659 95.9395 li
148.118 122.373 li
148.221 123.295 148.17 124.166 147.913 124.218 cv
147.657 124.269 147.555 124.371 147.555 124.576 cv
147.555 124.832 147.811 124.985 148.989 125.088 cv
150.006 125.17 155.747 125.388 156.296 125.376 cv
156.857 125.389 160.156 125.242 160.442 125.242 cv
161.006 125.242 163.209 125.396 164.438 125.396 cv
164.899 125.396 165.207 125.293 165.207 124.985 cv
165.207 124.781 165.053 124.678 164.695 124.678 cv
164.183 124.678 li
163.312 124.678 162.236 124.218 162.236 123.193 cv
162.236 122.271 162.492 121.041 162.953 119.761 cv
165.805 111.349 li
168.212 112.408 170.873 112.999 173.672 112.999 cv
175.403 112.999 177.08 112.771 178.678 112.349 cv
182.777 123.193 li
183.085 124.012 182.777 124.474 182.471 124.576 cv
182.266 124.627 182.111 124.729 182.111 124.935 cv
182.111 125.242 182.676 125.242 183.648 125.293 cv
187.184 125.396 192.417 125.485 192.93 125.485 cv
195.234 125.485 197.387 125.331 197.848 125.331 cv
198.309 125.331 200.358 125.485 203.277 125.485 cv
203.893 125.485 204.199 125.382 204.199 125.074 cv
204.199 124.87 204.046 124.768 203.79 124.768 cv
203.329 124.768 202.201 124.716 201.229 124.46 cv
199.846 124.051 199.333 122.719 199.23 118.519 cv
198.564 93.9805 li
200.204 95.8242 205.992 102.278 211.935 108.682 cv
217.365 114.522 224.742 122.053 225.305 122.564 cv
228.02 125.28 228.635 125.844 229.045 125.844 cv
229.402 125.844 229.505 125.588 229.505 122.206 cv
229.608 92.1875 li
229.608 89.1143 229.813 87.9863 231.504 87.6279 cv
232.118 87.4746 232.477 87.4746 232.733 87.4746 cv
233.092 87.4746 233.296 87.3203 233.296 87.1162 cv
233.296 86.8086 232.938 86.7568 232.374 86.7568 cv
230.273 86.7568 228.584 86.9111 228.02 86.9111 cv
227.457 86.9111 224.997 86.7568 222.692 86.7568 cv
222.078 86.7568 221.668 86.8086 221.668 87.1162 cv
221.668 87.3203 221.719 87.4746 222.078 87.4746 cv
222.488 87.4746 223.666 87.5264 224.588 87.7305 cv
226.176 88.1406 226.534 89.2676 226.585 92.5977 cv
227.148 117.16 li
225.51 115.469 219.926 109.22 214.854 103.79 cv
206.966 95.3379 200.42 88.2764 199.651 87.4063 cv
199.139 86.8936 198.268 85.7656 197.858 85.7656 cv
197.654 85.7656 197.219 85.5205 196.847 85.752 cv
f
0.787598 82.4688 mo
0.787598 81.3438 2.12354 74.9443 2.26416 74.3818 cv
2.41357 73.7344 2.56445 73.3389 2.78857 73.1602 cv
2.61426 73.0908 2.46289 73.0449 2.32031 73.0449 cv
1.89893 73.0449 1.6875 73.4678 1.47705 74.3818 cv
1.33594 74.9443 0 81.3438 0 82.4688 cv
0 83.2422 0.140625 83.5938 0.632813 83.5938 cv
0.793945 83.5938 0.916992 83.54 1.02441 83.457 cv
0.848633 83.292 0.787598 82.9697 0.787598 82.4688 cv
cp
f
21.6001 119.9 mo
21.9219 116.943 21.9517 111.391 21.9517 104.922 cv
21.9517 77.9688 li
21.1641 77.9863 li
21.1641 104.922 li
21.1641 111.391 21.1348 116.943 20.8125 119.9 cv
20.4951 122.818 18.6641 123.486 17.2578 123.768 cv
17.1187 123.799 16.9653 123.829 16.8057 123.859 cv
17.2803 123.805 17.6978 123.73 18.0454 123.652 cv
19.4517 123.371 21.2827 122.818 21.6001 119.9 cv
cp
f
41.9985 74.084 mo
41.3018 74.1777 40.4575 74.2412 39.4116 74.2412 cv
40.1992 74.2412 li
40.9058 74.2412 41.4907 74.1777 41.9985 74.084 cv
cp
f
27.9082 77.9688 mo
27.9082 77.9854 li
36.7393 78.1797 li
37.0137 78.1777 37.269 78.1787 37.5249 78.1797 cv
27.9082 77.9688 li
cp
f
14.3882 124.611 mo
14.3882 124.386 14.5073 124.172 14.8149 124.047 cv
14.7842 124.047 14.7573 124.049 14.7261 124.049 cv
13.8823 124.049 13.6006 124.261 13.6006 124.611 cv
13.6006 125.104 14.0933 125.314 15.0073 125.314 cv
15.2192 125.314 15.4438 125.313 15.6738 125.311 cv
14.8403 125.292 14.3882 125.081 14.3882 124.611 cv
cp
f
46.9385 82.0674 mo
46.4106 80.8809 li
45.0278 78.5029 43.5073 78.168 37.8066 78.1797 cv
42.8711 78.2021 44.3052 78.6152 45.6235 80.8809 cv
46.1509 82.0674 li
46.3706 83.166 46.9595 83.7109 47.2056 83.6494 cv
47.3579 83.6113 47.4893 83.5449 47.5879 83.4414 cv
47.3413 83.1943 47.0718 82.7354 46.9385 82.0674 cv
cp
f
42.3555 90.2246 mo
42.2554 121.095 li
42.0508 122.581 41.7959 124.117 40.771 124.322 cv
40.7036 124.338 40.6274 124.352 40.5547 124.366 cv
41.0112 124.361 41.6055 124.264 42.0552 124.163 cv
43.0796 123.958 43.3345 122.422 43.5396 120.936 cv
43.6392 90.0654 li
43.6392 90.0654 43.5781 87.4609 41.0225 87.4229 cv
38.6772 87.3896 38.708 86.8369 38.8979 86.5381 cv
38.3896 86.5313 37.9971 86.5225 37.7773 86.5088 cv
37.7773 86.5088 36.5166 87.5361 39.7383 87.582 cv
42.2944 87.6191 42.3555 90.2246 42.3555 90.2246 cv
cp
f
56.1904 106.29 mo
55.5991 106.702 54.9434 106.945 54.2817 107.086 cv
55.3472 107.03 56.498 106.811 57.4741 106.132 cv
59.2671 104.902 60.5986 102.136 60.5986 98.2432 cv
60.5986 91.8398 57.4922 88.251 52.0107 88.251 cv
50.4736 88.251 49.5503 88.1016 49.0381 88.2549 cv
48.9722 88.2813 48.9136 88.3145 48.8623 88.3545 cv
49.3486 88.373 49.9614 88.4102 50.7266 88.4102 cv
56.208 88.4102 59.3149 91.998 59.3149 98.4023 cv
59.3149 102.295 57.9829 105.061 56.1904 106.29 cv
cp
f
79.4526 129.915 mo
75.8945 129.44 73.5493 128.023 72.2173 127.306 cv
70.0146 126.127 66.4058 123.273 60.8042 116.581 cv
58.5283 113.863 55.7603 110.323 54.7358 108.99 cv
54.5308 108.786 54.377 108.684 54.0698 108.684 cv
49.0381 108.527 li
48.8701 108.527 48.7734 108.6 48.7231 108.718 cv
52.7861 108.843 li
53.0933 108.843 53.2471 108.945 53.4521 109.15 cv
54.4761 110.481 57.2446 114.022 59.52 116.74 cv
65.1216 123.432 68.731 126.286 70.9336 127.465 cv
72.2656 128.182 74.6104 129.6 78.1689 130.074 cv
82.6758 130.431 li
83.1216 130.431 83.356 130.35 83.4824 130.232 cv
79.4526 129.915 li
cp
f
45.7437 124.932 mo
45.6919 124.932 42.4648 125.086 40.9282 125.086 cv
40.3643 125.086 40.1084 124.982 40.1084 124.676 cv
40.1084 124.573 40.1611 124.474 40.2837 124.417 cv
39.9263 124.479 39.5459 124.527 39.2344 124.527 cv
38.9268 124.527 38.8242 124.681 38.8242 124.835 cv
38.8242 125.143 39.0806 125.244 39.644 125.244 cv
41.1812 125.244 44.4082 125.091 44.4595 125.091 cv
44.7153 125.091 48.7271 125.183 51.5449 125.183 cv
51.8882 125.183 52.1162 125.124 52.2427 125.022 cv
49.4863 125.011 45.9819 124.932 45.7437 124.932 cv
cp
f
95.7656 87.4746 mo
96.2271 87.4746 97.0981 87.5264 97.5078 87.6279 cv
99.1982 87.9863 99.6079 88.8066 99.7104 90.5479 cv
99.813 92.1875 99.813 93.6211 99.813 101.613 cv
99.813 108.017 li
99.813 113.293 99.1982 117.647 96.8418 120.566 cv
95.3955 122.295 93.1914 123.577 90.8003 124.053 cv
93.6084 123.802 96.2827 122.4 97.9507 120.407 cv
100.307 117.488 100.922 113.134 100.922 107.857 cv
100.922 101.454 li
100.922 93.4629 100.922 92.0283 100.819 90.3896 cv
100.717 88.6475 100.307 87.8281 98.6167 87.4688 cv
98.207 87.3672 97.3359 87.3154 96.8745 87.3154 cv
96.6699 87.3154 96.4648 87.2129 96.4648 87.0078 cv
96.4648 86.9014 96.498 86.8203 96.562 86.7588 cv
96.4321 86.7578 96.3032 86.7568 96.1758 86.7568 cv
95.6123 86.7568 95.3564 86.8604 95.3564 87.168 cv
95.3564 87.3721 95.561 87.4746 95.7656 87.4746 cv
cp
f
81.3306 87.4824 mo
81.4063 87.4775 81.481 87.4746 81.5576 87.4746 cv
81.6616 87.4746 81.7651 87.4482 81.8423 87.3945 cv
81.709 87.415 81.5605 87.4395 81.3857 87.4688 cv
81.3657 87.4727 81.3506 87.4785 81.3306 87.4824 cv
cp
f
106.146 87.4688 mo
106.138 87.4707 106.131 87.4736 106.122 87.4766 cv
106.187 87.4746 106.252 87.4746 106.319 87.4746 cv
106.437 87.4746 106.55 87.4365 106.628 87.3691 cv
106.489 87.3916 106.333 87.4229 106.146 87.4688 cv
cp
f
88.8838 126.043 mo
87.1416 126.043 81.9683 125.838 78.3311 122.406 cv
75.8208 119.998 73.8745 116.412 73.8745 108.933 cv
73.8745 101.454 li
73.8745 93.4629 73.8745 92.0283 73.772 90.3896 cv
73.6694 88.6475 73.2598 87.8281 71.5693 87.4688 cv
71.1592 87.3672 70.2886 87.3154 69.8276 87.3154 cv
69.6226 87.3154 69.4175 87.2129 69.4175 87.0078 cv
69.4175 86.9014 69.4507 86.8203 69.5146 86.7588 cv
69.3843 86.7578 69.2544 86.7568 69.1284 86.7568 cv
68.5649 86.7568 68.3086 86.8604 68.3086 87.168 cv
68.3086 87.3721 68.5137 87.4746 68.7188 87.4746 cv
69.1797 87.4746 70.0508 87.5264 70.4604 87.6279 cv
72.1509 87.9863 72.5605 88.8066 72.6631 90.5479 cv
72.7656 92.1875 72.7656 93.6211 72.7656 101.613 cv
72.7656 109.093 li
72.7656 116.571 74.7119 120.157 77.2222 122.564 cv
80.8594 125.997 86.0327 126.202 87.7749 126.202 cv
88.8101 126.202 89.9434 126.139 91.1318 125.928 cv
90.3462 126.012 89.5918 126.043 88.8838 126.043 cv
cp
f
232.204 128.952 mo
232.204 130.823 li
88.8867 130.819 li
90.2627 128.952 li
232.204 128.952 li
cp
f
23.0508 77.9688 mo
11.3096 78.249 li
7.23096 78.3896 5.54346 78.7422 4.48828 80.2891 cv
3.78516 81.3438 3.43359 82.1875 3.29297 82.75 cv
3.15234 83.3125 2.94141 83.5938 2.51953 83.5938 cv
2.02734 83.5938 1.88672 83.2422 1.88672 82.4688 cv
1.88672 81.3438 3.22266 74.9443 3.36328 74.3818 cv
3.57422 73.4678 3.78516 73.0449 4.20703 73.0449 cv
4.76953 73.0449 5.47314 73.749 7.23096 73.8896 cv
9.27051 74.1006 11.9429 74.2412 14.2632 74.2412 cv
41.2979 74.2412 li
45.7988 74.2412 46.6836 73.1016 47.2461 73.1016 cv
47.7383 73.1016 47.998 73.8564 48.125 74.9033 cv
48.3008 76.3535 48.5205 77.3203 49.6191 82.5508 cv
49.7646 83.2422 49.5015 83.5469 49.0918 83.6494 cv
48.8457 83.7109 48.2568 83.166 48.0371 82.0674 cv
47.5098 80.8809 li
46.1035 78.4639 44.5654 78.1563 38.626 78.1797 cv
29.0073 77.9688 li
29.0073 104.922 li
29.0073 111.391 29.0073 116.947 29.3589 119.971 cv
29.5698 121.939 29.9917 123.486 32.1016 123.768 cv
33.0859 123.908 34.6328 124.049 35.688 124.049 cv
36.4614 124.049 36.813 124.261 36.813 124.611 cv
36.813 125.104 36.2505 125.314 35.4771 125.314 cv
30.8354 125.314 27.9209 125.104 25.9521 125.104 cv
24.3345 125.104 19.7065 125.314 16.894 125.314 cv
15.9795 125.314 15.4873 125.104 15.4873 124.611 cv
15.4873 124.261 15.7686 124.049 16.6128 124.049 cv
17.6675 124.049 18.5112 123.908 19.144 123.768 cv
20.5508 123.486 22.3813 122.818 22.6992 119.9 cv
23.021 116.943 23.0508 111.391 23.0508 104.922 cv
23.0508 77.9688 li
cp
f
49.4688 105.78 mo
49.4688 106.036 49.5708 106.241 49.8271 106.395 cv
50.5957 106.856 52.2188 107.265 54.4727 107.265 cv
55.7021 107.265 57.1367 107.11 58.3149 106.29 cv
60.1074 105.061 61.4395 102.295 61.4395 98.4023 cv
61.4395 91.998 58.3325 88.4102 52.8511 88.4102 cv
51.3145 88.4102 50.3906 88.2607 49.8784 88.4141 cv
49.6226 88.5166 49.4688 88.7217 49.4688 89.0283 cv
49.4688 105.78 li
cp
39.9019 86.5088 mo
41.4429 86.6025 51.2456 86.5176 52.8335 86.5176 cv
56.0605 86.5176 60.271 86.8633 62.9858 88.8105 cv
64.2666 89.7324 66.4468 92.2432 66.5205 95.7773 cv
66.6216 100.618 64.3735 103.629 59.7627 107.881 cv
63.9634 113.26 67.2568 117.482 70.1992 120.686 cv
76.9722 128.058 80.4121 128.77 83.2939 129.322 cv
84.2617 129.507 85.2046 129.719 85.5122 129.719 cv
85.7686 129.719 85.7529 129.629 85.7529 129.783 cv
85.7529 130.09 85.7227 130.431 84.8003 130.431 cv
80.2935 130.074 li
76.7349 129.6 74.3896 128.182 73.0581 127.465 cv
70.855 126.286 67.2461 123.432 61.6445 116.74 cv
59.3691 114.022 56.6006 110.481 55.5762 109.15 cv
55.3716 108.945 55.2178 108.843 54.9102 108.843 cv
49.8784 108.687 li
49.6226 108.687 49.52 108.841 49.52 109.098 cv
49.52 110.327 li
49.52 115.244 49.52 119.291 49.7759 121.443 cv
49.9297 122.928 50.2368 124.056 51.7739 124.261 cv
52.4912 124.363 53.6177 124.465 54.0791 124.465 cv
54.3862 124.465 54.4888 124.619 54.4888 124.772 cv
54.4888 125.028 54.2324 125.183 53.6694 125.183 cv
50.8516 125.183 46.8398 125.091 46.584 125.091 cv
46.5327 125.091 43.3052 125.244 41.7686 125.244 cv
41.2051 125.244 40.9487 125.143 40.9487 124.835 cv
40.9487 124.681 41.0513 124.527 41.3589 124.527 cv
41.8198 124.527 42.4346 124.425 42.8955 124.322 cv
43.9199 124.117 44.1753 122.581 44.3799 121.095 cv
44.4795 90.2246 li
44.4795 90.2246 44.4185 87.6191 41.8628 87.582 cv
38.6406 87.5361 39.9019 86.5088 39.9019 86.5088 cv
cp
f
74.7148 101.613 mo
74.7148 93.6211 74.7148 92.1875 74.6123 90.5479 cv
74.5098 88.8066 74.1001 87.9863 72.4097 87.6279 cv
72 87.5264 71.1289 87.4746 70.668 87.4746 cv
70.4629 87.4746 70.2578 87.3721 70.2578 87.168 cv
70.2578 86.8604 70.5142 86.7568 71.0776 86.7568 cv
73.3833 86.7568 76.5078 86.9111 76.9688 86.9111 cv
77.4297 86.9111 81.5605 86.7568 83.0972 86.7568 cv
83.6606 86.7568 83.9165 86.8604 83.9165 87.168 cv
83.9165 87.3721 83.7119 87.4746 83.5068 87.4746 cv
83.1479 87.4746 82.8408 87.5264 82.2266 87.6279 cv
80.8433 87.833 80.4331 88.7559 80.3311 90.5479 cv
80.2285 92.1875 80.2285 93.6211 80.2285 101.613 cv
80.2285 108.785 li
80.2285 116.161 81.8677 119.338 84.0703 121.438 cv
86.5806 123.794 87.8286 124.256 90.7485 124.256 cv
93.8735 124.256 96.9473 122.77 98.7915 120.566 cv
101.148 117.647 101.762 113.293 101.762 108.017 cv
101.762 101.613 li
101.762 93.6211 101.762 92.1875 101.66 90.5479 cv
101.558 88.8066 101.148 87.9863 99.457 87.6279 cv
99.0479 87.5264 98.1768 87.4746 97.7153 87.4746 cv
97.5107 87.4746 97.3057 87.3721 97.3057 87.168 cv
97.3057 86.8604 97.562 86.7568 98.125 86.7568 cv
100.431 86.7568 103.248 86.9111 103.555 86.9111 cv
103.914 86.9111 106.321 86.7568 107.858 86.7568 cv
108.422 86.7568 108.678 86.8604 108.678 87.168 cv
108.678 87.3721 108.473 87.4746 108.268 87.4746 cv
107.909 87.4746 107.603 87.4746 106.987 87.6279 cv
105.604 87.8848 105.195 88.7559 105.092 90.5479 cv
104.99 92.1875 104.99 93.6211 104.99 101.613 cv
104.99 107.094 li
104.99 112.627 104.375 118.773 100.277 122.411 cv
96.5884 125.689 92.7461 126.202 89.7241 126.202 cv
87.9824 126.202 82.8086 125.997 79.1714 122.564 cv
76.6616 120.157 74.7148 116.571 74.7148 109.093 cv
74.7148 101.613 li
cp
f
68.0547 80.9941 mo
52.5674 80.9961 li
53.104 82.8691 li
68.0547 82.8691 li
68.0547 80.9941 li
cp
f
110.437 82.8945 mo
143.742 82.8945 li
144.221 82.251 144.632 81.6797 145.142 80.9219 cv
110.425 80.9219 li
110.437 82.8945 li
cp
f
190.992 80.9297 mo
191.506 81.7285 192.052 82.3086 192.479 82.9355 cv
231.867 82.9355 li
231.867 80.9297 li
190.992 80.9297 li
cp
f
69.1455 129.072 mo
69.1021 129.053 li
1.72998 129.053 li
1.72998 130.831 li
72.3042 130.831 li
71.0283 129.876 69.9854 129.618 69.1455 129.072 cv
cp
f
72.8149 47.2266 mo
80.1855 41.7227 li
92.9873 40.708 li
103.849 44.7773 li
105.401 48.0352 li
104.367 48.8105 li
103.212 46.3984 li
92.2207 42.2676 li
80.4751 43.3818 li
80.7622 44.3516 li
92.1641 43.2939 li
101.91 47.0625 li
101.91 47.6211 li
92.041 43.8115 li
80.9419 44.8184 li
81.2041 45.8604 li
92.1851 44.9258 li
101.651 48.6563 li
101.651 49.3027 li
92.1851 45.5723 li
81.2202 46.5068 li
73.8496 52.0869 li
73.8496 50.9229 li
74.3325 50.5293 li
72.8149 47.2266 li
cp
f
71.6987 47.1289 mo
79.6685 41.0762 li
92.9873 39.9316 li
103.591 43.8711 li
103.591 42.9658 li
92.9873 39.0273 li
79.2808 40.041 li
71.6875 45.751 li
71.6987 47.1289 li
cp
f
94.022 48.5029 mo
94.022 47.7275 li
100.415 50.3535 li
100.41 51.7764 li
100.041 50.9619 li
94.022 48.5029 li
cp
f
84.498 51.2109 mo
84.498 51.2109 86.9048 47.332 90.0654 51.0322 cv
89.3472 51.0322 li
89.3472 51.0322 87.5596 48.6602 84.498 51.2109 cv
cp
f
94.5391 51.1816 mo
94.5391 51.1816 99.4404 48.4102 99.9697 54.1934 cv
99.9697 67.9033 li
99.3672 67.6533 li
99.3232 54.3223 li
99.3232 54.3223 99.0454 49.5234 94.5391 51.1816 cv
cp
f
84.7114 54.585 mo
84.7114 54.585 84.2827 51.0684 87.4272 50.9229 cv
87.4272 50.9229 89.1626 50.8525 89.3062 54.1934 cv
84.7114 54.585 li
cp
f
84.6914 58.4434 mo
84.6914 55.4336 li
89.2373 55.0811 li
89.2373 57.999 li
84.6914 58.4434 li
cp
f
84.6914 62.3955 mo
84.6914 59.3848 li
89.2373 59.0332 li
89.2373 61.9512 li
84.6914 62.3955 li
cp
f
84.6914 66.5176 mo
84.6914 63.3203 li
89.2373 62.9688 li
89.2373 66.0732 li
84.6914 66.5176 li
cp
f
94.5391 54.6729 mo
94.5391 54.6729 93.9092 51.6064 96.4785 51.8281 cv
96.4785 51.8281 98.4351 52.0732 98.1597 55.7842 cv
94.5391 54.6729 li
cp
f
94.5391 55.5781 mo
94.5391 58.4229 li
98.0303 59.5146 li
98.0303 56.6133 li
94.5391 55.5781 li
cp
f
94.5391 59.458 mo
94.5391 62.3027 li
98.0303 63.3936 li
98.0303 60.4922 li
94.5391 59.458 li
cp
f
94.5391 63.208 mo
94.5391 66.0527 li
98.0303 67.1436 li
98.0303 64.2422 li
94.5391 63.208 li
cp
f
76.0479 75.9688 mo
76.0479 73.873 li
74.2612 73.5537 li
74.2373 72.6406 li
75.2666 72.7988 li
80.2422 69.6172 li
80.2422 73.9072 li
76.0479 75.9688 li
cp
f
83.2891 68.4414 mo
91.0479 67.6045 li
91.0479 72.5186 li
90.6797 72.5596 li
90.6797 68.6543 li
83.3125 69.4785 li
83.2891 68.4414 li
cp
f
94.6484 67.8994 mo
100.487 69.8027 li
100.487 74.0547 li
100.176 73.9316 li
100.176 70.6553 li
94.6484 68.877 li
94.6484 67.8994 li
cp
f
101.324 77.291 mo
92.1553 74.9746 li
81.4224 76.0098 li
81.4224 80.0186 li
75.272 80.0488 li
75.272 77.6904 li
81.293 74.7158 li
92.2842 73.8105 li
101.396 76.1787 li
103.336 78.0059 li
103.336 79.2236 li
101.324 77.291 li
cp
f
82.772 76.9307 mo
90.7891 76.2754 li
90.7891 79.2393 li
90.332 79.2393 li
90.332 77.3975 li
82.772 78.0381 li
82.772 76.9307 li
cp
f
93.7432 76.5654 mo
100.1 78.1006 li
100.12 79.2578 li
99.6748 79.2646 li
99.6953 78.7412 li
93.7432 77.3887 li
93.7432 76.5654 li
cp
f
106.829 82.8633 mo
106.829 80.9189 li
71.5547 80.9189 li
71.5547 82.8633 li
106.829 82.8633 li
cp
f
81.2202 67.2939 mo
81.2202 48.374 li
80.832 48.7725 li
80.832 67.7334 li
81.2202 67.2939 li
cp
f
91.0313 66.042 mo
91.2422 66.0342 li
91.2422 47.1943 li
83.2891 48.042 li
83.2891 48.8184 li
90.9927 48.0742 li
91.0313 66.042 li
cp
f
77.6372 66.5049 mo
77.6372 65.5371 li
80.0566 63.7607 li
80.0566 60.8193 li
77.6851 62.4063 li
77.6851 61.4863 li
79.9272 59.8818 li
79.9272 57.1309 li
77.729 58.6533 li
77.729 57.748 li
79.9272 56.2246 li
79.9717 54.6729 li
79.2896 53.9414 78.1167 53.7686 77.729 55.708 cv
77.729 55.708 77.5996 52.6045 79.9272 52.9922 cv
79.9272 49.2822 li
75.4902 52.71 li
74.606 52.4111 li
74.4766 54.4805 li
74.7354 55.127 li
75.4014 55.4121 li
75.4014 71.3535 li
80.0928 68.251 li
80.0928 64.9053 li
77.6372 66.5049 li
cp
f
89.8247 4.11914 mo
90.2324 4.11914 90.563 4.44922 90.563 4.85742 cv
90.563 5.26465 90.2324 5.5957 89.8247 5.5957 cv
89.4165 5.5957 89.0859 5.26465 89.0859 4.85742 cv
89.0859 4.44922 89.4165 4.11914 89.8247 4.11914 cv
cp
91.5649 31.5518 mo
91.5649 31.5518 92.8579 30.1289 91.3062 29.7422 cv
89.2373 29.6123 li
89.2373 29.6123 88.2031 28.9658 89.2373 28.5771 cv
89.2373 28.5771 90.6597 28.8359 89.8838 27.1553 cv
89.7573 22.5137 li
90.0938 21.71 90.6182 21.1533 91.188 20.9395 cv
91.188 23.0371 li
92.1436 23.0371 li
92.1436 19.5576 li
94.2632 23.0371 li
95.0669 23.0371 li
95.0669 17.6064 li
94.1113 17.6064 li
94.1113 20.9277 li
92.0649 17.6064 li
91.188 17.6064 li
91.188 20.2832 li
90.6519 20.3369 90.123 20.4824 89.71 20.7656 cv
89.498 12.9902 li
90.2847 12.9541 91.0659 12.9746 91.7051 13.0371 cv
91.7051 14.46 li
92.6104 13.3848 94.1299 13.0479 95.1318 13.1455 cv
94.1299 13.0479 92.6104 12.4141 91.7051 11.1621 cv
91.7051 12.585 li
91.0601 12.5215 90.2705 12.3867 89.4766 12.1943 cv
89.3428 7.28516 li
90.3867 7.11621 91.186 6.21777 91.186 5.12695 cv
91.186 3.99414 90.3257 3.07324 89.2251 2.95508 cv
89.1445 0 li
88.9058 0.129883 li
88.9004 2.94141 li
87.7314 2.99023 86.7969 3.94531 86.7969 5.12695 cv
86.7969 6.30371 87.7266 7.25684 88.8911 7.31055 cv
88.8809 12.04 li
87.1821 11.5625 85.6274 10.8223 85.6274 9.92188 cv
78.2568 9.20215 li
78.2568 9.97754 79.0327 11.5732 80.3257 11.6982 cv
79.0327 11.5732 78.2568 13.0156 78.2568 13.792 cv
85.6274 14.5117 li
85.6274 13.6113 87.1812 13.1758 88.8789 13.0303 cv
88.8496 27.0264 li
88.8496 27.0264 87.8149 27.5439 88.2031 28.0605 cv
88.2031 28.0605 86.0049 29.0947 87.1685 29.8711 cv
87.1685 29.8711 84.7114 30 86.0049 31.6816 cv
86.0049 31.6816 85.8916 37.2031 80.978 39.1064 cv
87.7827 38.5098 li
88.4414 31.0352 li
90.1426 31.1396 li
90.9185 33.0781 92.228 35.8525 95.2021 37.9219 cv
94.1675 37.2754 92.082 33.5967 91.5649 31.5518 cv
cp
f
104.348 50.7383 mo
103.09 49.9482 li
103.09 52.8164 li
102.587 52.2471 li
102.587 56.5576 li
104.024 53.5762 li
103.177 52.9141 li
104.348 50.7383 li
cp
f
1.6377 151.773 mo
1.38574 151.663 1.33838 151.585 1.33838 151.238 cv
1.33838 150.372 1.40137 149.428 1.41748 149.176 cv
1.43311 148.939 1.48047 148.766 1.60645 148.766 cv
1.74805 148.766 1.76367 148.907 1.76367 149.033 cv
1.76367 149.238 1.82666 149.569 1.90527 149.836 cv
2.25195 151.002 3.18115 151.427 4.15723 151.427 cv
5.57471 151.427 6.26758 150.466 6.26758 149.632 cv
6.26758 148.86 6.03125 148.136 4.72412 147.112 cv
3.99951 146.545 li
2.26758 145.19 1.66943 144.089 1.66943 142.813 cv
1.66943 141.081 3.11816 139.837 5.30664 139.837 cv
6.33057 139.837 6.9917 139.994 7.40137 140.105 cv
7.54297 140.136 7.62158 140.184 7.62158 140.294 cv
7.62158 140.498 7.55859 140.955 7.55859 142.184 cv
7.55859 142.53 7.51123 142.656 7.38525 142.656 cv
7.2749 142.656 7.22803 142.562 7.22803 142.373 cv
7.22803 142.23 7.14941 141.743 6.81836 141.333 cv
6.58252 141.034 6.12549 140.562 5.10205 140.562 cv
3.93701 140.562 3.22803 141.239 3.22803 142.184 cv
3.22803 142.907 3.59033 143.459 4.89746 144.451 cv
5.33838 144.781 li
7.24365 146.215 7.9209 147.302 7.9209 148.798 cv
7.9209 149.711 7.57422 150.797 6.44043 151.537 cv
5.65332 152.041 4.77148 152.183 3.93701 152.183 cv
3.02344 152.183 2.31494 152.073 1.6377 151.773 cv
cp
f
18.3286 140.939 mo
15.9824 141.002 li
15.0688 141.034 14.6909 141.113 14.4551 141.459 cv
14.2974 141.695 14.2188 141.885 14.187 142.011 cv
14.1558 142.136 14.1084 142.199 14.0142 142.199 cv
13.9038 142.199 13.8726 142.12 13.8726 141.947 cv
13.8726 141.695 14.1714 140.262 14.2031 140.136 cv
14.25 139.932 14.2974 139.837 14.3921 139.837 cv
14.5181 139.837 14.6753 139.994 15.0688 140.026 cv
15.5259 140.073 16.124 140.105 16.6436 140.105 cv
22.8794 140.105 li
23.3833 140.105 23.73 140.058 23.9663 140.026 cv
24.2021 139.979 24.3281 139.947 24.3911 139.947 cv
24.5015 139.947 24.5171 140.042 24.5171 140.277 cv
24.5171 140.609 24.4702 141.695 24.4702 142.104 cv
24.4541 142.262 24.4229 142.356 24.3281 142.356 cv
24.2021 142.356 24.1709 142.277 24.1553 142.041 cv
24.1392 141.868 li
24.1079 141.459 23.6826 141.019 22.2813 140.986 cv
20.2969 140.939 li
20.2969 147.396 li
20.2969 148.844 20.2969 150.089 20.376 150.766 cv
20.4229 151.206 20.5176 151.553 20.9897 151.615 cv
21.2104 151.647 21.5566 151.679 21.793 151.679 cv
21.9663 151.679 22.0449 151.727 22.0449 151.805 cv
22.0449 151.915 21.9189 151.962 21.7456 151.962 cv
20.7065 151.962 19.7144 151.915 19.2734 151.915 cv
18.9111 151.915 17.9194 151.962 17.2896 151.962 cv
17.0845 151.962 16.9746 151.915 16.9746 151.805 cv
16.9746 151.727 17.0376 151.679 17.2266 151.679 cv
17.4624 151.679 17.6519 151.647 17.7935 151.615 cv
18.1084 151.553 18.2026 151.206 18.25 150.75 cv
18.3286 150.089 18.3286 148.844 18.3286 147.396 cv
18.3286 140.939 li
cp
f
35.8257 147.064 mo
35.9043 147.064 35.9204 147.018 35.9043 146.971 cv
34.4873 143.081 li
34.4717 143.019 34.4561 142.939 34.4087 142.939 cv
34.3613 142.939 34.3301 143.019 34.314 143.081 cv
32.8652 146.955 li
32.8496 147.018 32.8652 147.064 32.9282 147.064 cv
35.8257 147.064 li
cp
32.6133 147.853 mo
32.5347 147.853 32.5034 147.884 32.4717 147.979 cv
31.6216 150.23 li
31.4639 150.624 31.3853 151.002 31.3853 151.19 cv
31.3853 151.474 31.5269 151.679 32.0151 151.679 cv
32.2515 151.679 li
32.4404 151.679 32.4873 151.711 32.4873 151.805 cv
32.4873 151.931 32.3931 151.962 32.2197 151.962 cv
31.7158 151.962 31.0386 151.915 30.5508 151.915 cv
30.3774 151.915 29.5112 151.962 28.6924 151.962 cv
28.4878 151.962 28.3931 151.931 28.3931 151.805 cv
28.3931 151.711 28.4561 151.679 28.582 151.679 cv
28.7241 151.679 28.9443 151.663 29.0703 151.647 cv
29.7949 151.553 30.0938 151.018 30.4087 150.23 cv
34.3613 140.341 li
34.5503 139.885 34.645 139.711 34.8022 139.711 cv
34.9438 139.711 35.0386 139.853 35.1958 140.215 cv
35.5737 141.081 38.0933 147.506 39.1011 149.899 cv
39.6997 151.316 40.1563 151.537 40.4868 151.615 cv
40.7231 151.663 40.9595 151.679 41.1484 151.679 cv
41.2744 151.679 41.353 151.694 41.353 151.805 cv
41.353 151.931 41.2114 151.962 40.6284 151.962 cv
40.062 151.962 38.9121 151.962 37.6523 151.931 cv
37.3691 151.915 37.1802 151.915 37.1802 151.805 cv
37.1802 151.711 37.2432 151.679 37.4004 151.663 cv
37.5107 151.632 37.6211 151.49 37.5425 151.301 cv
36.2822 147.962 li
36.251 147.884 36.2036 147.853 36.125 147.853 cv
32.6133 147.853 li
cp
f
49.6694 140.939 mo
47.3232 141.002 li
46.4097 141.034 46.0317 141.113 45.7959 141.459 cv
45.6382 141.695 45.5596 141.885 45.5278 142.011 cv
45.4966 142.136 45.4492 142.199 45.355 142.199 cv
45.2446 142.199 45.2129 142.12 45.2129 141.947 cv
45.2129 141.695 45.5122 140.262 45.5439 140.136 cv
45.5908 139.932 45.6382 139.837 45.7329 139.837 cv
45.8589 139.837 46.0161 139.994 46.4097 140.026 cv
46.8667 140.073 47.4648 140.105 47.9844 140.105 cv
54.2202 140.105 li
54.7241 140.105 55.0708 140.058 55.3071 140.026 cv
55.543 139.979 55.6689 139.947 55.7319 139.947 cv
55.8423 139.947 55.8579 140.042 55.8579 140.277 cv
55.8579 140.609 55.811 141.695 55.811 142.104 cv
55.7949 142.262 55.7637 142.356 55.6689 142.356 cv
55.543 142.356 55.5117 142.277 55.4961 142.041 cv
55.48 141.868 li
55.4487 141.459 55.0234 141.019 53.6221 140.986 cv
51.6377 140.939 li
51.6377 147.396 li
51.6377 148.844 51.6377 150.089 51.7168 150.766 cv
51.7637 151.206 51.8584 151.553 52.3306 151.615 cv
52.5513 151.647 52.8975 151.679 53.1338 151.679 cv
53.3071 151.679 53.3857 151.727 53.3857 151.805 cv
53.3857 151.915 53.2598 151.962 53.0864 151.962 cv
52.0474 151.962 51.0552 151.915 50.6143 151.915 cv
50.252 151.915 49.2603 151.962 48.6304 151.962 cv
48.4253 151.962 48.3154 151.915 48.3154 151.805 cv
48.3154 151.727 48.3784 151.679 48.5674 151.679 cv
48.8032 151.679 48.9922 151.647 49.1338 151.615 cv
49.4492 151.553 49.5435 151.206 49.5908 150.75 cv
49.6694 150.089 49.6694 148.844 49.6694 147.396 cv
49.6694 140.939 li
cp
f
63.3242 144.624 mo
63.3242 142.23 63.3242 141.79 63.293 141.286 cv
63.2612 140.751 63.1353 140.498 62.6157 140.389 cv
62.4897 140.356 62.2222 140.341 62.0015 140.341 cv
61.8281 140.341 61.7339 140.31 61.7339 140.199 cv
61.7339 140.089 61.8442 140.058 62.0806 140.058 cv
62.915 140.058 63.9072 140.105 64.3481 140.105 cv
64.8521 140.105 67.9854 140.105 68.2847 140.089 cv
68.584 140.058 68.8359 140.026 68.9619 139.994 cv
69.0405 139.979 69.1353 139.932 69.2139 139.932 cv
69.2925 139.932 69.3081 139.994 69.3081 140.073 cv
69.3081 140.184 69.2295 140.373 69.1821 141.097 cv
69.1665 141.254 69.1353 141.947 69.1035 142.136 cv
69.0879 142.215 69.0562 142.31 68.9458 142.31 cv
68.8359 142.31 68.8042 142.23 68.8042 142.089 cv
68.8042 141.979 68.7886 141.711 68.71 141.522 cv
68.5996 141.239 68.4424 141.05 67.6548 140.955 cv
67.3872 140.924 65.7339 140.893 65.4189 140.893 cv
65.3398 140.893 65.3086 140.939 65.3086 141.05 cv
65.3086 145.034 li
65.3086 145.144 65.3242 145.207 65.4189 145.207 cv
65.7651 145.207 67.5762 145.207 67.9385 145.176 cv
68.3159 145.144 68.5522 145.097 68.6943 144.939 cv
68.8042 144.813 68.8672 144.734 68.9458 144.734 cv
69.0088 144.734 69.0562 144.766 69.0562 144.86 cv
69.0562 144.955 68.9932 145.207 68.9302 146.01 cv
68.9146 146.324 68.8672 146.955 68.8672 147.064 cv
68.8672 147.19 68.8672 147.364 68.7256 147.364 cv
68.6152 147.364 68.584 147.302 68.584 147.223 cv
68.5684 147.064 68.5684 146.86 68.521 146.656 cv
68.4424 146.341 68.2217 146.104 67.6392 146.041 cv
67.3398 146.01 65.7808 145.994 65.4028 145.994 cv
65.3242 145.994 65.3086 146.057 65.3086 146.152 cv
65.3086 147.396 li
65.3086 147.932 65.293 149.38 65.3086 149.836 cv
65.3398 150.923 65.5918 151.159 67.1982 151.159 cv
67.6074 151.159 68.269 151.159 68.6782 150.97 cv
69.0879 150.781 69.2769 150.451 69.3867 149.806 cv
69.4185 149.632 69.4502 149.569 69.5601 149.569 cv
69.686 149.569 69.686 149.694 69.686 149.853 cv
69.686 150.215 69.5601 151.285 69.4814 151.6 cv
69.3711 152.01 69.2295 152.01 68.6313 152.01 cv
66.2534 152.01 65.1982 151.915 64.269 151.915 cv
63.9072 151.915 62.915 151.962 62.2852 151.962 cv
62.0806 151.962 61.9702 151.915 61.9702 151.805 cv
61.9702 151.727 62.0332 151.679 62.2222 151.679 cv
62.4585 151.679 62.6475 151.647 62.7891 151.615 cv
63.104 151.553 63.1826 151.206 63.2456 150.75 cv
63.3242 150.089 63.3242 148.844 63.3242 147.396 cv
63.3242 144.624 li
cp
f
86.4551 144.624 mo
86.4551 142.23 86.4551 141.79 86.4238 141.286 cv
86.3921 140.751 86.2661 140.498 85.7466 140.389 cv
85.6206 140.356 85.353 140.341 85.1323 140.341 cv
84.9595 140.341 84.8647 140.31 84.8647 140.199 cv
84.8647 140.089 84.9751 140.058 85.2114 140.058 cv
86.0459 140.058 87.0381 140.105 87.5103 140.105 cv
87.8882 140.105 88.8804 140.058 89.4473 140.058 cv
89.6836 140.058 89.7935 140.089 89.7935 140.199 cv
89.7935 140.31 89.6992 140.341 89.5415 140.341 cv
89.3687 140.341 89.2739 140.356 89.085 140.389 cv
88.6602 140.467 88.5337 140.735 88.5024 141.286 cv
88.4707 141.79 88.4707 142.23 88.4707 144.624 cv
88.4707 146.828 li
88.4707 149.112 88.9277 150.073 89.6992 150.702 cv
90.4077 151.285 91.1323 151.349 91.6675 151.349 cv
92.3604 151.349 93.2109 151.128 93.8408 150.498 cv
94.7065 149.632 94.7539 148.215 94.7539 146.593 cv
94.7539 144.624 li
94.7539 142.23 94.7539 141.79 94.7227 141.286 cv
94.6909 140.751 94.5649 140.498 94.0454 140.389 cv
93.9194 140.356 93.6519 140.341 93.4785 140.341 cv
93.3052 140.341 93.2109 140.31 93.2109 140.199 cv
93.2109 140.089 93.3213 140.058 93.5415 140.058 cv
94.3447 140.058 95.3364 140.105 95.3525 140.105 cv
95.5415 140.105 96.5332 140.058 97.1475 140.058 cv
97.3682 140.058 97.478 140.089 97.478 140.199 cv
97.478 140.31 97.3838 140.341 97.1948 140.341 cv
97.0215 140.341 96.9272 140.356 96.7383 140.389 cv
96.313 140.467 96.187 140.735 96.1553 141.286 cv
96.124 141.79 96.124 142.23 96.124 144.624 cv
96.124 146.31 li
96.124 148.057 95.9507 149.915 94.6279 151.049 cv
93.5098 152.01 92.376 152.183 91.3525 152.183 cv
90.5181 152.183 89.0063 152.136 87.8569 151.097 cv
87.0537 150.372 86.4551 149.206 86.4551 146.923 cv
86.4551 144.624 li
cp
f
105.998 149.82 mo
106.029 151.049 106.234 151.459 106.549 151.569 cv
106.816 151.663 107.116 151.679 107.368 151.679 cv
107.541 151.679 107.635 151.711 107.635 151.805 cv
107.635 151.931 107.494 151.962 107.273 151.962 cv
106.25 151.962 105.62 151.915 105.32 151.915 cv
105.179 151.915 104.438 151.962 103.62 151.962 cv
103.415 151.962 103.273 151.947 103.273 151.805 cv
103.273 151.711 103.368 151.679 103.525 151.679 cv
103.73 151.679 104.014 151.663 104.234 151.6 cv
104.644 151.474 104.707 151.018 104.722 149.647 cv
104.864 140.325 li
104.864 140.011 104.911 139.79 105.068 139.79 cv
105.242 139.79 105.383 139.994 105.651 140.277 cv
105.84 140.482 108.233 143.049 110.533 145.333 cv
111.604 146.403 113.729 148.672 113.997 148.923 cv
114.076 148.923 li
113.918 141.853 li
113.902 140.893 113.761 140.593 113.383 140.436 cv
113.146 140.341 112.769 140.341 112.548 140.341 cv
112.359 140.341 112.296 140.294 112.296 140.199 cv
112.296 140.073 112.47 140.058 112.706 140.058 cv
113.524 140.058 114.28 140.105 114.611 140.105 cv
114.784 140.105 115.383 140.058 116.154 140.058 cv
116.359 140.058 116.517 140.073 116.517 140.199 cv
116.517 140.294 116.422 140.341 116.233 140.341 cv
116.076 140.341 115.95 140.341 115.761 140.389 cv
115.32 140.515 115.194 140.845 115.178 141.727 cv
115.005 151.663 li
115.005 152.01 114.942 152.151 114.8 152.151 cv
114.627 152.151 114.438 151.978 114.265 151.805 cv
113.272 150.86 111.257 148.798 109.619 147.176 cv
107.903 145.475 106.155 143.507 105.872 143.207 cv
105.824 143.207 li
105.998 149.82 li
cp
f
124.595 144.624 mo
124.595 142.23 124.595 141.79 124.563 141.286 cv
124.531 140.751 124.375 140.482 124.027 140.403 cv
123.854 140.356 123.65 140.341 123.461 140.341 cv
123.304 140.341 123.209 140.31 123.209 140.184 cv
123.209 140.089 123.335 140.058 123.587 140.058 cv
124.186 140.058 125.178 140.105 125.634 140.105 cv
126.027 140.105 126.957 140.058 127.555 140.058 cv
127.76 140.058 127.886 140.089 127.886 140.184 cv
127.886 140.31 127.792 140.341 127.634 140.341 cv
127.477 140.341 127.351 140.356 127.162 140.389 cv
126.736 140.467 126.61 140.735 126.578 141.286 cv
126.547 141.79 126.547 142.23 126.547 144.624 cv
126.547 147.396 li
126.547 148.923 126.547 150.167 126.61 150.844 cv
126.658 151.27 126.768 151.553 127.24 151.615 cv
127.461 151.647 127.807 151.679 128.043 151.679 cv
128.217 151.679 128.296 151.727 128.296 151.805 cv
128.296 151.915 128.17 151.962 127.996 151.962 cv
126.957 151.962 125.965 151.915 125.539 151.915 cv
125.178 151.915 124.186 151.962 123.556 151.962 cv
123.351 151.962 123.24 151.915 123.24 151.805 cv
123.24 151.727 123.304 151.679 123.492 151.679 cv
123.729 151.679 123.918 151.647 124.06 151.615 cv
124.375 151.553 124.469 151.285 124.516 150.828 cv
124.595 150.167 124.595 148.923 124.595 147.396 cv
124.595 144.624 li
cp
f
134.831 141.601 mo
134.469 140.735 134.201 140.562 133.634 140.403 cv
133.397 140.341 133.146 140.341 133.02 140.341 cv
132.879 140.341 132.831 140.294 132.831 140.199 cv
132.831 140.073 133.005 140.058 133.24 140.058 cv
134.075 140.058 134.973 140.105 135.523 140.105 cv
135.917 140.105 136.674 140.058 137.46 140.058 cv
137.649 140.058 137.822 140.089 137.822 140.199 cv
137.822 140.31 137.729 140.341 137.587 140.341 cv
137.334 140.341 137.099 140.356 136.973 140.451 cv
136.862 140.53 136.814 140.64 136.814 140.781 cv
136.814 140.986 136.957 141.428 137.178 141.994 cv
139.886 149.144 li
139.949 149.144 li
140.626 147.411 142.673 142.341 143.051 141.302 cv
143.13 141.097 143.192 140.86 143.192 140.719 cv
143.192 140.593 143.13 140.467 142.988 140.42 cv
142.799 140.356 142.563 140.341 142.358 140.341 cv
142.217 140.341 142.09 140.325 142.09 140.215 cv
142.09 140.089 142.232 140.058 142.531 140.058 cv
143.318 140.058 143.979 140.105 144.185 140.105 cv
144.452 140.105 145.192 140.058 145.665 140.058 cv
145.87 140.058 145.996 140.089 145.996 140.199 cv
145.996 140.31 145.9 140.341 145.744 140.341 cv
145.586 140.341 145.255 140.341 144.972 140.53 cv
144.767 140.672 144.531 140.939 144.105 141.947 cv
143.492 143.428 143.066 144.277 142.217 146.215 cv
141.209 148.514 140.468 150.23 140.122 151.018 cv
139.713 151.931 139.618 152.183 139.397 152.183 cv
139.192 152.183 139.098 151.962 138.8 151.223 cv
134.831 141.601 li
cp
f
152.248 144.624 mo
152.248 142.23 152.248 141.79 152.217 141.286 cv
152.185 140.751 152.059 140.498 151.539 140.389 cv
151.413 140.356 151.146 140.341 150.926 140.341 cv
150.752 140.341 150.658 140.31 150.658 140.199 cv
150.658 140.089 150.768 140.058 151.004 140.058 cv
151.838 140.058 152.83 140.105 153.271 140.105 cv
153.775 140.105 156.909 140.105 157.209 140.089 cv
157.508 140.058 157.759 140.026 157.886 139.994 cv
157.964 139.979 158.059 139.932 158.138 139.932 cv
158.217 139.932 158.232 139.994 158.232 140.073 cv
158.232 140.184 158.153 140.373 158.105 141.097 cv
158.09 141.254 158.059 141.947 158.027 142.136 cv
158.012 142.215 157.979 142.31 157.87 142.31 cv
157.759 142.31 157.729 142.23 157.729 142.089 cv
157.729 141.979 157.713 141.711 157.634 141.522 cv
157.523 141.239 157.365 141.05 156.579 140.955 cv
156.311 140.924 154.657 140.893 154.342 140.893 cv
154.264 140.893 154.232 140.939 154.232 141.05 cv
154.232 145.034 li
154.232 145.144 154.248 145.207 154.342 145.207 cv
154.688 145.207 156.5 145.207 156.862 145.176 cv
157.24 145.144 157.476 145.097 157.617 144.939 cv
157.729 144.813 157.791 144.734 157.87 144.734 cv
157.933 144.734 157.979 144.766 157.979 144.86 cv
157.979 144.955 157.917 145.207 157.854 146.01 cv
157.838 146.324 157.791 146.955 157.791 147.064 cv
157.791 147.19 157.791 147.364 157.649 147.364 cv
157.539 147.364 157.508 147.302 157.508 147.223 cv
157.492 147.064 157.492 146.86 157.444 146.656 cv
157.365 146.341 157.146 146.104 156.563 146.041 cv
156.264 146.01 154.704 145.994 154.326 145.994 cv
154.248 145.994 154.232 146.057 154.232 146.152 cv
154.232 147.396 li
154.232 147.932 154.217 149.38 154.232 149.836 cv
154.264 150.923 154.516 151.159 156.122 151.159 cv
156.531 151.159 157.192 151.159 157.602 150.97 cv
158.012 150.781 158.2 150.451 158.311 149.806 cv
158.342 149.632 158.373 149.569 158.483 149.569 cv
158.609 149.569 158.609 149.694 158.609 149.853 cv
158.609 150.215 158.483 151.285 158.405 151.6 cv
158.295 152.01 158.153 152.01 157.555 152.01 cv
155.177 152.01 154.122 151.915 153.192 151.915 cv
152.83 151.915 151.838 151.962 151.209 151.962 cv
151.004 151.962 150.895 151.915 150.895 151.805 cv
150.895 151.727 150.957 151.679 151.146 151.679 cv
151.382 151.679 151.571 151.647 151.713 151.615 cv
152.027 151.553 152.106 151.206 152.17 150.75 cv
152.248 150.089 152.248 148.844 152.248 147.396 cv
152.248 144.624 li
cp
f
168.625 145.868 mo
168.625 146.041 168.656 146.104 168.767 146.152 cv
169.097 146.262 169.57 146.31 169.963 146.31 cv
170.593 146.31 170.798 146.246 171.082 146.041 cv
171.554 145.694 172.011 144.971 172.011 143.68 cv
172.011 141.443 170.53 140.798 169.601 140.798 cv
169.207 140.798 168.925 140.813 168.767 140.86 cv
168.656 140.893 168.625 140.955 168.625 141.081 cv
168.625 145.868 li
cp
166.767 144.624 mo
166.767 142.23 166.767 141.79 166.735 141.286 cv
166.704 140.751 166.578 140.498 166.059 140.389 cv
165.932 140.356 165.664 140.341 165.443 140.341 cv
165.271 140.341 165.176 140.31 165.176 140.199 cv
165.176 140.089 165.287 140.058 165.522 140.058 cv
166.357 140.058 167.35 140.105 167.68 140.105 cv
168.215 140.105 169.412 140.058 169.9 140.058 cv
170.893 140.058 171.947 140.152 172.798 140.735 cv
173.238 141.034 173.869 141.837 173.869 142.893 cv
173.869 144.057 173.38 145.128 171.79 146.419 cv
173.191 148.183 174.278 149.585 175.207 150.561 cv
176.089 151.474 176.734 151.585 176.971 151.632 cv
177.145 151.663 177.285 151.679 177.412 151.679 cv
177.538 151.679 177.601 151.727 177.601 151.805 cv
177.601 151.931 177.49 151.962 177.302 151.962 cv
175.806 151.962 li
174.924 151.962 174.53 151.884 174.121 151.663 cv
173.443 151.301 172.846 150.561 171.963 149.349 cv
171.334 148.482 170.608 147.411 170.404 147.176 cv
170.325 147.081 170.23 147.064 170.121 147.064 cv
168.751 147.034 li
168.672 147.034 168.625 147.064 168.625 147.16 cv
168.625 147.38 li
168.625 148.844 168.625 150.089 168.704 150.75 cv
168.751 151.206 168.846 151.553 169.317 151.615 cv
169.554 151.647 169.9 151.679 170.089 151.679 cv
170.215 151.679 170.278 151.727 170.278 151.805 cv
170.278 151.915 170.168 151.962 169.963 151.962 cv
169.05 151.962 167.885 151.915 167.648 151.915 cv
167.35 151.915 166.357 151.962 165.728 151.962 cv
165.522 151.962 165.413 151.915 165.413 151.805 cv
165.413 151.727 165.476 151.679 165.664 151.679 cv
165.9 151.679 166.09 151.647 166.231 151.615 cv
166.546 151.553 166.625 151.206 166.688 150.75 cv
166.767 150.089 166.767 148.844 166.767 147.396 cv
166.767 144.624 li
cp
f
182.357 151.773 mo
182.105 151.663 182.059 151.585 182.059 151.238 cv
182.059 150.372 182.121 149.428 182.137 149.176 cv
182.152 148.939 182.2 148.766 182.326 148.766 cv
182.468 148.766 182.483 148.907 182.483 149.033 cv
182.483 149.238 182.546 149.569 182.625 149.836 cv
182.972 151.002 183.9 151.427 184.877 151.427 cv
186.294 151.427 186.986 150.466 186.986 149.632 cv
186.986 148.86 186.751 148.136 185.443 147.112 cv
184.72 146.545 li
182.987 145.19 182.389 144.089 182.389 142.813 cv
182.389 141.081 183.838 139.837 186.026 139.837 cv
187.05 139.837 187.711 139.994 188.121 140.105 cv
188.263 140.136 188.342 140.184 188.342 140.294 cv
188.342 140.498 188.278 140.955 188.278 142.184 cv
188.278 142.53 188.23 142.656 188.104 142.656 cv
187.995 142.656 187.947 142.562 187.947 142.373 cv
187.947 142.23 187.869 141.743 187.538 141.333 cv
187.302 141.034 186.846 140.562 185.821 140.562 cv
184.656 140.562 183.947 141.239 183.947 142.184 cv
183.947 142.907 184.31 143.459 185.617 144.451 cv
186.059 144.781 li
187.963 146.215 188.641 147.302 188.641 148.798 cv
188.641 149.711 188.294 150.797 187.16 151.537 cv
186.373 152.041 185.491 152.183 184.656 152.183 cv
183.743 152.183 183.035 152.073 182.357 151.773 cv
cp
f
196.954 144.624 mo
196.954 142.23 196.954 141.79 196.922 141.286 cv
196.892 140.751 196.733 140.482 196.388 140.403 cv
196.214 140.356 196.009 140.341 195.82 140.341 cv
195.663 140.341 195.568 140.31 195.568 140.184 cv
195.568 140.089 195.694 140.058 195.946 140.058 cv
196.545 140.058 197.537 140.105 197.993 140.105 cv
198.387 140.105 199.316 140.058 199.914 140.058 cv
200.119 140.058 200.245 140.089 200.245 140.184 cv
200.245 140.31 200.15 140.341 199.993 140.341 cv
199.836 140.341 199.71 140.356 199.521 140.389 cv
199.096 140.467 198.97 140.735 198.938 141.286 cv
198.906 141.79 198.906 142.23 198.906 144.624 cv
198.906 147.396 li
198.906 148.923 198.906 150.167 198.97 150.844 cv
199.017 151.27 199.127 151.553 199.6 151.615 cv
199.82 151.647 200.167 151.679 200.402 151.679 cv
200.575 151.679 200.654 151.727 200.654 151.805 cv
200.654 151.915 200.529 151.962 200.355 151.962 cv
199.316 151.962 198.324 151.915 197.898 151.915 cv
197.537 151.915 196.545 151.962 195.914 151.962 cv
195.71 151.962 195.6 151.915 195.6 151.805 cv
195.6 151.727 195.663 151.679 195.852 151.679 cv
196.088 151.679 196.276 151.647 196.418 151.615 cv
196.733 151.553 196.828 151.285 196.875 150.828 cv
196.954 150.167 196.954 148.923 196.954 147.396 cv
196.954 144.624 li
cp
f
210.733 140.939 mo
208.387 141.002 li
207.474 141.034 207.096 141.113 206.859 141.459 cv
206.702 141.695 206.623 141.885 206.592 142.011 cv
206.56 142.136 206.513 142.199 206.418 142.199 cv
206.309 142.199 206.276 142.12 206.276 141.947 cv
206.276 141.695 206.576 140.262 206.607 140.136 cv
206.654 139.932 206.702 139.837 206.796 139.837 cv
206.922 139.837 207.08 139.994 207.474 140.026 cv
207.93 140.073 208.529 140.105 209.049 140.105 cv
215.284 140.105 li
215.788 140.105 216.134 140.058 216.371 140.026 cv
216.607 139.979 216.733 139.947 216.796 139.947 cv
216.906 139.947 216.922 140.042 216.922 140.277 cv
216.922 140.609 216.875 141.695 216.875 142.104 cv
216.858 142.262 216.827 142.356 216.733 142.356 cv
216.607 142.356 216.575 142.277 216.56 142.041 cv
216.544 141.868 li
216.513 141.459 216.088 141.019 214.686 140.986 cv
212.701 140.939 li
212.701 147.396 li
212.701 148.844 212.701 150.089 212.78 150.766 cv
212.828 151.206 212.922 151.553 213.395 151.615 cv
213.614 151.647 213.961 151.679 214.197 151.679 cv
214.371 151.679 214.45 151.727 214.45 151.805 cv
214.45 151.915 214.324 151.962 214.15 151.962 cv
213.111 151.962 212.119 151.915 211.678 151.915 cv
211.316 151.915 210.324 151.962 209.693 151.962 cv
209.489 151.962 209.379 151.915 209.379 151.805 cv
209.379 151.727 209.442 151.679 209.631 151.679 cv
209.867 151.679 210.056 151.647 210.197 151.615 cv
210.513 151.553 210.607 151.206 210.654 150.75 cv
210.733 150.089 210.733 148.844 210.733 147.396 cv
210.733 140.939 li
cp
f
226.151 147.884 mo
226.151 147.034 225.994 146.687 225.789 146.23 cv
225.68 145.979 223.569 142.515 223.018 141.695 cv
222.625 141.113 222.23 140.719 221.932 140.546 cv
221.727 140.436 221.459 140.341 221.27 140.341 cv
221.145 140.341 221.034 140.31 221.034 140.199 cv
221.034 140.105 221.145 140.058 221.333 140.058 cv
221.617 140.058 222.798 140.105 223.317 140.105 cv
223.647 140.105 224.293 140.058 225.002 140.058 cv
225.16 140.058 225.238 140.105 225.238 140.199 cv
225.238 140.294 225.128 140.31 224.892 140.373 cv
224.75 140.403 224.671 140.53 224.671 140.656 cv
224.671 140.781 224.75 140.971 224.86 141.191 cv
225.081 141.664 227.286 145.459 227.538 145.899 cv
227.695 145.522 229.68 142.058 229.899 141.569 cv
230.057 141.223 230.12 140.955 230.12 140.751 cv
230.12 140.593 230.057 140.42 229.789 140.356 cv
229.647 140.325 229.506 140.294 229.506 140.199 cv
229.506 140.089 229.584 140.058 229.773 140.058 cv
230.293 140.058 230.797 140.105 231.254 140.105 cv
231.601 140.105 232.64 140.058 232.938 140.058 cv
233.111 140.058 233.222 140.089 233.222 140.184 cv
233.222 140.294 233.097 140.341 232.923 140.341 cv
232.766 140.341 232.467 140.403 232.229 140.53 cv
231.899 140.688 231.726 140.877 231.38 141.302 cv
230.86 141.932 228.655 145.632 228.372 146.31 cv
228.136 146.876 228.136 147.364 228.136 147.884 cv
228.136 149.176 li
228.136 149.428 228.136 150.089 228.184 150.75 cv
228.215 151.206 228.356 151.553 228.829 151.615 cv
229.049 151.647 229.396 151.679 229.616 151.679 cv
229.789 151.679 229.868 151.727 229.868 151.805 cv
229.868 151.915 229.742 151.962 229.538 151.962 cv
228.546 151.962 227.553 151.915 227.128 151.915 cv
226.734 151.915 225.742 151.962 225.16 151.962 cv
224.939 151.962 224.813 151.931 224.813 151.805 cv
224.813 151.727 224.892 151.679 225.064 151.679 cv
225.286 151.679 225.475 151.647 225.616 151.615 cv
225.931 151.553 226.073 151.206 226.104 150.75 cv
226.151 150.089 226.151 149.428 226.151 149.176 cv
226.151 147.884 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Matt Derezinski) ()%%Title: (bwtrumanlogonew.eps)%%CreationDate: 2/12/08 10:54 AM%AI9_DataStream%Gb"-6$ZdOOOtM(\5lCpWh!g']*"Q>R6G:$m#a#a4^!jFe\7]u/@Ud6kQIp&V-*[uW[`A:20>;f6M.2UAg7GSDY#Ne#'e050&t+SM%+9?l^d:3"PmcsZ:m:,sZcXs?KB6@5"Hr\L?<u2s,oZu,rDskY"oA9-]JFfp`!P"R[kE2O.%s?]_D!0QrpU?X(LR5X?jlZPk\\6\a%mQ[0mDUt03'd&uphL)Z@^=fTr]A*"rCm^P[F4E4-pX_?*?bX:'^"Iflo<h)/r=.lfj8JiAk-Gs(c,lU8?/E6/g:Ri*DQZ1<%A3+Z%U&0TDI^OHG#UkI#?,1+K`LhUoI"21#]qkcsiiJZ8o;2i/5!JkYn(5;\5lVe&F!QIX`Qe8h-W8CJLOZ^\R/Lp3r_^H(iEp;>c!Ghm%UWqIN<85HOh=cW9<6l-T;>U*7pY@B#k85lK'F;(VIgEH!2Kr=MWg[!;J<9fep?"t3FU`hu]E-"Kq^a7$+WnJQXmb,dp2s&hfuGbt%G7WH?c)bYcXWOT5s(a/Vhc1$B:ad(Uod8\X)f?m`s7L\bZ[)>*oRl7^cR:04O8o.Nk3_j?_f#El]tO<(hf'\;@<;>6B)SqWcE#-3%<Y)>3(5Tarba35(q6HI"C>Q=K#gG%+["j+]od*KU_^EabI"/j*iNq2Rlc\V@V#,(ucX'pb14u1c*aW.P=(&Si<O6SA3;)V32k/VF%n#d`6@o:[iftQ*FD/LVUnucl]@(qdFQi:WJ5HK'I2\/3][Q![&hToe^.A$\=^KCNGfeMZaK!4$Jmf'Hh=2O[?<UW:FF@4<ce]qFa%qH5oT+IH+um:T]Lol7H#/f;R#&1tR'rUDX6b#c4@\(>hr%5ZnGr;:GVI?haKX(FNpa"l,5ItR`16pmFc*]A4oG`_+M(TEq1S:C'd%/,7#k6,`6Cf7@>4l=WDLoDt:Ikl89dotrhdQ=\murd"+%g#C$WLijSal5K]3/cHgrr4cKOC0fkDcoiu[a4IobYH&CYF0;qT<86E7%D#r1qJ83ih9$81Y^^L<QL@BiN_Z6WD!#5FLs+"9*!OZ/VkAlD4b9^Os.stX)g(q5#.st^+3"KNCpbG$<,C`-WrE]a-MuNg32W9-N%ThX6=re;3IJ&%^Gp`Jm(8oS+D$30#p/].N9M<Vr)UIFr"mDa(?U.qSMWQFf8$LP_1J6B"9VYpV@RDqohV@rmkSD8/)SoJDu\9;8_%IA@GP"":Mes.^k-6#JQ0iuZ*V5bWV[_b:fjMtZ+Z]V0K's7i3@7gf5#'\\?B\JLZ,R''[YC/c5Sk/opBB8dp2*DfEgV$jc&Ym9EM%(Y?hVCO\'lrW!/);pIesOIKJ!?dV(8%k-RY[#\q<H1=+,d(83]j_U2&VB"4'goW]?]V=0cbaDCs(K<#o:RUX0*E/NpA\%n`m1F1S%ismK>SP//Dr1/<SF-]M^B's`;%@=;n+6MH+m@:*L8>S18QI75P5'+4(IH!KP:->>8SpFP=SGE7'.4(*<;+#>'I'm95QZG2hdLUf5%<cmn2<W"0Ajra'f4oON8ihNC0Pk:Gp\rP[sDuT!JId_Wc]9f.r1]EPdo?Um^n*)e2'H`m<F%Z;R58P.6Spp9,)1Pb\U[R\:pFF#E%)ugE8X8LC)X7JbNBu7*b3q(?qX7!XcWfI*ClW8MbL&^7orp'"iE`ZOF2-!<\4[;#Sr+i>#]GW-2"U(JY*FFo?4/]9?R/[51G8GKs%?NN,/O1mDf`CEoEn.>qR9kAJ1o]<sh-.(h6?_3bA&6a)1JZF)^dG"`;#uXD7n/$,KJDZ6_6duAnAQmUY95nS^g[IYcNk^^G-u_I+%AYKT!$8`eu""rsE_]cM;Q>=q+S3p_MesoVr^dr1"IgNETroLlEP.4eo=%[Fg9Jo'<,)'r09tdpn]!VbGdi''nouoYq$98Tme=>F5%!`,Po?nK(<\?EF*_hbYY^>i,%"^F7_PAgs#1".M8(G)SXnHa)$J9'lnQ,U7+=]1F3P)>=oEMJ[t%)nIn<e1?N8\M$FS$J7\=1p17%5ZHGumKr@papFFG.!:I^f:\?uWc0@`9P%,U]i&1uP*G97P,P8`HG<RQ=.Z+Rk*=D]&/TW5-?IuADuMBN>l\q\O1(6tE);sBN6d2u%Xn"O,i$^PS@B[9'["!`Tj^tTnj9tr--'[^TB?k"E$hk36ZZ]aTi0GkG>Q`]YfZ'/qiW*k)*)P'5p5qr^^BkB_9O3cFl351T-2J)_%>eBR)p1;+`VK77YQVcO*Tt(Z-%V[W]K7V2hIQB..+e^GgkY6F>)*T^#L#d6I9]&nGb5.X)S*>Rr<-S$Wn'7onUE"%;8p(@m7nKjP%]9t_A0PY1;K)$FM`jBPskd@4CPi`aurf3-[4CA#Igs_A#/5aJKWHV0"EGis2e%a5)2^/^SeTni#@jj](QS_O#`/6ENl=KC-U.rh-%ZTb9$Y?KP<#qU:j/#B:qic[,e2?V-0e-5"Zo.@A\DFC\0=I.986Lte&eAdO7<^"?7.Q^MI<icn7eNc!6W?gSSjp%%hX;d+'(D.b]%aG&nZXd:KPH6D1kUS*XA[V$#H[:obDGuOWc1ruq^31O%dXIZJP&nRA&^VK":Sgg[LF<&IV1qb@PegLo*UQjkrc<Vn-erF.n$a0lF%g28?^J7OP^Y[T2XH<><FV>qMIRVXrUCN\E(e>)XlbtD7(4OH:"]s2.RXcY/)`lCuDFK3klJo>8]S41%Idhb\8jWg#qeIegl<N@R0%,q9#g"*>lk[8,kABZg^A'@eY!j*3jlV\I+=;kVa:<&Qb=1OAe1`?ome[iD;)[,3^R(%X/n,C_BnqZNT;VTQ#MDG'P+6DAhT$CjmH%Pl>"Oq@X@p7]FMV556^ap1QCd4P"'?[-([d3OKNB<!p45;pD@D[J"LdcTKWENMJ[m\lVmMHbsIc6iA/":`F[PYG?WOhEn<Q<PKgD%=N3jFQ>-^P7p71?cF/AiP7b6YZjuD0d+hMIfBq;KU_sfk0n!a]WiAar.".kucmiC\LFP1U?9AV#7lY->?M%9QN_%9`elN>klZ]@A%e5#-!W,/?"';tC;V$=iDFs*mPl6=s]64:4c'K1uc.m"Xpq+^SL@j;-B&R]LabD7fAZD71F5D^I#q3NPUhsqcZ[ENb8H]giNC[K`<%PM;sK<kC*2%nTd\@;?5j+%o#ZMHs<VA$&jUg+UnB4e"ko^X1bF>F8H$DC+K^TCcgf]-@KWAZUqJ7XbMf+aL[emKnl>jFucCU5Y*,%.;GM!mfDr?a1:4I.[mm#Dpsn>s-7mjM5Sj]RHUp0C@];+l;Nc:I@RDO)oI^3f#,_>Z0HsT1J,b"o[Nm8Zr3o`ATTJ7/;;N8b/sa3%(4tdY^F6MW4&Z@72J*uTqNP3l="HLLK-W/p22t_oj0ljsHsT4?&_eI4h,/JSS_>H@5d7:hA$S:"?*(V%]HsW#)\.s,>ie^N6.8>H%o[Uu?7$CfKI',@2[A8k#n*P@2H,]>M0&MZ4G4=j*ZAk_N(pQ2XEPL-iR2Vur<Odg+Al*+C15IQCA;ZT9dj@Z.^3&Q7;/)T2;Yu;f%AGUb@[m5:k4NJd\Xg+YI8\WrT;,qg7C[in&/R!LcHebh$^$8P2Oj2a``aG@[[\JtE`Q/]Rj"WUf1ijJZ[jWSC*"Z:(,[2P9ruer7%K"mL]b3[dAY=FMM9teM%<=2=b*a(M=.ZV>5G?>Tj5K)Tbkjo0"T6m+`PkjT>m?kP!Pda!I3Zi3a<eYfl[:GM.R=QLGP>5,m1UgH9%mn\CFZle@IOcn?a/,6W:^'TE,cWs1XX)k?T@=3/3HSmoerUbTDOgC8[4'H^o1'T,frb6NTK\X5W&uaDsO0W,l>QF3^9=8+u`e]X*%XH/m\B<pr&$STPLQdX3D`8^NYjpAcrBr4[=WmCME_&@ThH5=1Kc,HNU1r6u65!S@sB:AQld_W^E@Ai"mDOs;FPn0EKJA!?DU8&>!%"l<8tj&o_0bB3HK\Pi*ubaBuGr$<CaZ<7=V1npkPT1da9nN5n$djUK#kOk3!=.rZbc3glN,ql]Z*O4m0kGN;ZNMK.WX"J*]ojX]P%0dM*fT3hFI6*k/YA&QMn:N=*QnlkohGqE]Od<&'S2!1lQN?c]TBg(_b`>S/K3(UH8e=HJW9\J'URP_<`F3tBD<n?'j%IgV3(NK(c%JDjWNQ'3l&CL,X8`B(D5I%n;-bZu]09[BeY.^^":DCOnBL:P+rc6BO@b/(Q;\R<Nh.FW%]1MogFOr\VAG)PJ..q;0Xcuu&-\6!q+%,4W4(SPpMkk5U[SCo7n?U8K(2=F/`fO&",(dJ"/7QuGiB;bCiIf>K]gQ=F+_)3i<hgl?.l5"U!(;tGiA[G;TWX':uR"0WY85;Qe+%kI/mE2HJ$XLq_<joF#O1=nHUXHBkfr!XpO^Adr4r'pn>TV8VNGQ,,;76or:E"C>54h]Te<&h]reO<G]]n4%OZp1s3G7i-AN#cQdu%QJ5UH52L(Rh94XJB)@n/`P:Z\X3JQZG8rG1n)&N'%FE^NLu^)#UbD[*05o^&:VYY$hnT'dm`i38q!;bmH8BoYIe\)p\CoYCh>_(6%C&C$P*$P!op%KD#S$0$QrT7d=J(Po.oBknFfDiClHjH,d+oV*!rUn(jnUb(Q+ujR$>O:5(IlmPFG'anmb<JEP-(.X3s6HWD-"XU`%lAd=,?]tJKCHC35r9A#'d"cBB++MP30@r-Af5Gm!GMc_6:/s"<4k@R/Sl",*B"crpr:I#(:LM?fDdRF$Y4$9B2k#ttleTJOjiur<%O7s0SgW)rKhn7Y1D@P8Ip#>E:c->sQ5r,==n#g:&[be\Z<]%DPc1TmmO:[T<7)nW]4)@-K^%upNDF<VOI(LTD=!t6Bc2)=kRo+J_%''^k6DpW.-9&d3[B_+qpN)oWMp:!P6U8qma47iDp]Cj]s:q*'*;o&8#]2*&=p+=uujKGn1(,B22IkL_o#ho3.*0J5*Cc)>oW*?[1%B'!+eW`lr5H*Orj\2_6*?7[_S/r#;`U:Y(lRL=UB?W7j0U($)"`VK?*npGG+G!;Gj72QlqoB+i#fB:\pK@@KG=Iq14bJj$g3@t&=%[qqDUdP'ot[<0T"Hn6lckDSG2YrGqrMgj&*g-r@;MgA5PgnH@F<bE4]k@_uE`S&pI(uW`OZhCI\o4R`!Flpud=?'OokJM=B$tmI3%oKtRE6SnM2*id$c_&DMjqX]0h07o`LoR5,2IG6]on*@^Q>ou`OMRlr6MsdYc]"[LA[VIq]e\U`p>qi\?MtXeh[Ysj\*SS6pg9tj%%hpuYp]!a/Y<HHQX2p5g\S:s8CDn;f_R`8;$J8<$skq@F'!<'d,q8!<*caUXYhUfL4cBn4(^8TBDA\G%glCmX(\uXSsWI8((<UK(W%JlR/(/ZV<_<XkG*$_Cs/q5UTtb#P9B\I3WLQ>Y[,gu*M1\^iX`]@p91\[!VN8!]i%b!d0R<e`N!D&Em86eNd&3rc0-B-2Q.fEIj3%'Rs%**$-Q4MN>J+.?")?nQYo0hnuqBH":CG`G,$NI_4@kJhcAJOM,4k/-AfTo!CfZL<.:t[6,0e:7dW@5f+7uOe6]@QLZSa5hQ<<%pP^NE:G5L6:Ff3c&(d[C'g5<`ZD^DYTjLjM2uK2hZ_V4Wc^?lt4hWs7!u$!CT;LNp)/`Y)eS.![k[HY#5G>FZ\Y/+jSg?N-H-V;_%$"q0c"*"H.SNJJeNBBg,DOo9(+hf6ejU+,W,!NR\?K,THc[q`EGm8P?H9-=TH5_'VTj>^7eCJ>f`0AUEkug6-IengDZFkV28'c5J%/G>YkI<#ok:VZXGUSf+q,"P.eW$G<PCo+&`HcA:Dh1[B.,P#K>MpZT0HC!Th&4'%:g#s=ISpp<Rp*l_@gSYoPIe;-:O,AEeN:_YJ%#Q,6;_=:>:fOc0eo>1[f35k\9b50(#hL@TP>D3$Mi11SQBWIO*8fa`Hdo&c^`7Ic3mTORjC'SOp1HPl36mBdN%=+<OPs:OPgO_Cg%3F*q],st+V"\D-V7?7UM7]4n4Y+Y(P7u&uDkTi,ENe9GDl57VfVN.90Sh:Bh??NL&_3]o9aA=@!>at`^R'%[HNqcmG#(W-EC*'Ua%Y`OVlM0!slc60/4o!K+:.]@K)YilUe1M#4$4sNOqW8ei^kajhY62c$orT:&NcoWh%`^%IL'!X`37hkVa_6+oDJP]"6bDPL[;7k60%NZ*+2NBn4YKQ9Ku!j=5\rt*+V&]EWjLrHA">j*S>eH_LVKButUlR^-*1<@s6ZO6Wp6FYL=788lU0$)o]jDY^NU@U&cXTICkd%PS!%X-t_SF[[.[L+nE8_I/*ppJkU8(OEY&K3],p]rphA#^@+S_IXPr0D\[VFVf:q%\mSK7a3QESjO>`(L]-`&#8Ei#Vt<>F4=X.D8NN8%'tXL9JAQ8Q*ercV&.TMDV@MX/'?9DlN8Hu>`tr/H57cfN.L;"Agf0(!^'WhK<s/V5#_p,=(^0$<0Yi">$Z&iKK:rU+6[.Al/)i*^%'2.[33aW%NF+O;T?u\$>o&tZ/1'C6\&M0+:@%")'#Tu)_Qn3er/$)&I_3>7+#I=W>p&AR16EUc\*lp3haM%q/')<sBKopJBEfk8P%mNg@TUm!K&6"U^`&1@!BJt%[7&loXo.&4=pMGt?8Q:W>n'Vcr9&t#IJQTC9f(:GDZRS$^Q:JY4Y&8-X)_;.cDE:A,1E]ca'V@X!5%#F7#6?5qmOn:!n*%ga(D$6TS8KI'1lj8mSaUnSRHTH`X!fpsQgNpJ7_86?ue",RG>As#OiVs`3D!W6a67g#,T>S<J56BrYTm[g"F%T#2&FEM!X3T9"6CM[A!\b&Jbr.7Sc-Q2/[[?05_\1)kGJL`WnqQ^\:oq3\4!4G@8*.A'>EagmCLc2$.>Vk7F/Sklo;;pOo!f=2Z#%a]!(si"soXJ(FF_Tc-YHKS7<-Aoh?*dg7,!$GXHEAhZ#&;dW&j]RD<-nsQ[qG/t1=D#@\U](&iL?g5(aOpeWQ9R6J5At%p;P#(/?%PO-OhK@0tu1GUNtA7!'e3%#pqQl1.Io9``3Z8cU)3ad.gA:),gkg"ECj%uC"hN(@VOpmLp1.m.$JqpjffruY6V'[u%L.XhQ$I"cq%9U9(n'SP*Vfe*Z<?XU^?P8+bt(d,`QbhX#e1c<rDSqj8;e:W0::Ce\J5T>:*P00MImH=+H_!]$+4NqhEOUY9R*<]$6+`"%<]o'WQ%$<C"i"?RjgBL)jN;E%^q:r5T:_;\RZd8Z=gjE]qtit`'%Nf9oE7MVRZaE9dc"BlU@(@BCRiF2b@/JU%Ha>+l:Mah/2\2lCVK%X.C%8!<O6"="kE&6mO7+)@1C@BQK<)Wtk,?\kh\-Ft,[C8S&**`UER[%f*\YIA%#%FJ]&UHP(5C:L>/Y/^@5&Go`bGdZM\MH;lG/U=Y`%`PN5A-5naPc4ja:McCkdHF<+i[TDd$m<c81e]&CU5M>jIl)Uqif"Tl8C@S@L033S0qpk7U$8MP1r)X-]K&k?K+$dL>o`N\W:gZK$%J[uDJ5[=G6$H+MuXI^d]T5?6f30F`[o6Ah`^.pHV#t*siQ%PIp@;R[r.Dm&GVY/&)"uJL1l9KYD]T+Lk-0n;djao?>.=KUM1dmJo%*Cpe:U6J7/79,Q;`!X."DQelVnZW&4MNpit+!+^4CuDR[LY/1>*_7u\["XGlUq1*d@7-0t,.=RDHSaA2DXe6uAi/Go#T';:TFm7*%^6Tf]&_WW8EDgXM*^A=oj'dP=_ME9tMh6[k*no:Vkiq'rRP^h!ibYXdfZrV2O8*N'dT?W](F6u_,fr]Bjon?K)+jKdP22=DG9l-!%8U3[dmRc,JP5'p15!0"%T<(a*o=-TqU`lIoIZ+2BVaH%1[5o)!dD/1H<h7l",/c40i+X8O(3o,b%Laq]kRt6.cN,Vr8'Zt%dcce4%LG2%[*HcJZb<Q3W6,F*F4@)r1(Y"O2XWrN?.qH"8`/Lb@J744l1h\Gj<f;-),o0Zo7ZP2:<nUC;Z'EN`W?(,4G,Z5BCQKtl27bDN%U5>b9$F-tNfN?P8'%9ItWXCP[SBO3s+k=^d<%lhOU6*KqF#KK*A?'08.Tco$6f%?1B;ZWiTD@YHJ`A&JPFpjPZi5(SXN"&@TCgU(%^KH,-"XQl45-Ir`:KaY>nNUJCM!Z=K,]&n<%lnV3%IH9S4ifb]i!UHkH0UK(om!p)VnpG1n&<R_;io#o-!O>hg_#n!591[H*VkaJ%fa/*`I`f;KcPZ4`T$F\41]SK#Chp=>8-W;7Aeeh58a16q*R3+*jM/p@o!Bc?8Er5b:ZBcL"305M#)[I?/=&,#/83DgLC(o_F8>`$%/ic__b0m)gMn4Kk0V0QN\IH!bfhuF'<\.!($\eFN*Cc[Ek8u6mn?Ce4qQs%D$CPfmrTTA-`Eq!^UuuRl'`1JTZZsn3XI<V+I)9t(%pf!QHM^L]P56];J)':b]Soblm98Di!DU4M0$pagY5R16>a`fTu_il0R6Fj5+d#f\<p$F3bnB:.0mlm0<Ble@%rBYhg=`B*CPH?M9%lQ+Vgd]W@jL,HF*`aLmJ6?J5NC*?9hnOu)AZ:UWsFrdkIdF`PCX3:k%kA9T)p7=HtME$5rT6B[;p)_!Cd#:>sN:Elent?sr6eH$)%R#;]@($s;dis;jkEF:.XMu@n*A'[-#CuQlRL7(b#j5@8WVjN?647MSAW_J/L*>ao<KuNQ]+Ye79*$4cRVA]El6kdo4ko>o40Bq8T%c7A.LP0PGc,2.W`#;2eE2aj^-m6*,ZG/`U7R!.ZPFgKsg'PtaFn`IgjY1Qhi+8fA;ZSSl-3q:2>)m@oV@ZS/5Vd/%uFj(f0UFJ0m%`&h'#>Wm3%dFCl#IX3/t]"71K=]]f13UFk!:B?'hCDXb!O>ZKJ=lWQGh7E(+J[[8EFlLB"7kjX*k/^%o5*%$gcd]rJfk@*g'M"Bs%Ln'EN2"DC7daeu)KfDtD'o0UT"p_OK'Jr??d*dl.@73f*58s7E9=W;W['iu&_9iaRdIZC@XhkL0G*j6[PiJHXJ$9V?Y`P]_hTStp%q16RL6/r=geepU.$U2ZO/95qgH%TU*cdRaS021`eH';US>Uq>=Ee-H^hO85,hoILIHU9c!!U8rSa8Vta)0kUomqt%UbeDq=WBgdd%DB^s+GNJG'k5W529l']ua6+X1.hgZ6RKs.XEi;[5K>p"J+pL2Di'V:s+*<CSQ\kP^7REW5GR0:cTVjbF5I(E)SA#]cT6<96O=?1;%Ou53*T.!AA7;F(r1n$`I"GRamEFqNf1q[:cJh.7cZa`QR(30/C1iX<MH]d;@1^:je8<!$PAtEDfq4I611H0[A4U54!lgs7^E+o5:%&cN=J/rkeXLIcB(9S>VuJr=+_r#l\X*#%9AOl55d#bSIX@@2D6aiDW^:U'eRrJO6-fU%@e0!]-^;clVZOI1I<),!ekb>Mb:apQ[j%E#k@KbGO$O"*8?-9UqY3qmAY\F_$YM]FA>"(1r%;AniY>Ru8^@4M?^ikX%V`a7D%_1G\iK1(>L;]\^GIV`S:.`hi:SlqEqA.J=sa%d`R2"3pkpO^A'B;3XZTWPu]%$efZ:Jcb3lq2Ect\mCBtI;=9jELC?urMa#Aik51&15*>*oXDM[H:<+H$2DSV82NFuoqskGboBZ)B%h.nc%ork_oq:W"MT4_7I(m^\O`l;&tT0A1':EgT>I<dYN<lIjA*mI\an^EgpF2_,Vo]=JJFgUr.bG4ksY$uDrf9d4Hq>&^\'RmJ5%JCA-'-_Gdho-nG^#G*-o&c5M!^uiU-ZbXVR]cGHiTBG^DkM]koP5*YAq"Ph/o/GM*>ETS,%LIC2(=1\Y)OJI-EjM`^#CG^BQ-Q2u%Aqr^E/=Z(MW\\NjRr)ikq^1(mU=\P6PFu_I0-d9g.Q^MM-B$J7Yt$!6I>\'ul=%$0R4["%i5)8)Z^hZR@eM?bk3TG;+o-CSefjjG%Vr;dYj7'XYr^MHV:KM(KB]JIJYf]!'3i&osJju5#KW=B]l-n`PKmP^4SorqAAX-n/G\2Zb2iYl(Pg<k!o9bmc;t\?Ac`HV3c^)QA%E:RgJ4L;o2AaqmQ4BiTIXRL%/4:`gcQGkX14BiTI_o])t3-f+iB3'8c/=qW\B?T;&'qR"8kMbLTZ?Tu8^Rf$,kED[nns"E&2CHAQ%C@6jp)EN7]2!UmDM.P5i#aFmnL<@htX9SR(fgD]Q!qt/$65/:"G8UALD''cD*l<C^K-(T`hs;#`.1bH'!T"lkIlg*Ep'CUE1NZ.N%hsD)a4$rrRnGW^lq^HRZ8*E1*@0$6:n67ohd,hX%#jfZ1;LJD[m-eP6!d9Hc3q+<B;PeFY9"f[F[JB?0W7*f`B_>hD2qP$TI8[Bf%a*)Q!CA(/>HZ=F/f.l*aFu'*YH[G/*?b7uDDB$$RMW9HOJrK*hfPSfT41!c0S2N^gD:5_B\tEDEMm^5WdA!.[m*>%+lT=M?0B1[K%l$RT"9"I/94e7p7ceasijn!6Llt%_NZCJe[1pW$^CA[As`t+=N5"K6OB(?I(AtH,sBBpo`_M>_ti6Kok]hJB09Q]pcY!/Wl9lCiC%mQT"V8+sKRqRefH!2r7*5C!<0&Po$klMSQUIq[I"U,^3qLR@!R)pn$)@Y,3c=Ws@dV^KVE1,DeNbli?WS39D\OBIH_N*IrU's9N<%MB&1Md`M="?I&Ll14+$%&@j!V,$2t`]qq7QH_)6&2ossjXW5I+L[h6oj=]NKh*hq%P3_4kh/o)*9m4U"a+`=*Q4B.c8'6+fREbQ5%OSOqF\V"`B2m;mplq/dpXOV@!=t.oD(NPYl6EX,MAQkl]jJoRjY"(#(;D^OLDB\bHolBM(PFXVpjD)"/3D"7B;^'VXF.M)jk2f9(%2kE0p'-MT@n_1s5.R-RBn)JWt;g-:*rbeV]%X<:OasT!Y/OaO^48Ltel(83qkJ;)<nam;W]r8G!GJe]I6X6DLJ'0DrS_WJXb7-+P%!oR3iDN.l=")@K[0f;2g8=jr"WnqZspE](LNP:KIB_6iE2Em\B@'5i3Yk46lFOT$^S=E6-QkaZ+>eG;V7\Y#'S22PGl5@'WpoPTq%Ws@d1kW->AY*X3?L3P^a\tEpQ&+k;B:q'p&7(;M>2fja[ZZhYgj=tO@G)i%9?k./)_pfc8-@!D<A;)QK4FO3e^tE8;Oi;p9QODef%5o=a&-S?5uH9tc>[q,"#7>'rkZJqZkK9I)]pup7L\^pA*:&[K2FB3:kDra;*k<^dc=N!iCp8jcnFB7g`>\.m<[+tWOE^uEj@8*5s%Z/aoVJTPetih3]CSXu=rc^ct=lm]O1*8Rm=,H'cAEkSOqW&nkg/EG+/FKTNHfSZkcQ)e<=MZ\]0.i5nMnTreMdmjnOm\S[Kj*`X;%IRFpHM2BC!7G&K6kptC5/mp2ih8"3lqR*)bY8)h1?Se%P4mD7>@cHg`roB!h-E^W)ik9,Jle2SN\gAe5(\sV;:UkH4^kHPmG2q<J%P0j4s]9'Z'""lZ[qRK:LUB5q"USpB7q)JgFHL'2gs'u:F[ptu8E5r?;di&7FH%'otMn?,.Uq;1\n:Tp@k(;NOgj#AG9*\V>UXV^Q%e2/JE7p;eUK$B"cZF"$%e'bY?l/LWCFmt!iZlF9=1Mi'u2<oe5I!^"3?66X:G^8ADlQ]!5n;3P&9[(lfP,rKJl'V?L8<W,?QUhnc%(.iRXk+QQ9e!+-eO^t@+8]pkr/FFabrjOoHmg3Y)'d'O1&$-$O5EB\X=)Sj=QZcHl^-CNN'2SHTN.1f2aKNL4?c@dhIN8pr.R#ES%lYtc`nR7PeLBG;K%u^?H*;EN]=QJ)m^otTX!WH*>%f5u9%@8/9i31miH2L6h<MlI[0DFlr'?eauC$3/_e!HN22Y:G;,@:^?EP#DF%1*6:`marqegj!OgaZBCrfHb`5pu]ceh94XIh8ApAgY`"]bamK!`L$&_V<0Eaf+/C]h;)_MO3`!]m14)@c+!-`5/"]-9sL$OE?4^+%%oP=LmssbOF*LhJqtD2soj>S.rtuH!R/,DOZTnI[3P2$XJ,`\!s)7/2QM)N8NCqLE*5+B.I7H_S9n_dM\bBW@e*SNt-b+XlhKh@^%hBm>4kk&(.YO^MN.d)A2@MRq!HJXEc'er\78sK%,6*"FMTI;LE1dUkLdLD@3`YlP'Tpk5XCZiC3Rb@E>`mo.nRm+Yfo-REsqb_,+%@r]>U'm`rml?MLJ?XIYdf?ns13<.Uq2a<T"+h]4U1aJC(%#&&&n+qmdmIr]Ohs9'8YA[45oO<#mq;$HAZ2?=to9TAu[J]c-Um4hq%j_lUX\A_q+S!+Y$rat/=7Dso2kSs>9p>+%kqO?,[DY?/kis./oFPCX`N*`oY!74d<?tgtoH%06fRa?s.7,BMOmfOBu#t3W+OML?'%#esT*g<[sJ9-EeC6)l')(.@"2L`6DAD$#jo%&=6o=V-&.)BH%<&H&O.9L_BRq?s+"Oplk7(5UiO84s"!/.fRWJC$gp`:"on[(uh6%qZr!B#>CSh173jbWWP?FQl@GK&?$Rk"2tQk.)se&EP`!=OYot*0S0pJh:rI1_&dFP7`ZMk:10_7G6>bi3KRX;J2e\W&k!BE-fdOO%-aHg>m,6*69QgNW#m-BeDP/st"N@;X-r(UF0s1_<'1PfMCdic7Y]$J^3V!AFR#$95g^TA7:^/24-6Q`j$qLq(5f,f):gj:\?qK?p%8l3Ju-j:C0?mNS*?o6&7,f.>#RPbtA,Zko_QpCF"5htE;9*\R`6h>[a`nJ4B8e.bT-9+`Ai=srJV^XWr@%>"XJY>Q8?l:YX&4RTr%,(W>&#YZpD@$32F@n[LL^C/Bo1XR]W2%eaYC'IF3E]BbiJ^]i':/EifRZbQCdKWAX>UF6<ZflS]$HS`;'o]JM;f9q?"D7h7*1t+T%c3@%S5)3XD%@AhuPGpX[3=N)cdgrl)cnF2rT3+?QaoMZ]$`HWWTV--&2(8c@`%@LT0\B*+EFM+'(pW;(<p]D3%9p+.#C?_/1c`(8%o"4[R/qT<W2KrJJQ8[hMO<"_dQc$b_KU),5/Ks3GF#NZj/eD%>?^Q'$D66D$9VlI;2[1KYj7WK8qL'hfJ%q@!:[?E>D*8J$q44p)%,0cE6/h^Ao9JU=jrk<f6,dt:OG:LkuI:IT%g8?-nCpCnTWRZr37<qU+n?0I'l/QuGWm-#cO4[diHrFaWoSCKTf&E$?^a+\qg\,5I%8!^`FJk+QYmXmG3*+pSAk)HZ.Q1bIg/)CWJY:\NNYDh?jFG=udZS'.2X<I9oL10/q5E\XGMLWSdangT9q;?BsU9PF)2Ci1bjeGSY%`D848hPG*Fh_>=r%Ehj*-c)08;lXk9Vi6=JbeR.<kC>1i37ok6ZDJIXMG_E2a`'144r/l-%B&]c;HhdeR3KaQ_gXbDpHuiPV=h+%%Ah%1\Vbcs&RgE3?-WphS'],&UT;_XKP*o2h;o@eJn97FF9FXBg$@JpO`dMf>+<'9Lq^#0R;Zk,E?)QD2H;:p5[WcXJ%hI9rlL[k+%I],:%aha]fnTP59\LTk^[PMLNl73Z@\D$LJ664s3rgHMD2gbGn(SBh@bC%U@`#N:fDInP-g#,H/ao*+>DUq<OW1GmLkkY;,-BO6;%Dn@!F1,a!Lb0P]a&tB[!%+KgL5F77Be%7%XAFuHKVYSJKN)Mg=RoEV8':a3*;G]l+JuMUdE$@&rco>*0T[40MB./JRLRcX;.^^^l%W@ji?VRG%>4Vh!/Q29.A(2I6MMo%->-J`D@)e)r-4B@nFG'sG`TaQJ(&GikP`T83(SbKI@?K[M:eV3"QT*9/;NUtF_e^'\0<t,JF%DE`/ZJ84D=EU0P.k<is6*&%auX-a&9d=BS=D]6t*(U*I=LU,mU)CI,GjCj'A208Al'6c-<)K>0h+jK#"Y-/((7b(7;g!-SEb(/qg%SAm0XTaEQ+72DU8r8Sr2o<k,iF);"KkpmfkS"P::c[5R'r`'guB*_W$A\Kfo^7r08<*8(6'!hmqehTaLII2FoVP.jcG]bkZ(C%mm%&"[YZnl/Tj$,,(l".P=-(&B#m/+b"$/2%,?i$m8pXK@1Yk-Bpe9Cbj;en5E[Lpp3WQ:$7-NM+Ej=Wg><X<O?[),MGc^rSrVY,RK:%]T6ik*<YCDj)%4"rF01Rb1$o(FUdkNgE`_P&mRnXQC8I45Z)HV-mPfSB/H<5ar=I),*)fQqag6WUgfN7Ef-]1?c=MD7AMD"IFL+t%Z#=G]eKA_6W&mhh8a=^&jrO+M1fi&3+ee!$`%L5O0KP7STup5fWZ,sk"SHFo!ZqQ5m1LM6>b=rfXa#t#b6`J>@-pGf3S*JQF@G4i%h<$u);<,,j4VE.fG-&`tAPS"ll)^g9CKh6#FF--1_@mHqZAAlb7=bM7S&Y&Wq^@)*FddQjH]qi0EZg9@kG^M7GFYRn/2YbNqY%oI%:DBadOT>egbntHi8RjJF6>cgSjf<\s,eR\+Msld(5g.OGZ0qldWR(INO#DQ2?,("t?p8u#NRWNHFfl+>kma]'_'BlNFK4#i,`lQX%OD9SU'B5_?I.,/Wl$<a!lOHFg38Z2j0+2kkQNt7EU)W/lL='UpDU*?,-jTYV2d3)U_dHF?^l92!,?W%;GNbZJBGCr.!lghWe-[HN%P3"mYl90?%A]DKR4"4pkOuoYgl-W"@&u20)hdhHMp#M2AJedP@hI`$VB3%qmQKGVc,;$bt#-06*MkNW`"DoDb?oI;F-DOVlE$)V]%/LV13Lm8jc=;N93"_E[bC]eAjbD(FTeRRMa(6+9lfH<eDNAZ&_jk?Ys=F_[ICs@qDb0X.a3c=baKWMWj>0KX),q/tqc3WmO$uU'@%J<:4'bY3^+/WN:YKHRarBk0$>\cX9e>cVC%$+s$i-f]"[4=9m;Z-IlE0QD\D2e&eA&K"!-B,f#*Tu@*&&<4A,RlhT<;(Y3S3@-c]%<^q7A\3tKYW9RXH[^gHX:&$VqjP!R3SkVs1^[Kd]\]<_(*L8U-7GNPDic?3ZmAkXip4N6"ZM(nJb1mMH\\0*#XMHP:H7396UBc"`%)X1^[#FBRDIu!TR!A9+L!6Zt[!+el?2O]3,[@0IJencZPeZ'*6"#:rPYZLT>=L[R!jZA9$Q&T&nC4h0KKb:$cp,C".5*:Hh@%CE=%UX/6Y@tW^\Tlfl(DHYN:HY\>&@9a<%%E,6P+QoqH?<lB)&GpX!GIPDrTmK?L%p*nI7K!#bUUFu(*(o1HX1[LEmEfSa,"2Tl#,OH'%oJ,O-8F\5-8.l5Z6oG4DYAL18K"G"5>[(U$U$;<7&/WB@>H!0GQ"`d#_;<,kT#SjF)Uo^A+<d3I_PC=>4Q830rM0cFCuF*g<8:9I%R2VYPAS*o3qu1$J/=ZiT@Ec)Cl*pOdL>fEHf/V6DFt1TH`kEGQ*hD\U'EV3(5UA.CF#!'98Yb9V5*C4o=Z*pE-eaOU'1oWGb9#13%Z>rTd(6`(W,^s6A.=WM\kk");dScb\a:AnS4&.N1U]%6mNcm2FFOcLt^7VAEhjQCo:c$28$p*3=-#(X@';af=lXq]f[MBYQ2Ciel%8TMP4..,,^GeLiIhH_;5+o]TS(.P.7V$WX-]+5ZakqjiC;9hh[dLJ`*+=aLPd1%Ot2@uZn.J.)p:s-oQER#AIALSWmRVR+P>E#O0%LUuU<b.']=6DJ;LM[3BW>%Q.9$kCejdg+I(/J:VU&IV0%I9,8S@q;lQRl!j",Gk3"K4VPB.rq.=Os695EphdTDIVebg,B7TFNCJM%lKgHa<%]=4Tjam$4tA7:>P^XHV9XmhK;sZ/C%FjY=MNq@5.J7#"&9;=LA62#fko<cd%4XgjHKqiU[Nl^`l3q:U9M,Ue<h^`^hh9U%dRL%=Pt[9U.^sr]8k+L\qC9kZ*apG%\?&@sEEc++hJQ]M1DXmNBDYO@>4m]9[th7b8Cs*5:MGN>hKlM(hqJ7DVf^7<>*r,-'-.oM%_WUbIDo5PHO1!D,G<KM6qWH+1eo/%M;l+ttd7#rh\6r:P_<gIu)NoJiR_0?P#hsrJMFJ!NWN@DD)'1$'_n:r_@q@c#[onX.!gOi+%p3WQUK,<;G,;+6/Qi]Qb1=KRXb]55?='/7u@LC6fI]9A*hhqUM$jl:7H4`e)$)+htf%Wl$77apiS3!,<pAG8p\=Ei3,shU$8oqX9%hbD4><=q-sc'55)<#XEPIS:eV0ikEQO726AVHbT6GjL5;2/O'F6OtWdUpQ_*.SR"XXq=tb&d`C89Wg')$S^j_HhXf%YDk6YEg^+:%*pYP+jm+hn0o)U%^@*Wm8P3G:a_9=_\Cg;,ZRNa]-<FO(#VAa/q(Yo:FG#kC#0)Pl]pQa-=iDWl:+8tFc`#knPTl96Q;Z3iQ*!:g%au!;5NsO41Y3Bb[0U0\Ef/:Dq-^B3#;XO([TU"4_+K#)8)?hY6j=JN2>2IC=c0`o3T+OR/r3712@ne8\5t6&J`$FQJ@FpJ(b@Ti0%Lt:3[/6;BR.>+nBa9:m:d:t7G]G_GH@^X7)'DuRtk7C#J1L2L)4q0=n;K^XX3I%CdD<b_#C$FcbI`Y-U"du/f>&-!m"QK*&-o$k$%o%%gS1G.3f9G5`u>TL/2OkrJ%CJVnqI(5.-rfh-J([Lh-btX^;c!JNJY54g^Yksi<(I-1#f$]ALnrg>dA"*dnL<Q,0JsjZ=q1b2I%N9WmAKD"iPGotLAfJF[$rAmF<ESdZOPP7e36-U>e&1#`Q'[+j(a\SmfE4BfBqjpbS?$/"Sn5p'Sml27/(qQ'T,AGE8D*2[")Gkne%d3-pMrIgHed.!m_lYB3=S6NKQ?-EtXYO.'HU:b*'C)RXN@A/@c,.t1&12bjPGac;sm%e^.fdk=fesM?U:9S<c2'6Eoa20$mTd[fW%ojjM%H=9H+RH)(7""eW(\hFiI<-7HWn%B&*Mhs2!F'3b.U6fANm$8Nd*AF,<"t$C-;k4l+gD_6i0'lLdlhHA*7`8^'I8$]QH/3\9%MAS<Nb4ASM0Z]X+Cm+Qn0ioq-[9>&-0<G.D`U\>sD%C:j#peHcd;ham]UFg`pOR--;n_l6I6)Hbl`oC<qOaY*['8<W1=BL;N\!nL%5YF)%af7&G:f'Q4,:hbk#'glr76$(V%LPFcAo^U$=Z%j<nFR9Cd.OsW)i!YZM`%(oFl'a!AorW26^6\_P;!&"FZp5<QS^[eY,&:^%(8DRQZPq9#[4c7N^En?L\oWr:;.LiPQaBM!,qqY9X5GiPV%5Q5q&0M@#n.J^Cr(E,k#G6!(M]sqaeHhO75.jVo8,`\)R5o;gQmQu%@H7p;-/'m5]IX;#WIR]iE+YIC*W29JdNB5)<jjgj8Cq\lC!_sl@Rq&0Cc*O?e8@a,$Bih*$M4T`:BWogX)hG@kC)%%jp0*BI@E00%H&)J4N)R9gjTn\b)JqN(L]fRXD%Dfd_1o7TYD>;)[Qa>=Dq[sU%t3FLcXWEiC#1`i@RDB91`p/:%E4<)o5S#.;q8>PR&=^"amBU+%=>rJQ0`gj2*UA--ZpGm':ao3jW#.oX(cdC_&4)+_&4nQtLlu00&1&J466ni'Tou(5Y`]Ph+ekX::g"Vmn]C'>Zi5Dps4]Ku)dH-J%hoK7p=@MGmIL$5Ze29*9KWT,rXA(^f1aCbbFE&W\iV$(SO4;>$`og;eTRU/B_:#35nQ!^_>=_#h:c5G&lMmm)$c9UV[G\PtLDY,r%MI:;0m;/H#[RL7&$__UW!(?:/'QhhY+$@)b6XZRI%Z^n_$f1r=O:\([5?eJoYNn2<ER`IdNama(2dt>daRG3<<Jhqc4A/KR>o4r8%7'V"W+qhmLB$9ZYO\OXO'>+Td*!k#VJp`BpEC>df=P&YN>N1m+2D?NC7Yg2j?kXcfDNJ=9KHNa,(hh',E!/2.1hGu61+3\@#@NU>%.7bDhNi!2QJHC]539urEjtWa6[-4fhpkleMa<V6SC8e7W9r>th,L/FUMO+%]Mr5;#:17n5\KHlh1CKs2#CQ8.r&'kD%_i3O05uoX%YRMj&/_S#dKbe*D/BE8'S??HsXH+A'I3kH"dDP$ne;3]7a@Hge+BTUl_1O:6Ck>]'flj8)aI5hHb]!sa%(s716Zil)UJbp8a5L'I%YR/6tmSjK9"jeh1T,j@;Zqa8Pc$c5s6B1kKTcIVuTO\rT4I&?R6M1UWe$-5$39"WdC`4e57Y`9^,:Km1<=%D=:eB<[J/E1MVPE?-%W'5`@HUe6nkSrM%lA\VhYWG4AKldTt.qup'1SCu^YDpAaj3oLIX^fofft5%'TI`O5<4!+PQS]I'Biba97uM?DqHAl#S5KMfltF\C%%8@+HV'@8d1TdR/%QDaIKM>:%"NcaL*;*<P'c:OkdKH9:ciuAQ2@DV_qI3j.6DmI<&J[bRT@?/2dU'F);jtWUkdR#&`uu5WC[#9P%\?5o<%a-+`TN[6R,2e9S2.eoujpj[l@>G4f;cA3DlP[(!=!aukoe]?@6&m9s"8uC2am\Eog7UgNB`kIW3f<^BDO^\fNctS8Hg1ut%C_^enWG#7sZ+UJ/P2nAHSBu"@10=cRoZYS=7GNinFq]R=#-qt`4!?R?Y%;AX6U!fEZkirELagbta3e&kBdkk&^jpl&lkjC>?=M_i%<mnf(r?<]m?.r6<D1f9^KEq3RnB>1ooI>\jjtA)=WCS/%39p[7aQOt.Ve0=1*2-opO`DSXgeu0RZ5(J):t@sp@aDm\,js%-+>oUE%I7.Uc35m*JB1j[Ml!Ru/81He1O6/TXVcU.Y6e.KeJlVu-QD01.8!qX@HXXSN/&_YHO70465,;"G:T)=]oL>d_AQ$ui9(?`\<'<[>%_'4Js@M,Q]+eanA*Ri3`A3[V^B[(.cNheqOY#S6X%DusK#/(Ui'n-ECB)R?VX])/(;l=0[RG)uDT\?^Q!/9kjAD`/n#\-Rrg)CWM%R'u]FJiArK5BIR"\/5e(,n<:770<p^<"4u:E<l%-(q2Yh4+U*SMiQF,X-tMuIN?C:qh@UT7qXdSNY4'7,IG"<K6GjE#[Pp,m/#XS%S?,@EH`!el5c5Nf/09fbNJt)ZYjWb!_XOVol(#S`j5jKB=`hqnMpPF:G!r85]>`AYe:fi[5&<^Q"<*a:C>*857)jS2DSTS6T(\C*%]^RH&NX(2U6P+naF;E8sY,Hr'W8h*"U.52:Ogmmq3?jKGcdCKD;`i`sPleBC##7G,,da&ql%1BuYfKKp$;LZ',tpQ;\N60emQh&q%)Y9+)oos,/baa:r\8/>eTVq7,k^:^'n[S/oj,VG2l`dhSd@Nr%1sHAo*PZimS"p0ZQ%Up4:@N#FGn%+m0A_R="*@10%64Lk>%60f%Veo8O,f@?ZXs0pR"1^N'(GJB"8&Nqhaol'#p)oZ7*,//i[$W4PUNpSIUfV7#UI)-r4&g<t+.PW5]u!n#:a!,aP%,G`g5)D4kQ/nn%&YIOfYL[Qhd*pY96QmM+I1f;H\ePm5Lp@gq,L@G0,LF;"2"UdO/!R\X8EF3$Jli>1DLQQU.I]H%M-&VL$I?9eka.sG`@o"RLsTmV%$lYX9g02OinMEdoB7N]#Xr#ugJY-%Ik5ZH2asME>"*XgW#M@s2-Z]ubeDkdJFV#Imq6]E1&;*Id)D4?TdJB@-#f,/><B1MiVqO0<%%IIL;*s%?&;mVg@eO(4B6jI/d&t_o+569L`]2&<X#%LtNrIbCP>mBs8Ye.2]l6eDO#%lmBKS7K*l6_0CicoV[BX_TlRWgAO;2C^g%Q7Rp[.+!_-jP7QA_WHtU*JG8MqW]H8%5$i_5G;Z#:Ab4pf1u8I]_.\fd%W0SFVI0m?0fF+BYZL=ob;p(7P+6IJ/'%:p(X`Ta*#s3%BOOM4l7'(so;%rZ2DLK!ob:S36!c^.:`>]p4G=Pt+sOC(9IQouPm3Q&b#Woo,(9)Mi%%XU%-fB#=GEd)=YS>@B*%BP#B:OuQplY=%$hW"PGG0T(ldT4UG4)Y9GG4QF.E5^#/-`6gIf\_rp$+0fPP>.;/i4CT>4i\FN:=/Y'oY6ZCt7.V$hbFK%TS>&J;kmAU5d3Do+O`o%*^^lm?i4J*qggI3(ln]eJ=8qi#4)s7%mIN$U%8LHL#Fb>"Gb&+EZ)_%-N2V/#VS59`@aN5Br53AL6bo[fjuiSYfhQM^dIHDZu?d1%E>dJjA2(P&D+dn4]+!?X*+XV*"9Zd7JHQf6aCf1%3b<hi"rn-)%)uok(2'6?S&]8e)6bLB3"4G%#6L%.&5'k`a4<C[A?q@]L6d#r%Zc<W%\cN2ZA&.M>d4aiA#Zn=T&@em>=^72+<$M2J%7:!tFW-^?*-uTCBTJXl:'46l@*\pM6YHiq9q2D"9&haY-p0'hVZHRFJ(SI#%",>ZW%3_G0]m:-4F-V%\FEU$Ye_rBmN`\fa"q\E<l8>pcXM"3E>&8KVl8;u64IAXu2;mt\]!YiHm<5\`CC"i8C!'aLhuGuDVZEF%%8t?0&FmFAH)VUd+Y8XSF#7Rj:"Krt&0_DJl%39A+93t!+-VoZPJAUSP]ETq<X7O2WJr#;u_+sR->gu8M6g%&4)S[HVJd)q(TjpI:%p^M>68$.4B2OUsJr<C4+kWBsa%@t^?Z/:)<8qpZS9,opc_ZbAs*E6gPSjSPP*dSjIqe@`%>s*l`g\TE>kWN.#4D9MZToHrL*/D6T%F'foB*l_TgN^JlH6"_3n*jbm+3Y&j$=<;H%HDh$d*J_?T*A<F?O8Z>C3Y$QTqfOBN%FH3ufrO-EhTDN-`rSWPjG5c*BS[>:!D(,Y%+MT)Xgl'3$IREmhe#LB.5fTg(cQO!-]%20;4YdK33<X$J"QDFlQ;)!TLHn#S%I-"H]RuYXLX9O:dot@sB<,!:#J=Ir@b3pBhtR[%%p,`fM3tSk0l9+"L\-!ak>?MI$4ETM6:7VXV\s,Apk5d#;UWu6i8]Q\ZJBaDe'<k5%MpLYg?n5hhX7H<DYA3Ac@,GL!WUnJFRAu9m%lf:gGo?^LEeW[ZO$t"BQ1q\SZ;hU:(i&u1B)bJmRa%hS<&"OSGfR89,Z6KYL!>ML;ocH4S`,R7IrW=iq[JCE,O)qX4'<$@>F]%;_%p?'![ltZEJ*Aci3K6W,2R4E]Zb;$AQnY&62_`TP&pS548M_Vr6gnXB_`I]`BMqUIDV*]+>@V%n8VN\k>>H(%k@YV6/*;r)pTD>Z`%)QRjU4hkLQ]YN!gJ@oDsVLiC?Adf\EdN=f4N-CH/,nY*rmS^/N9#2LG5nGhLMBQ"=3=GkP0][GX68J&f-nF;5kqkgA_]NC1Iml3i%<U-Fi#-E\qa@O]#?MDQC1eTe:Ndo:^"TNbhiumaoODePaXC<N*!Vdr[-aHS/Ast/7n=Kj(Fn$h3Q1Lg*($.iqg\AdZ8HcB%9\j'\%Y]BkEL@Z\]&K::2]dc#Tock,h2>i#?BD@9`NbIJTH0%f_1(6S1"0%Y$(a7!H0A:pH8mSLb9+Zq!KIm%XCZIUWG")4VrNW"lcp=F7%N-*L?#R/Y!CKS:Bc5A,&`AM^YJC&EAFdr/\hRTsC?0Q,]QZP6'"Su>1Lda:=/2Zq&WC(lV&S1`:n=)@?#lfd<Z5OGT<?U@fQaF9E%K(gtN-7gC4#[9Y:6(c>.q(Un\m](f$L`'+hbsgtu'jt^@qW'QK8S^V/m83eqj=VW5Lf=LDYFLf<8k"c=`.J:,1%Jrq9:-;]Y<?0T%^cc-Lps4mp;n:\&kq)6k.RsD,rahmRXAE4@P.SU'2uflE@@eIu$+?fE!K=tU=,*WI;q;QPVBPF%D`QmL1]W_/9M5-S(Jr7%NYQJc%Opmp1q)9:^:U:l^8J@u9eDP?3i:[kKpZqM.eb400H+gi&ftcqp-"&J8;ml3<;gOI9IBWo^I+Y-lWN=kL:??Jg:b(A81]3/.rr(bN%#Kr`VjNK[a\SJSlpq3B;2^]R>i/hA%Z)*;P>>FF.Jf^p1Y44cT8]!Us/lplUjBO'S*6o76Bf`!+q@&BJU02M1Fp<GskCl4G;A(f^%94KbM_lIr4<TLC3+ui(T2c2G9FNLj(25*n<A3K=Nc&`/!^#7=9F>J;_C.`G$H28:R#JeBDZKur/#'jLrG>]N[;(8?;\I"$+k)N\,%R[5-#m&LCc1!fr,O9H4fZkVWT.rFMSOdOR[g=+,@%<Nps1WTW?5Kf2?VUWjq[a:<Qp5PA"g.C)i;@@f)<`*QcTViU-4eN(NUXp.4%'N>5%BE>R4['EN[*(s:WL$lJ&H4K@X\ORTrTrP*,#9ctf3HY\Tj5]2V:TJ+c#@&.B[4,3uUKJi^F<oTsADMS$*(\>Te_'5I@$TI!%N^XI<=taaGUneR2((l`urP#R"6SUF91Un6[:3`P&Gf6_0@AT6t8F-_dLf%:8d.5mPa(Zm%A$7l[X$62KW=4MfW<QofoEsT]M4M"T%^h]Hl?E&840_>^fR)?:4:^V8GcV#S$@=0m`1K`uYV[Q&.ifq9X=#-R];d,VhX"[U1."fns$`D?$1McrlO)L%8asBDJ$3g?!hNIJ&%g&+=dh7S^R#R`=hqn8a$XD6$aB-l07A@)Lp3'C&:l@'/ca*:pPjIg5HP+DkW*2lrJZ"#LahU%CTXbO)[`7P\Rde!:*6>;m[-MaD]%R;,o5TrD1T9<:]'>7otY_D-NTmi99AH[*I!8WIn/MPG\E=i$Cq!mFH81E@A2`*j['_@+mQ*3A<+40LrJ*M;bYYYT3LD^BFaprR5C%0^XarY.j&&,n>j4Bbs\#o!2BXi\i)(aTmi'F1h-?;>D*XYph72-a]me@p19'[82.0H4k$SOUTW422?l6V$Bm,ct[BA$l"d(7?0Vc%dQslgBql:_]-@P!0qSmp.jk*&9?6&^OBN3jZ6bbJMPcSm19@5\X(Xc#k\*iA@6q^R`g;`aX_@qV+`Ud0hrr_+988]7n@Rh)nR1'?%?Gst+m!k9qA5*rbEOfX]XlT,_>d*8Go=0h2eh1)?Sn?J6=rG1jgE:+4mqIq(X5JPL3c)9cQEm=(.&7>MQ^DB_#\B8k=9'Y<Ru&Fs%3qAdV[VA<4oJKYlqgkk5fG:1+5u55]JoB2gnofb'lieq6',k>Z:m_BY?qimrPC;>PZikO$72^l]KR$r<EB;k^nTtsa&Mj*bV9O8F%LPE[08Lm/<4+pS366@V_nWKsA4i^r.fEG:gf^d-<2.Lsm=Uh=P7H@4G.ATB^P!-?iOPcd=PSEP(c0JA8;qX@6>V'R-cWujEgFKkY%WogB8/(on^0%&,qL"kOMp3G7d:7+=!XZ98B2Spr!U_A)[O>WA)8PcKc6V7TWK?;\`4Sb"+$V"Ns=SS?&.m&FYl<lW6W$A;BWE<Ej%3OIAq);0gI86d)00GN&4;\6fJef;<dbaT5<;]:q5;UuBW0[m>^81f]aD);E#78dH?94b#cP-8\t]QI7u5569XN_`2iC;!P20<Ak'%\W@%drO*DG78YfTSL>W?MV%p!lcERW#R3[>;,=KW'>,7VjUhHHaJ,+*)B=IS2P*qZBn&'q.()VY@'l[/$<in7+qG/#G,,ltcGh!k%q*Ik;F:#C!LR"j-9t[@!FXkGZO>$dRRgr5UN?DsAA83R5$&@L:T%X2icI9et<acRBhNZM"Ph].&7`2qGC_&Q?3JdsDH!qR26&lD.%7o=Yp_:^4cE,fPq-h_H&b<ZTp<=>XSX6s`.8I#lgVFia\:U8GKC6Luc_Ah1(*I3(@<GQ"8VIiK4,p<8Jfoi4,^eN6nl"WGS-\?:\%(lQ;i%+a"6C(kC!Wq*9t(.B`5AM(uN3EXjai)d%d(@3O>Q*hUd5`rH..>B(ERC+"R:r6D?Wli/`(.oX<Z5*W6HY"d]Ebr][ELD9C%a5a[u[c]^dq0MM$mNVpK+W_Z)Vg[VWKJ-Ct(jPO=/2SrsP0JlW>rlt/5jP)5E;[8A]bQ+&N?%ODOBf\!:Qg_QENGc&IZTRdUc''C%[1Ped?M3J59TGiV3!$,9ZUa3>`KrXXbIaOU^EoB4;p1`ANFG^ldo/9ja4b.+7qL8[6I$pV(d'D<bTa'+dIBRDpeVmtQ\<d[DlOL/%Kh!f@b9NLBSH_87Z#8Ur1<WniQ!J!E94!sMSI^,[kAK5V4OFS2XdXlgE]m4(+e4r%ami9/'A0Q]dF8(3Lc"i&FR258j9-[NV2Eh0%h2TpI.n<gsBlmdEO99$8Cr;t0Sn%TlN"@t"fHj@Wa(UQp]#p.qJA8$WEF_qs'fUh>X>r&j;2'--S)P8*KW=Nj"di<ZM"ud5fN#/5%Ud>W'THI]Y9$+g:5Y[s:.tlo*d0q?\B:u-;!$5eU>gL1il.@L,G59VJ`Xn2@,L=RoRP/@NRLc=!1u]0ME6@et,#^Yl^1qnrgJCpu%niop$3-(c+=")E9a8P^B/5^qI3QFm@\mL-ZMJCY/7?eq?-VL`-.(Q740nZg#0;2O5-;H=(DST+k].s\iIN"egBM!rJ1s+,8e5*uG%$k6#2Gj\A!!^Te=nlJI_5F<<=aV`%I%gMW+AjA&VV4BBge.9gQEVR$+Qj_lsKQP_V'i!-X4$C6LU1laI&jD].*[kWTpkoke)u48W%C`6cdJbK7kU;=XjU/0!5d_m@J*UKB+'Ks;d4msahAnAmI!-=8TW7b#,HeoFU`l@S6fW*h.EaT7m68_UY8*r,"E,-"*,!W$Z7%l.@%.=*t>*OVXY,Dp+:SN9rihi%#ZOe/$#,k/lrkJd6o&-hB8gC:"B$!OY3'P#T0D6C?%4-B0$Gke#Bk[Y%$[s7mDeCHmZ/m8Xs?EU\D%-mYqVG[?ZCQD7SaUU=W%6aRWQKVZ"rP`=6<UFEa)4:0%?[Z6oaQKFq_H#.>fX`j'W27bLT]%?P2-I9I&BIu69IKR!W*7AqNKRZFd%WRI@^'@,&XG/\N@%D/DOe#96J<15f(?F+l8KLa;8h3,ZYPAiJ.iN-1j)g420[&MT`9Q%k=C)60)2n-(t=*1i8bqkj:Loaa\CHapR%Umc\k%+?U44Ib<Z:'VRFT&8da*83k/6:>aoq@E-,EY+"(^.'c2C%uW:*U#o]L9E>:\Z/Mp<E>mUlV3dqDF?KKQMsp>IVaJ#P<h]E%MP+__>>V$&MRILs#0.N'3'Qe;9Ffdk2^dK4_,n&jIA:T#3.m8<GpB8t(o$,#<Qug`qX]`9Q;#<4QA]J0<H5A`f]fK[5_7c/EdDbQ%>f4&%:cfWQee>G)U+/a(,N]h3%qJj'[cK2=<iP,4D&tQql&M<tY2b(oN'N$&[J]e`TObI9R8pTD9)kr'7b_;HA@9jtRUpLm%9o3Z%r2k).HMpt#D"XaNg/c;J";QQ%AFr/?)fj(QcpdT`kiA;<["QTk!`.WpSXX=?CkS/Gb/@E7)Tn[uP=Jrd4F-&"1fKsfX"AhI?#=rl%:[H6mZm6q%48k_/H%'<lT<j=Y5`D,D"(k]MA^"\!o?pf@&SD]r+Q6qZFh(^A#9?>:*O_YrH$iK$>nY)WkBpb/F/d8)^moZA#ATa3%*g^'b3[LE)V<4q2-\Fk;8PND>nQ(b[`-])k:N7[@g^'p2J^MM;7V!PM&#'&Y#i!ueRT)0IHS$I@+Z.C\%>$ku.M0q'3U;`p[MKeR%JK<HAHW5'i\tbu/C.<>R#`5"&2]@S5^juYiDpZk2C4irgWRe:u)R_=L_pa#@r*Ju34jnIBZK4f,/IG>gAP3lM;E`F)$uK$CS#U.$%<D,ooHDpY:(7D7uJWdumhF;4M[mlD@X\-)ge*.]jQW+$12ncd*m;+4(PqLFkQ=:R0%$,rt7WgIPMo'f,keIp&F9<4os6+^b^%8V5%UopHZ6^hkbR26:*4`-N)39mI\BS0QT(2?IqCtCLk)`"^B1uf*Fa]%+a=/@niQnU\k4@$5FWWuQsNjL[14R_ggCK.MEK95+&]WL4b%/2`u,Juo%*Mc3&+LaFe[5.Mp1Bh_;&)//]3p?$I2Fh=E%ZJh'=A8Nd6)eKb%0<:ltFFP5u@C3D/K`*i(:\J7XZo('m4.@kjaW.+P%^t)n.OY7I,>a]C?:Y.L)]UtDYnr>CU]8:<BYVCBd,^ll%][aOYPX6^hjR':ZqeU],1HeWGC0J01KShjCMi05lRj9[CP)o-t;GAqK%]i-Ft^1LVbA*]A,]e)*[^rc+9gNOT"A1mgD@o:9Y/5iV2`"0hBSU7/BLspD>GgX1j/BuA;aY*S3O[XY+E_5F-rLUb'9DIg;B:,Hi%KB4d"KX0$[WspLPp]is!7-LmG"MqBG0_Vg2?*55)=_WL7lp'2["1M$#c,=41^8+l>9"\U``o_uAJIqt,&TlAfcpJKW<b(/%N>6<l%lBn.:3"IdNUMWh\oXBalOc\_3`FDpWH4?L/0]4iV9T6?k9%CeTN<N];8K1<Z2;4c/d#Q"T=Bp3Ap4ZdT<O&>e<4#)&-GamXLZYs#%+kh.3k?(@.a0H0deJ8<-fCON!p)Gkh%36HSdEs"Bjf'tgCZuctpj>ReG("YS#f%4VY^aWOl#Nd0]t.HiW1NoQK,U,M,>5b(QQ)a0%DE]UBc]iT'Y>Ul37r2qE8Wr=,?:H!6a1%Q<'rj6<_`@Fd20j<u^1`(]P2mD\b[g7Wj5]:L0DWY:)#85%#k;@3XN\!;BhkQG@L_lT%9/J5DQV3JcWS'd406Qoakka/E"nRVu1QmED&*SmD7T<a&2<3"BXOYo_IX.DPLuI^oepG@tQCh=bUU@*GKVGOON1-CkbI^i-%Jqp.%)D2WaFTli7eV9&I_fEQsF-:gCdQP5sT2rCXFt>j8$r\^!U7=J&`gT,1J2U'Ba2QRHpM$)ULdQfL+\0)K4K&f/$$b/ls&M$g>b//D%+kQN`8*Im]0VYF5N2;2I$cXc.%WGRo1ei79MT]hR'Hgmh1"GB(D&@8Zla:.nV%M*k__`qh/1$5o0U=HJ0GQ?;;mocG7q,jP/V7N+%DR0*nMCNGr">/(\;oMJ[,5P3W\2bdbZ`R2`dkm<j7=?Ep<pUMgj\C`$WdPCFOZ[K3Q>'R&Z56pPHRWFRQuQ22l-lfbZq++-XtboQ%?UgEA+SDOhN9*V-;WUTq['HWYWG)ro.:_/);.&$hC0t^Z,cW\09OunG$DX/kAP?+=LSAmf2F5Nnc.($t0S7"Q0l"s8iM]U]'oo0U%?qh:jeQCY\iERLI=I8s:%T/57dYr.I)Q1O\Z#q$2p!mds9iI"YKQ.C>Chd1OCoV2hi"j8Om#qnH$DV?9>;oFZ(e8.9D1e-ggSo"h%Bo9Zk0lG<n9l2\O9f4L4j3iT8qd`(-^aP[e),o)STdX`W:!bY41R1ZZ%&:!pN*<!94P>JHhHXF$H<BXc(EOml/WDaLdWPE`_lWZU%[AK0XHStDXZaB\ekAjI=INU<S9[UJWE8E."JsK_\ejQl%Q8^95\J0AX7[U==TS7:1bM]Tig'ei=Q,CWa;0eBq7lLmiT^)<4kDHI>%TjjK@#=G_=he0n/9>s;6V%\$A0#J1(FVS8k9T:Hi$r#Ai$c?&[QQk";6@=es"JYs&\K!.JgeI=G]j"k\ncS,8YmaBulKQ6GY"e(K%s-/-C\1!q$Z%^qsA%/_kf`DE).sQC)l.c?E@1uFsG'[@=NaZW`RS=J:1K8Ji(FI/CQZR=!1P5EBpOhpZe)in-\$QAKiP@+`<4XRg%JW<]i*,Ee2-WHGJcnPkS5mm&XghZ"RDlsej(OIRNe$3,K).o+DNei^e9dh1OLX0F-PUM9+YS^2I>a)"'aTa,/FMQj!#m3R0e2Dlp%M$H[B"IOF,`#N9(LZ"!!CH^(7EQ#\"H4MpoBN)Dlk\[k99Q1,n75;I`L/a9o(a?gU6P/2fS_V9(,R'!'S>3-E^_T%.kPJ[J6iq*r%4rk:aqbbBX^7+%`S6f@c3=<X!<"qjY+CqF1qu%*N$(+>).WK9`8`>kJW@l;HRJ3$;WGK[Y&sOWlF.BWa_SrB6KSp<0R>XdkE3\X:%iSm7R@H*Lo@V<8>`%L_<'PmP4UsAU&Nc10^58Is?][p7!3LW3(JQ(IuU)G1q!#[O1VZ^H<F+nJ_pNkq[Ft?Y_@U*Cg/FRrG,)*0?%7Ha*>14;_2dR7PS&B]mZ3]r0<0[Ija-62,W3K1hs9S0V+jt).(n?q59XSBm5)5H*g[p\iViNtbdohcM7[+3=KL\6_.\+N="RJJ2J%ZqYm#[3Vq+n%ZT66TTM9H\7S,1ZZ*o$c9acdp66PdEF8`V+#OM"=(.jMM!?L#\Jr,Jsio8"@ARd2C'MAL7iW*jVr#k8c97%D!8J/%D_Q;#&%6D6Z/oq/r9>hg;iI8+@hiq9n`s$A-O`RbMQtiR>PtMFL/Y1D2kmO'1Mf$4/?$f$%"(1?#>2`d6\?s7FtbF%On%2%[Yu9[%2n3SGC,2b)*GJJ??F3aX]$I[oI`JKjneZKF@H_LMOqaK8/Vggp6QBE:g9&(^JV7l@Kh:e]@J$-lKAk4Bl+DdT(4pO:L`Vl4j$3m_%+Qk9NLkX'/&HFZ(!n$G7dZgI4(+=us:D!/15I];(DCa-<$P\X6+p`M<O<$f%BS$E)@W-jk[g^N1e6l"T5[?NfYU1dFWEf+Oh=Y7K%]t#G/PX+sgL6Ce_p/\>+&&1>R:5'(>M%qY#AMGi%99W%&C^Gs1j:me\)(uVtI'hPb&XuJ3-=i0H!@d8e-IE"M-#W79Un5"lmO'/3%IrG]Gbh_\7RH!*@[&Scp>mJj:IX0bb*I]j0Kh3I.RXIm$UkVX9N$oh&B9Y1(_C\YL+]ZoA8mX/'`Kn'.e"dd7WQHn#GiDQKM'Q%K%8%r[,'1o(r2q)&7d@*X\1B8[o`0YkTBiRdNQkn)FK8&nUg0<0ub(o4<WG@GiPP$!"5AASW?.JGH0U28TVK$7*D+@.FAZ>PuF?`=Q%?^#3$L;TQaj1ktl$-,Mc-76Ds8Z'OY/5"5pH4&!RX1cc(c^&>YC@rK,%oUjCTO"?na1I>s3-D0-B^n'AZeeB!#&tOb#WQ(iTNmCb%;:2_[rphBkA4>;*Um.*`>WS(4AY+KW90"h\G0&&C?64I"DA3F$2c'T'.:q#WT<*u_C--oXp1a=f<VfAbikna#(3Z0RZu:e&L;R_O%S#CTmUl'ji]gc8k>:^7GC_6m)`A0q42M]J^gUDTR4"C4f2P=Jqe>-.3V;sU0+?I=qH.fG`V[=i;5*;))0S/E$MB%s(CK.DK$f=So%+Y\W5KZn"=VqRXhV`*'aO^q>Aa793j9gPcU>1#Kujhc#c#_a^$T-B^'7^l(J?gb@ElX]]]pNKVZ@q+Kn[Y'l@F=uAS?M'_PGFML?%9Qi^</N-%<^"=i*V:;Y>3FO:<#fpbkSLe3aQ@2I#Z/tE8HMR?FV@eFXSmK$`]R^ilQOQ^%pVP92_L'<^37&r[\?2du.EjTO)%29Q%Y)T4b.9c]\Y3m9(!4@1^?WY[TpfOK5AJ7A9;/I@^\;MOF!Im<ZiYWU#)3CC14l%jAo$MKf=.nY:&-gkVK<:'&U[&t1La>dun[:/o%O]-')%^tS1A$F-sa;X)!QrP&W_f*2r"l!<geeX<&:MOa)kOZ<]/_Ga2g9tB>k7HBGo;.i&((=WB2W[i*Jebj?CC8mq)k2H>MTXQc%lMmq7pccWn5jg^N$ClJ#fVW'P*I!H];s6Qk>+:*G%/RfK"g\S:C^X!WW)?iOjr1^^YH+<ZAV8\GPoR1gcpm/tUYb4qeeq8mVNc]c%iO=3V's<[nPBU\ee\ILSHTk[8(JGB^_oGn>RcD9_77/$/*8d8gdnZo4_I%:,<_H:0\-3#e`!d@*>Bu+9/bt2-S1f$,=CXEG,34;4%*JAqF3;C!73lM.^ET:Y\gc3]gHu1@M)][Zo6a:VgUBl/WF7;=36B?j[`=P3-@O/[E9^%%"qF]uq;g1P=*6?KP9+Pj3)[<,Dp:"#'%dXr1',m_d_W@K8#U5V11LW@]%g<p(#"bTm&KJsSl"JP,hC.jYCYAFl'1bE"5_?=Qn:%JWVJ-T?Fat#bsq*:eSdIhT7;PFCuX=NPh%&kjBKWl#g3"lV;!eo?(MbI;'UF#s4&[n@<FHlQXUfh4XC)mjST!H=c]\9(kWYJ<,f#0Zhp)qNK3^]U\b?mggO#:9,8@=(XC@Hb4%%WSnf1E5FrZ=/aX0Nt2lA&`a6tVogEF7B^K\-E6d#780k(Ql0?p9">k)Y]b+t&a^/!o<)/0/6ORu<MY?hROH[YaE'ua*-Y4LEmRqo%OW6?,_-(e$fUS]:4$HFP4Xfs<)16Qr%idOm,!Bm36QbPY7l+]JT[Nlc4`HoX)sMq@3b:bkS.*?6TN-@f6g'^ULgk=_d,U:3X64hj%5nD252I>X!0F(5\dU4'-d1O.:@2Z5AMa/;<f^X,Nggj+$Pn"Tq/<Zr)Cno#2/\>,4\h=h'o"eY_2BA@DFuA0M:A=]d%3=tm%H:@5%T^BPVU(km-n@b@eKK]$h[Ud22P&4Jfa-C*e'EV&Ma*]al7l[9q<`Rr3"LaoNYmQNBqRVF%Zs'CN"(4L:G(BuaScC\<,qF+LM*PRM%&com$+*WZN1^nSo#W,4*&SM<.7%b,U,6H]A!@$Hde"K\ai:)Fa,6H.ok\DJra1:#s&ttGmN/9fCNMd^m5QnA[KEu+aGXDV>@?_%.%hF&Pqm*.M@X<T"m$n!-Rd./&(L'V=7.1sWJMaS\W/L*U:OPT"(Z>Cg$Yh[Y8Q3t.1X,0g>pkim]!q$54NFdego9p-F^\MnspMtJ+%pMbQTp:%fuA?t7_LZ6L$+-^3l05%nP<t@OPD!m3WIt+s+iJq5VT+rIJq0_dGrVks<5CPEcoZQppB(egdl)X.)G;gHEJ]TK-:,'.c%#cA\@R=d3\*ftGnWNCZb.R&9k%`loo^6j<eWXZ]L_9ep0hP4q8\\?`"q@O>n?W5'k55t0*iTpH[DZ+Of]aLqKp"gMFeDfSdC!4Q?%Ik55>KR\IYs*k!/V>9KO5J&ZPn?jgL/L7.iko\Z]QoT]>`^2O2XN>ts$"ss-!>(s)#ifT-+N!'c(]RT36$WT>2*%<W5Z8m/q,1pl%2UIbd;-*IgE(tibbb+B;!q`hoNra[1e<_Di/lbP@h1!&.^$R/^FcB9EC["OjY`I-0n,"tgqC`$PWK^d<mGl11qi-!#5IlqHE39pd%p:K/W7g$g#%,>V7.dX5)1/PW\@XF,1qfo@R,,Sc?[pl5NE?CgVGMgXRK'>EV64-q6GFSJbJCJ2+AS+M=I3,3[naEnF<ru'F)Z#at%DJ8/1I9*FD0q;"c?gZEgD\ZE#iBj7))!:.Deqq/;k>R^rr3+`,+M.\!07[6=/h2s,IJM\HZ[_lGqLRp?0m)t*s"E45PST0$#>HKq%^YNaF+3Q0".2TDdPLp[AZ<G>6T8E*[9YRAn*[tea:Fbttoj)7gT/JVegE-Q5p.1=0=\O\@G<r-V1(-7?:lc>NOX$.cFjT3Q+"]jR%;SH3CS'B2oZ/.X,1VlXh<SNFM;%.UGm-fJ[m-F>pp%mg5ng6+c(<d3sJD<Sk'n.:SnHtYt:TP\bPfTm'cCFOK9H!1"Y!/9h210e[%$T]iK>$,#-o_Ru7=_[g3fbFB,ZZl:lnq)*pi$lY7dK0bYm&i"V]0@aRJ5Wi;\!p=&#q0H@hRs6h`q=$`'pu:u^V4u5ICB7Nf6;G.%h+:'%AJu@2le>2c8lj&(7@i3Aj#gSnp%iiYGBFfq,;<^-kKRAbDmuW!P/:,:([Lh-c-6pCR:WTkS5.'TK.Z(nnl^2i?pbUtDq6j+%V\NUtW;q9Fi<f>I22B7:^@LB=,0&6S:bh2oLJpf9#=0K=mU\U+Vs]&4Cnki'Vdpld]qJn[#K8.&H-ZY,OoVACZ:W[^16-uc:<5X0%E63tt\`olS=VR%&!M*%V^4sRLUu_=GjneCRHafDCXfKFDbEAS]+oaDX;r:TM4@hc(Q](&4Wk8!>-hg(!poJ,?k@P@BLNq:NjA2t.%]R@K,5r&D#,_pt@M$FA(>gKmGmr(./&*N86Fn*j<TB^cB\FF`j$&<Z:qiTe9rJMJ!DQbs^+9-f`nR$0Pm_\/EXrd_s]abGaGk;Z"%L>d4P[jg<L.,R9qIX?Ka[=_rjQtl?ZkCGDY/,jnjn_Jr7If+D6pYU??K_4__1]%kqGP=!#rI.I1&A]RhrW(a0qGtB7PPa_6^F=<n%Jmb-7R%*L)GAuF\Vi3rko#nK-p%@-@5h)@O[_Nld2@j.m,9CcqL&RLOs!L^]*Mp\GmCuuBVU>+bk!.S#s.';kZgU[*Fb'J.*0')d%^;#0MhYsgLm'"HbTA?\*Z]$UlLtJ]npfEf?=.$2eeY)L5#:[?9o>@bV2#`3Ji;Vm8o"VdhY&Gm1,#UW'HF(=Ggt!RMY9(D@V2#6D%QW:j3k:lX1qcKo5h-@_np(X&0+b/HooiSiorF>6kb=T#79=Le<Brm;@X>)r2d[2,+l,JBg/@O:Xc$6pM#St77c'sKlG1UXeqtbQ<%p@J1h7Xn<_YI<nDQ^btf4\ZpqZ=@bhUjd"lDDr*lX'cD8<'5o-Lr]OB-.<C&E0gSp8uWeXp:56#rAM:%hqkFV2R?f@OJ?t5pq+/r%<,USXbhhcrn)(*"/lfj94s+BDD!o'/ID*@Ef^,d@MjEsI?Z/7On+!;(L,-sBebb,GTuc8>RL3[b1\HiD]mG";?14q.QeS"sDH>#*%lKbkf[^mN5F92,qp;`r4Y9WEV"cWde#3oX+^:Sm(%Ld=PA#T2!C3G+*?^h^uPU_.se?m>/?2&BK\_lbfhou)(q9-\Bip-AKrVHBQ%qVfKIcVeG,NH8=?\paTrp0rIEpAOjTB(g9B:-8@55C]rK\pf-EqWC'O02<7g\j7=\h.F^;4Nru351\Y7*7<ZGYHC?bGe:]iDUcQ#%GM=inYA^R4=*E:.=7<<T6:ONQ<80hr3W"2IpASJ>q/<Se!Q49[qH^o:rqc?ebrYBj44keT6<)7e6okGO]",Q0bjHQrg[A+L]*#k;%ZidepDg(S'7<sAdkmsK*V<H?LZN]/^PCNK.k40[7dHgJMqX/AdhMngGhH[f'D1m92Qb`01"#6Od+8YDG]=Zd%m<A!bdkA0@fk4s^%Hac_oRpFoK"l"A20Gl$5bsI1;J]1NkptB3I3.k*08!pST;U2Mj(n^dX;e_@kam)'ErnVI?FUdbGhd)'o4Jr*;'3=L4B04C,OugmQ%9D-9I=%?r.&,VX]`%0#NVoUVKT1CI:5+,L]r`!WPY/eZW#kMWdFP>YKPI:'tOQ)`=Q&lobibm`C+)^4B>SJp]AiCdRa3XmR7d;4k%n#gQGTRLs+1(*KQ*\3F%Xs+u@a,9;>Kmi]52o!'9g4+PbbYnOcoAL;>LTLt!c%,*]Ns"j6cdd0UULgd>*0oDFkTsVdfY2WP^Nk&4%m+W-)*a/Maq`9i3rqc#QdJ/IsWDd/^[JVH2p<E9Tjoi3erTid)g\&2=TFA.G$,@8Ijiq[l\\/B.p&QE$&QAcK(%Q-.E?0Vd?-Ti?%#k9-m!oTQ@[(bAar[T(Oa&&T/O-]J,mHo,h@."6"odIus*:nP%q@V(>d"gqBfK31ES`34k#+:*=2%q/=&UbJJp\O=&p(=O"M1L'X%PcThqZo3ApcNu9:BQFo5h2(S-^ep%dJ2L5P!ji^%C%VJqg\(!Hq]+o8J0WVm^`':MJ0(\]]fp^_pFs@nH+/.,]fRQAn*]ACCkAbF%+7J4dH-f8>]']Wu)$fmYs71'A)iHn>ZVus(:Jh`*:3;.D+HOCE)1/m3h::pWQW5t5E<9'+oDTRAKDK2B5)^LiA5JLc%YiPcdD\X1%G.nrHZ87.='M*aH6hQQR.ao5i`huNX<r6VE5ic2l6ODd?L=2lpLQQQb+&_THk=9M-R.$$T0b&8d+<`?&;7Q(U%k%+<mqsb-4Nn!<%F*VtZN045(+h5I&l=4#\hBO<-&K&r;O6Q)'lDZ4s=d<N'1'r%%rjB27RT:RjLaY<aA6rW\5X#Nq[s8q4U[O8O)bQ+LJr[_'32jRa%_k'jm<d`f-Y;SK&'i.0X]!7_[,_CUdHaJu//6F/f[Ggi8jcP+`!:Gn)SH,hLTB($Pnf='%esGjo/rqF]!a=L;D3&EaK!Hm!n)NaH%*:bn>SAD7pRNSt$jra;ON<D#*_V"JG-iMQc&6,[o&U3]JEeJ!N4!kI-#f,lC]7(R?i4C4G0Yhiticb&8<4k:&$3,&EYaM6Z^MI8,%*c+84CI:U0s+lVp3kM$Agq5#P1:ZDbnbqM(ojuK+-i:ZBFp0RLH+s,e$&eG'qnjGp%SY)R*6e8up254KgHAI6hd>8H*E<h%cQ"%-%)*<Y?aWgUHn(28gFOD_iN*h_A\-b3fm2g`/m_2mB$h6KAVb@+djf;5:b8kkfTANq/Xph8Cgtl:CILrB+d*]n+e0Ti3WD>]Ac97%A%pJ7_53/>q409>BTX^5YBcb`f[HN!>BrSp@Q*F.fU]L*>GI?&T*Ze*t#O,/#"^P@'mGblY9+4p@rmeJosIE)LDDsE_UT@?6OmG/L;%gn.r-T"9AlXm2s8!l5LnSA>/[Vigr*7Y<?);u4<!HCPIEY0:m?ml\Yds3^P3gSl^H_WV[&%SkYeP_11u#FoiF(l.>ak+$etI*[8B%W`p',#g=36m(%)7eY0RcEiGhIIMVW:$IB.NT1PBUe'GF27*%hBR?lm,MjS>%@<>:+:lgJU1C,m9UU[sdh'"af*E5kE5);+Tm/;T?%Sou/M?9A0K*&Futn+W*Xq:sU>5+//o7G^5+Lc1@f7kah%LX5kLGK]r6oE(78Fl2R[rP!BN\@"BJ_nr4qkMF_g^2uQ:HM@Gl1jf6_%jd+l8G>n6!"IC4F*]d4RNZFoI9HEl+9DI,ng&HKnVnQTSVL[YeGi59.*1D$EI/j&"Ynu"W\LAB>Ie=@T4SAT*?*l[lY8!qGT6e9P%57@hTIt%R_(cD'am2);L`b18NW(o9fZqir%+(k9?j:)(BS*GL;@EEj>*p8-XgYLKMBP3(M(be;!eWJ&#MqTsk_hp`olsq*H!klKY%,0!Kbh05##`FtC]_o+Wlmau(6;ILd,h_#ji#RS+f8*&nt"EP6D%N'Ks\B3]aVmAdup0NB'bsBU8]!!41k\_>g>Ru>Q59K@+UT#I8%qZ?dV<<%aaV%-"o>7lhN=!E5u)p<@J$614PNgqZGfS@H*E'kq@]mD0Z6,LRhU4Y;snT9j0QiO,#iOI?(SFh9Q3d#_tL+7d@bDDZ#%OI(lOLRmR)ZmOC%IJnO4hUGGo?#71!G^]8aS)o+3G3k<=$=7-Z:XuoKpuXT"Kf-Zua;=C$Sj/kX-L9/6HfWK?W4Z:\C&,!EZ!jT=%%akDB<7Z6U0=/j".go#EB=U`^IQ(U_FdjI+MpJ$ERuQZ;C8(KM?g,aKa6RkbG-Q/E>hrH3(0aiJgSJf&XZ,On[ZM7=AQB@g[=>UI%S1n#J\g_/^bIR(JWOF/g'?S[#CV":=gAJ'8YOAqmb=^s%qRWudXq_9OcN?PB*m\7W^",_,l5._&g:us2Efn\55JC=7o#BYW96O=)%m5Je&ghGm-qnd%k=aLc>*s+Nne'09=AH25#HrM\fKFd?c[s21^IVW2T(41arCb;"?2c@o@VaQ]0e[U7\;L>u=eLU*bpTqi:b0+_r%7DBBskd[+c[Dg]mBmFRSPk>,WmT"1sDnb/]r(h1iEFZSC2u_'e&+d-"C^t+PO8VJpr0PR7lYUc/<II_^Q^5fdGs5Hcak^N$eV3$Q%[F<I'Snu]d/@F7,DtrWU>CUD$Y`VAJGcu<ukO'*mD`/[fn&_tkHoHE&0=MGSIrPDOdaI99S4IBf-eG3cB7&S^]<]+Le3C*:??Ns6%H]lS.p4er_>86HGgU5;_$(t""kieqMn@86s/`+DEMVBY\I'-CnfCqJ]$I2kt;KZJpp9^DIeK4)#`hbT*W`QrQZHFVVQ]';0lnrpt%qO*!?X_O8,glb=t<87F@4KVZ@dTW6+k/h++&?f`UCW624q8ROMU5Pd[pu$mQTdGVln1_2Bd-p=9A"!@#5-8b.k1*`8Ncc\>9,g.-%B0pca[@WRsCX4NDT@9(eV8n'I2meeBKV?0:MTSG?7[6\p!nY^#`72p12X2[n;l;.R>=(3Or&$pTd/LGr8%!j"g/E"WVga-10NZXC%Nq^f3jOnNu[p%Ic4WV99P^]bOT+f>(Edi,ROEmN_?IWo4lq'W+/+5B2s%[L5YQ(uhdaL_W\P[dtLk*:k4'b'qr,Te5%Y$[Nb.Fe"%<hkt0gg[du&C"l1G5q<KYb,2_\c6(G>1JT/daHP39_iAn[m.AZ+(ef'YVtLB4)K+_#Ua8oqO:%,0-6>'dbXIt9k[dsA0QTd]B)Kk%W$@ML<kccss'Bt*leY`Z,8fOD^%D/S-!6'E:ReIuq0#[^MHS5R0ASK`:KrOYY^CO9V<;`^fgNL:d/!uZVidGJ:01f0K=?08<G4@V%$4#Me$TZF>r=LKc"Gc8P*gS^RY!0VMHhpY;pn4]q8>lGMfNWhinanunXQOX8B$cj2Dk4"F,$@+`I`qkK=Z'u[f(iOsCoO83?1V<N%JjWJ'"KAA:%oU^A?6d/X^=9*\(K,FaH'_;PSTVcKg/!]S:":atIeSL4:-i,LajHchin\gUo'c>CU[nD0nl7l"3LbXR[PE"2ht>dV%NmsHBl^-^cVj@R3D.aoc<pCFF$gZf$-eCoh(*ABe]6GU6rR4FuY>'bQUXo$pEAYG7h7QA1$D)DODobEB[3+Ao&nZAIkK">sqtBX8%j87qLWB5J#lgS`E'&]UYpTAp)g?b=%p=mnU8(Kt\Z-:Rm^m!Xp?Vc7!]DLnUjWj#_!!kd5R!\FioBP.9Xi-h1DZ-^pDVki:jhq)Q%C]34jSq9D&?IuVDV@W'l7>m=Y>E'CTg*4og]=D>FeBG(dAoI<oVhMRDhO#oeFh(D:C*,c2\sq!3l'Ic1<DBI$rims/IOp^gYe,j!%Tf3TUGK\#8HVpe=CK:)fSSV?'7]!Ubn*mfg!E_RfZfUk7e2UVmOQr7q)E$K5lZF2dR3"8,pHt\U;t+qgR_8TRfY5jMCc6*%3'$7-%k5_9]AQ"RKWQ')VOC5.G=qqt[htEbbRBgbXLZcilL)]Ii0t,tDF1mQl6u;$Nf#2`GY3\J$%:?`;.rd+XWV[/4(d8>NmlS1KK8$U`%fgO8t;1Vq5nj`D__&h][^WC)G'4nE&MsjZ+-P&7?46KE)N0[*]#L"?9/TJ4P<ks/e4n@2eIhGo"^4[(f3*?qNG:hFH*)[).(-R1F%JriE:AXK^KiEA#q%R_eoL'nk7!\KB,<fQS;na%m@ZZ.!`G3j32B2IlS%15mN/^A6ZGEq+sH_fe[M4gW\%j\lD#J`d(e1'.#p3^CM%&#0q-3KYX>c)*4Bj.1C-4FD,W11XTu/Jg-2-Q0sBR-@oUMpRO.?n5M3S&iI-Pb5g.)<>,l$e4fT8m=GZG04Feh/E[Zhq#ebWV`0r%Wjhl3"tHA=+N67.U<_kkH$`TF^Co[D)]RKAQmi9"`bg%u"[uRkp7+p^0h%'PN_Cntn;9>(]B=?qCaddbrDlmHc;Bq@1+qlJgr.?P%VgS!%Y#ZXVX&k:lENnj^87/rA29H8bZFD.1?HEsE=n.Fpba)!>;U'N2kNd,9p0_IRpU'MjIUCZ$0<Z1-Rk)s/51>H@=BE%U[g).e%9GS%rUE=-N"3O*piORO]e.4ZrU:5dK_-TPjQ'Nuo9ZqtZ])5UM/j1c"kbq]D9&8pYZ*Llf\jj94TtY]X5O5Ug=[6Umfp.#d;0s*0%_PXmMs"oF29;?t2qQk4689u[`bLe00&mDY\9WPkU;mWDrI5\iQ*gFXaO1.3Z#EF6i?s1"N!Y.#trAM7[L:ZKFp=m[>)sGCOX/QU1%-Gi4M6!2F^3o+[Kkj5E&fmDi"e,!']X.h0GJYXBDlih+*\R:O_7iTh-:no6'9E_bQeU>%)DX;@(5>Jr_")uiEXYo"!*Dh.XQXO5t%UD0:8:VZf@75JLhU\FF\II4^_@&-h0X"Tgi1sBt:DQqjrH\+2%Sp<U3F4T$E(!kI_i6d!KT&2QakKgp*"oYS'YU?fd*km2Fje^=F%[3Vh*h4_qf'qWY7#2fCYH*Y*[?!53Fq@u<?*VXB6o==r!Ed:SAQaZJY".Rrj7R"t:@%6!eQe=<*"!?d(V60>,T`(3kDC$J&(X\5J%><ZjerbF(:=1V;oGhQ]JCi6D#\WZ5NS]^fVr"FEbS#42PTt='/KWqTP4qB-WOkH`+O$2`i'1n*-[0lPI<Nl_T)`QB:fgbqHIjZPe%&&[Ydd+b\Ib5P^]:J.7/m'uasJ*6<S8<,nor?kgXR$:tUWc$>Cc[\(MoAub4nT"O,mQ$c=T:E#fK\u]E?52kB)QBk$.rP9^YZ_"*%ibW.\4+io*\YuSO^2kN(d`V0h#GlK41c@TRAq'EPj?:9Gc=3AO7fn8g54&3MkA-RCbh_d;l^EXUFpD/QC#-L*<kbWTB'!<F^2sjR%j)J;YPk$81\*h_7^HAajW;qu=kQ)dKB!`pU7-21%.lX;g\_ga`Hn/Dk5IFrf/i(TlRN)?;$:U#NDS'Deqo'Gi'++M=EFq6"pPu85%>#*6nMT59`,CR<#l]tYNO$sl6(OG8Bjb'>p<W,\irl&7Egc>l(fZ\MgB(C9IEa]&qo%d6r/\?;OCq[NS?9r5Y4hUBj.*,&:o<lSc%EJIqeG@Mf`)ID3FG\klFBc2`6FB%#]mH9e,efUJVMl4NmoY]1M1M-O]3UK^EQpB&b;l+Bgm";V6IYpkn^g^Zl"AHN88kBD:\_96K%2:"ok[B6PUZ'&J\I$8S\SUJp3NooL7)n30F2mA9QF`>^PI][SYQnL&Zr-NLA2r#p#VX[gNr`p"LjaRc,l9K%[IA!k1qJ=UQk\GH>%[!0+CaB.([f[]V8p%eFZTe-4=mfDQ:&.C29h+f\k5@O;])l_)?]7;5?jh3WZ7#g40I6f?/85r]/IAWa;Ma&!=fGnLbMD4I[D85)(%=fst'0>7O%"-cA"guYW1m?Ml3lW^3^b-t#*j:kJ9V+XJ5a*T(oo3[,s@&AHLp23LGg@XK)du]W,-(&VFnQNK,hrUKf6-*jWl8SHm%Hf]mX5T0_"6:>Ibh5+$W\7f[3=gP\<4V8^ZS'UF]q$(A<c2^X@epq0$o@h[B^(c)n\[7m!riS,&hbK9J!f-:YbE^O.1gf"A-P)DE%d:A#)Cko-R5iB;FXM'mb=2/Od_Np/W7Jl&\QB`^?[+Q<V7@iV)r[XKsb:hUB@ljR3);)lP=ZWU@`ui"]b3"DQSm@e'jn_hW2\2KG%(cD>Y[n\I."/>k$b[0;KDc],G=4MOGj_CBrQTME5,XYDYAI[]n@rLn^g8O[ll"',H'mRgk'p,EmJM,BN]8P43%le7Ke"r\EG/lE&%6GI>!Hp>6g)BMtn]:C\ia_%iMO^70XfohQ9`as4Z\$Z+u'K=\WhJZKY%p-?c\b"pQq/S@i?/+(\H<Xae;C"K?8GfC<o%rKn(%AKG%r_];gC>-BuDmrfeb58ro2g[oOo&4qp=Pbp-NTt]G&d2.u<Z*18M]<e_*:Zqn<,mp/ZX6Nhpg#:"YIkkVorf7ege9G:rqj5j5cK'b%L/!GNYk?oLNG5HJ40uSH]\Y%YI')1ieW$C1MF`"%5_akYEd>?A>?O_I-/5(2$M3!,m"=)lQEQo"e[6^JFVZPd8965(fEEtO(@7YG%4IcA^$YR;N@&$L5\63Nn*XA4?KsH.e^KGn5f0PUF\m61Af'HUD?,,5En'/7aCY,cQZU(@&Voje;D)7uGq;:c%Cj!)^\XrV2/2u:r%3%*6Lp;AOM#iBg>ZVWsbFR<U9\n`nL[]Y\P7d=brF>l,$+6_OPj/N@q/09FeJat,eR6.^V[Zq7@L0hU&Z#M[WVSmh`Z[=Q-hTlm3%0L.=M8s6-%kDsE()_Q2DHT`r[hVZ*:QrCn')``lY@UuiAO6:9t+0Q3Ra=Xn:>2H$o*gGRN48,<KcrfVCQJ;@`,`;rpTsqaqe:2!Y%\42mi[qE'`3#g=PYJ5_WT`29Hd%X@ndaQ874BSH[[.;fDiMUUlD7RAdHSXmji6I$uTWGMCKr*7EG'>*6H.R!*;=.Dn)qCjg3>f;(%#T=S&IV\<!ddh`0*CT==P=ls8#30uj(7W'0V!jfhlPhqR;:na7msfQ&.MF_VQ?N'VLm`agN3CBNU&JBopM[67gN_NRX_jq5%6W#W%V3@[6He^-GZ&FH$E30?kE_O10]0#lq"JXt-jDN_3CAUA?1YL%PD^^fD,SqOEgII/`2\5l,h2V%-#[W^3Eka"E5(#RL#E?+=3?DS<%lUM31SQbI`,t)<YCT_h\CR"!@9?ZYOK)8M6o;c#Uc4pG+?bT"1Fr<gdB2jDj4aiY-5)]"_=1-"##Al#2]YAiG>*!]2/f8NQ^=Ro,%++.B0[DdpWq6JE7rN]CTK;8=ijlZFfm+'kNUMC$R-C*0YqZgban)GDa/aHtVFn<L>0,@XVEJ&(G5+>*GPk$I3%$bTd08uYVO:gU'%g9Wj?>5ij$br@&*c(loiA2>RPbkOZWBa72]<aRJGIi@F^'!,Ya]@[)RH8meL7l1`kmHXXS/b<.^lcX=^;nmS2W7rpfC2sS`b$h&B%&q9;m7_UR/##`p-E:.#q7sF:<7]g$0ETDWH+BfOg:HltVW3)sJDbJ9!cJX(55*t,'&3`.C)P1j@B.@Z-;62u7f"cafI9EGF'G[J-%8$e3'6KcG0h(eJu4)OX<rT<ZT,*l:[$d5Yum^b._mn1lk0OucuqH'li>%Y,7E7R%"'=PI^g;WmTpDmsup7Vf/]Y-=!c%AFdPA8<N%>][%@['2G!Gke8JVmN)mD59)XQN:U:H]LUiQpstI4X1!hC7E[J_I2tR;*4T!.PpUdD!?jdIJ4]P(XJ_]Vm#D;Gqgl-L!M(43^_H?%;6sX)^+!u+U^^u28I!]!rL"U7G?mBfjkSurj#2+ekS]HUK(f1@r<rC/rnL"WG!C1YgG]m5]R:Y`?'KQJ[:]7#VcO:gqfQ9k\S&2u%H^Vjtqibl0r>oVH4t,(<NJ1uMYmtM[m2iVl"4W1&e%%e^1HVYK7t1K/X1'0kO6EuXj04T4q*YiSrjMMG>V(4A0@tMakpG:X"6(*7%aQ#Agkkol)X5%F9oOr9H+$!>-6=ZsgIr66_[Hm!kM<Tl0X#mO:b'T1gra(q"_&iDNDp1.EhbO/J@=$cmdBq0MBC.*sINd7>o9J=Y%kMuN2q0^nM\ZVh[n"#><I@\)WW+RpRT:.I#s!/\,,,n==1EmYV+(,\P+$VU0&Xa?ps0l_ZD0^3[C@m?:b,!(YaB_eMmT*)okL*bC%Q?1ZDpWMTahT*?$N`C#KZNR-'\KQOWG1fmg:'ZLFTdUV]gDOCs^G>eOPi_j4fm^/Ds.T`ko%MK0"a#O^)g\1F@8kKRmAEj*jZn0\%:<VrRe+r"?5p?Udib`s%fb(]jF"dP'n]sZjDOL!(jZBI6jLK[W)3B3S.]hNEY2R#%QE&?s<r2LUG3bBu'<J+>[mI?tY,h"%oq0r,%6\Q1V?<7r,[C,AEA`[f"3n1W2CH;0rSVQ?s+7S8rPt$><97QPuY+."Yb*B0e%f=4Hg?Ngm9'oV,T"XA`P=3i%@JB'd;LrBrrTn9?%H=#i-]kqOs7T8TEh`\cIc$/,drk.C]G,]]:]h[1fKq`UTE\I@!;h[0:@(@aCdUEDe'L-TG]<4H'O0r0TT^'8hedWSjY'^-=HgD/5%\X(OFeHbL"4td'Lg+uLCYX-kU1Kf/7*cr:GI;`Q^lT8d^h>U\g0(goBE"t3CG$/R6X]1d\4h93BSO%gih>;AE+Z(\&DBOOD)ZPc,%:O-Y-BMbDme6WY+1m+;pPk04j>*\\LU"Se(#OcEfk?+`*4XAuDj_J7"(HrW1TR.%SYV4j=Q+JE_(E-8sPTT2I?+oT2f1u$Yd.AG0%.G)^\iA_o9BHl-Cra+K(L@l"Um0H@k@=u##2hlPm4QoO'1]*s?[qS[uPjVt,Zeq$;fV%PGd\h=%4K+E,cRumQmfX(,C['`YUbejr%b^IiAKn``;%2i-7SNAsu/qj^[IP!CZf+2OkUbP(_op1bZ`KS3T6(>Fa:?\>YS`eF=d%IV/mdbJ)g\]is_dP>'#i9K1f(@BI,$=m=%&),G^kBtYJI*+CHG1_+&Tg9>`Z$uAsn>u;W,d]2iC>ba@lT[Q2D0B7o*-=9kI17)OOecDYDn"7P>O0(tQYGDtZ-s(%F=VjKp"7Cb%"qGs(]=(+[U(ePOld"&WAgM9?Wc57_AcrXuRdD1\5<Kju6"(HGp7s!`Kd-<%=_tg-%D!jUI*8@J6.aO42lCk-lNaTcFR:4b3p>sJ%q=c^VcmqPphE=L.#),q,YWKJCs3>B&RD;+lIgc.IK7</ukKh!LD$[WJ5G3i<YB@==mTu3+e\FK:s70@7TZ6j#l&O,"KAOrP2JGu-%KuoeJ[;Q$:;SbZ*",CK4Ft%jgs1!bK=1\AsmkP,hI*af.iu(gER2<;U<77#"n']'fC>C,mV@25:oB%S6RNH&NXhs_\XO_nf9>(@o%HM(jT6.]$-*">N8E!/t')nQJod-KT.9eS"Zc7Z6&CuV,,6(*$Mk4R='58^cTpCGu+>m!:1LL&[gGh9NU>Y33oe"H9cENA2(l0MtW%ICLOo,7H>UF+39<GCK]!Q-ocg7CQKMpcQhKj^mVcqe=#O3'V:dD$E2khbPm5)ct_MTVom,mh]$Dqqg1Gcu[il7W(7iRB,;q!4MUj%WTfC&&YBOEc-6%-\+[A*a`K"bSptqVh<T2@jQZ-:+g,/8_,!#PVb=Y"omQ#&7j"5Rpg)V-fUV=4^V(pu\$B/E+7`CCh'oK"(P861%4uTaTosD3,TB$+32Kg^kFDC46)P?-r3L):2n)PV1\$Ytkqoegc_cX_GjjZkEq6Uk,[$!G?lb6CdT!%6oX4ksdo@/]'m;h7E8m4sp%^V+^Xnum7Ac\=PFqtD9.MGhf"`7WAUcWC+J@g'PpI_BCYc2g_E1RC"B%mI]*3?`8WL9^V3Bk8Wh2hIZFc?:,@1V949Vbb2&bJM#R%R1P<':\Pr,;U[^C6#UtZ/%>CrBg7m"VhMsb;Is?^^[cqOrCdK>R.BW7Du+dRjud#L:+q+//21TjX60965N4oO5-*g%#JcO,HC3s=%NQ]PsOpH5BY'+bFSNFABSBfqS*_iObds_/%LDFKE3kog<]'QoVQ*3-6c!cIKF%.d")kRLG$D-pQT;R3"4tYNAK$I_N?$StnQ8V\1%)1+e*n*A7i$S-RLVV7c8j'oO!Zgn0cSg6ePc?XK`Xa<kjI769O4fiGGRDqrbFAT8a63[VD(@7Pq[m&plpA?7Hd,q\R4t,,Fp7S^(%:]i7geGl_R@@Q^l"CJbG<=\3IkhRm4\-@AOT:^61-10S-'P4*G_5R<^#7mi)T8*q<ds)Wp#DH*5qL?Ri[9;#Y+2S5qNu55Q/:-qC%n$&TdKFWl#`Gl`@F.n41+)>]:qfYu`J\FCedkAEI48m3%m<3,(^35kE*RJh=G@`g)O59g&>LLJBE6TH-&3m[0;hDK".@9K-IT97#%gE=F:)eu#?k3`9.GWWtG=VE\5@i_hfYOn(7JOem1h4"Wb[r>L3Za`5u^dK!R<khRo7t0"l_cM^KSQZ[+RC*:@\-K7`,0]2T->"b-%)GEqm4l.PoH`O4?V!B,\N/kojc[BD#j1Y71WsN.91LX]j9dVTa)ubKNi%Z#Bb]`@ge?Z+co"#3[0$H88pYaAC1`uR^TIDmM(cJ@"%oV@AJZ\pj?LZ+Hm>^Ys)L@SC&5rn3-JOl\g%bu5M_"uX#Xk'`L_*;TZh4N5lG>MU-3SGO_J%9Dk0?g<`XH,iE'eX'lOVNBGRYRM!%qR$0dTu`,Tlm+Ko].L`>A-l$>5A+J(Q@i=`._iq!\V9^k@,AnM0aR5q?Ui$46Z46q^jSg@bQk#8qt.4dqGm4C4b16B8Ck\kE8KE\%WJgH8?IS=/%RsiICS!%f!P#1;mJ_E-jhQ8"\**7Q9=NYt!-`RmK"")!G0$XVLCi06?(P9SCAh^Xj<)"&*KKE1G)!j\,'<6kO$d!6%86Y=OcdSnGH2DmTRfp]t$aM`crMiof:qD&`4`l]U[e!g2h7ZO`c)[HZZiDD5KUA[Ve4#ahhRA?]Oj_ng8f""uL!.k*$U/\DdMM1Y%hK*m*dgB@QW$;8U@5j;d:EJ<7>Wp.,iHrOq'SBrd+OA!Y:+l9$(F2Lm^e)84fbQq:/&$CB<sIiqp_,"K+/C!XEa`hi'5Xh7$IHYa%[cG^.V@Bf4=-s]7IGBhC[;f>F'@G6IekE!i&PU)b7b@W'2SE@<:b5aO9I,D\n!h`)ZhD>`5"tra3Z;/2^>dKgR55G\d[<l>Pn(f\%R15W`aZ6]QrfNH[Z@bMD]%d3Nh#0kkLT,B8cf^eF[7-@qX$guec5meilQaZtk*CXjGm2?_(5]=P*mMah/6&Yh#@e7ISH-[B*,WV_%Ekdq-LQO'!kBX8i\rK:Wrb(UX]DB.^p]d:UTr(6I3I"kkX'R0:@Cj=eh\%%.<'IJf`if3(XUttQ(68p?c<;ufX)_>\"$?%t^-UO.%9aS:Umj#!?&@U'$:o9=F`gDW@On^8pD^*C<B2]\f"l`4oX'8a@n`uK.E&-e4q^fVi3Gn(9?4g0t]2_>,a]V`oP@S4OrZVNV%m6</%>,q9Xg&N9kN=@^`S"Vl:&Gl_n+CKp-b4qVYnYg->UaEnXJA[c!IiB&1!3j35;=4>/orTh6Di_]=XaHLd8_&8WFbO5'%FO75le[Pe%#\S-%&lnQ$4-VNHOo^;5QqdQu6[05Vc::2:oo_iM+`#"@*e>kb"Bda@/FO0Xq5#>(Su]Bc;W@Lt):,Lqkr[lJ*g6.XpQ,LkR^b3k%D)B8_ha(&0>=:ut0V^U^96Sdf^Y;DVZgV4*jO-q9\i3mNdEM]s4GMbV@oMU`hG/J,i\??'(:;a:h+'CH`T0&N7i;sp*jj^GL\U^n%X<8IBSHs_)Rh[o1bjB38.FXZB/9k1Z/\`bU2LolB6^2:mn?[V`h%ki5ce8'=-akB"^#]u]IYp[T+:&eX-ZED#r%]sb.n.h\ir6;d%prQju17lZi?9:p)UG']PTuq*44GJn[Oo]rKq4sQc^5R^^YFl83!1':qh7'cE!:8o(YS0Bj-/C>Ib'NY<?r^ip,FuFP',F]ShlAGc%'-Ee6q<0[`@`pk"X;H`*!kbW;4;g3orlS<BJBq+X%Sr+\<SFkU,0q45o(V0%,fcJ#q0+#CM11%$'i$E=R/Pf`8+HQTjdm^kWAAIG%E2:d,DXllJVk\1ag_-9tQpt<s)Kt3W2dS`K8<+LVD+)_u,fUXt7%>::7&=,doPueWWOtl:!]\p(T/i@H0.1*?i+Tg55UPR#?K6+6%hHP6O-]"Npj?;.[_TnrAF#5Q^%VPcip5`^&ZoD^ups0q>lkesMcT27&14e(.olD&j3\(N-hr>oY+ce86ir%Xb>7s9Y%A(r*JB,p*%(<S#15`tfkN%_/Gbf#9eeXqp@*N>%=#g'u-`aH*/A3;aXSOI;dd7i-7PG,<IB0TdqNo+Aha'N6tkPA113tbHtTeYbDLa!XV2?f_^%BA@sqBS)'XrIgf5i@;B"RR!F#J*>,Ba@bWCZB4U]du!>`=$K!VE(#TpD6+l^/4^O'"tP^ZB<f\$iRnptQ/_DON^[XU1S)(k9<lr1%]<n*as1<`0)Cc+bP@CFEo_Y:fgsrf55N>;PO:Bs1,5fQX91)AZchV+FPPJ[/rir<Y=d2jQVbXLUDHA#Okk\_"2uTs4nY";jOJ1&\%1_tgZPd*)OkXp]Pq;\"5`KWF-Wt9o'>8[6rU$`-=K76EVMg<UCU8MrEI'.7WkA#6&SUX8jLX\a)M7A/:&7D<)`t_7(TkX.,;FVL;%0f%@npAVTeQTbhCE=Q(3ltp?$fs]PdcOeL`OtY51)slp8>Tt6-=<)gr9?$Bg#/!%^9>1l,_=Gl<</bRc(m043VMLta@A5+1$\OJ)%X6S9"=]0L[Gj]mgeA7YmIs\"LSN$,K<'qI-6'k,;VM6_7JhE1U9FY9L"eG,J%:e#:79@i]WWiE!6Pj#okH,L>^P4APK$I^T3,T12%F9Pqo3LLeskR'@X[G][pFO:hF]_:a=20@4\FA<;6heMA\OVMu3*g.+Nkb9Tk>eZ-;K]MX.\*k/'Y;Z\M]Fq.WR!f`o9"+E(2r>XA%\@qHpMGYE3Pi^o4OlLcYpZ@7lP/m=h!hT*TaX%JR\qQP\GtN)HjKGlZVA:JfN/q$KQ5p9-:0.Pk$[.i*d/*+?3W&.RACAG&?QmFR%:a3rIPW+scns!CEO$h]1&U53t1.V?)+hlu]"FHa+L73PYbi)t6<8lr\_brdJ(>hjb05b:GddjQ2c\O-[+\Nb#'dP?Zr]KoqPRK<^%@3YF^s2i_oNuPO4XJFdLK(Wj:3e,A("/*VU.cV?i&S;;j(0[>!0oM`rGuLr_Ao2.n8jjoX-6Iddhp7gHqNQ^O^&HfY7bf3:Td?T1%%>Xmb4F)>/^(D7+Ao<c^9U,n(@<U!lo%8mu5SQ"`ok&jnp;a*5o@<A:r^Nq%na#s4cB`u#p^uf,L=QiOJ%9XY,:<)q[M^89j-LOE%#9G3,Sc`nHK!G$qS."&cEO#iS4IAM10<1%NBMD0:@_dC0r!pTrPSI(?j,-uudTJt=rTG(+Y*g.@A)X,COV\o5.>6=jo/_?nY!9<8%.t*.PElCt]T@\i60_3+&lF.a>0,N&jdm5D"E@N&k7/"rge,?loGe0Y;*PkV#!S;4BYns?r8X8n8H*>hGoIeF,j&dm.=C\RI,dLB%%mLB[q7`'#6n.N3=BA\K'^oB5*,]pu'OUK7rZdBA]\Z?>AjN25&DqqB`9%Ub3Jle#g(fhC;diu[Yq7?;\MVDTBH!EbVOI,9d=%("U%:QD?6_5-'iI"_b`4o3h(Dea_FGZsT2Bcr$V/tSfn4$F:5n6Ah-gaJbKn0u3A&,DO=+C0^r8KLT`79/!"jH0bn:3Xk?`kdkj,I8_7%p'/7e+jZS66Ys=n*gnm*bPqa10s]:e8,()Xk.lI_:<4X^93_1<#17#kO%^`m);:]G10?,ArqncBGVe%uj/PWj<hK*kO,W1O8&U?c%SeGG#"1Z`f;0'<#M,Jhr%Wuc@H?e:k*+eqmCD&L]CWBn+`^!crA'8lV"SlIqEpA$j`Q4QD$njtP8cQ>K%!+q6^)RotHn>-+@>Qs6%(G!Q*<'SMV^9'-]o`j^H6:se]Q,:EP7&[UJr$,2bVq8%TqGQuojOj]D,Sa^dk_uT.5o3qD2"s0\>n7b<kFZiZ>cdCTrOEu0B0lDE%i[.qA2d1t$\Fjh?]Y;:?<0-h?iVl_,(r%,PN=q[%32(XXWufqu&NAs#3:9Y6<6Qqi*\QY,!V6u.LU4_M&s[2l<^#5g/J\uM6!qb;%8ie`h7W1i2=R;PKha`F=Fiua)OTS`!j.6//^R*Os'8i1a)5Eh?cWZ8IiPg7n`q,S(5pcNVQ!Dtfcu5';*;JJ1cc;.XYp&33$tI"]%(_Fj-,.8)DU$iP=/.:*d5CXBUlMD,H&\J($e+&K-rTYZJamnr,csp1m3hQ5KkWD0.jmU7Zr-KVp"/^N:3/1jEC=pi8NZn*OBM4E_%XW,heN9YAC@NWa$YVY_qAqk_N.`*]q^-6N`lcUeFfFS'!c_/8bUe+O]?N!R%+r*/.>Xdr.cNG^q`>O0Qbub^[pG:R7On`3Q74Rpc%!PSlR\0</Il6hVf1peGarb%lK>[!Fh#nKSF7oMoP1.(\rEt4m,b$o,,7`7EDJYd;q*uhUkB9Z:R97m]F%o/u9c@rN*rg`LNiC<EC%N`uiL`3,V,.3+qGE(N-j;E3f=Lf%m_Vc#M/58Gp>%cujj?\ArTa:CFPK#ALKFj;3$<0!S>lg$)Y-d_VT_&*Ymln%3bL84&g%mBAO%L;s`U:^NWWM`O3e$P<l9G7ZB;La!JR(uiA3<u6oAr5-;@N\^.?I6d\rf!mtcp=pLf5@$J;[>W&H@B'$+C"9gS/%7$![5Y?o.;ka.%AilK;[C,A[;'NRAFdLY:GB49u/lWd&=,f^a@<JHe`"BP,?2ioK_7DF4B?a_?jh!-_p>gVIPG.7n!F&j2?Cloe]:FWk]64!pMkY,d%GD2U7&2Mu`K5.`6qEas=XOo,1_X:WgWj$9a?6"_1]!1^$GRgdn9)EA.I/!01P&!m4$!;+3T6IGaobY7!'pnA4<G1R;$G2_GI3E]/%Ts;#<(G_pIRoFQGGMs9[[o(+^F'A@3c2H=RO?rD#^?"_Jp3g%sh*FF\iQg"Gpn7<VEPpgfLLKAu#7IV?]G@]C=XeZ@5GXiT'r'Gc%[kQ]N(<\FYbV"ACefE-ECHbhtMPqQ2EQ"iW*k<2SF$DMCes@_U.B@/16H%r6D8ZRTnC!nn^r/!XbTbo??X?HOplpAOY$b/X+o.og%X8I:]F0<No8M4CCa[BA]n'IQbid0SIZY'rfe!F.[&'sP\jV#+t?F]MYOc-P0le]+\\[o\U2"[r%fLV'-/)X)Md&R`<rj_`%6MF48%c&tBWY%(a&2rNs!F#@6>5Kob"l%3[7>Srr,2-nSW&ehIG$Tg#*Xetu2jl?,ECe#[FWgYP2Y1p\\M,i$Dqa/A2X6E*8aFC.co55qV%V2O<?*jM.daNrlB!nDt(l%3[7_K1(DXelJ($j1Nsr`DnX9&-gikp!jB0P31J:b<^@PnU9s$_!5O^.bJo/uY)]X!pc;RP%,k[6;2:%X/69Y5Gl=lZC3C:*?7#T)dZ5TeCF'bb#,5(U+nR*C:^'A]"_WhQsr#X@t1MU$OWY^k.m$`:$:fWFpqOk)nCm#%*)XH7hU*AeTAVf%n<:#P$gN94j@ND$"dP.r%Cm.SV@,/N'@AGs0rjI>O<MUC$;Dp0@YhM_0-$!V9c'Ug]'nYuG%'*D")ohllhV#Tl+6WeRts_Ud04".%d<JI*/prO^HQ1nfEUi)rh,h'(E*M/npEkRL<u48sb^'`=e'OS$,Ojc%M=P&0.2MGET_9=N&$8e'*,AHIYQEF@Jo@"Q$U&d4FP@h5%NQ9#ed+`2]*%#,mSKXW[#\'3^4iB<R5j\;Vdjl%4nrMdTju+TL%2JK'48qs>BU/MAfA(XhQ\uM!*p]9,JbpsQ(=J369lOHgEpuMA%UFp6<R_(7k)-NgnnhkWB*_$)tG9^-6$sn!6S<DoD+\#g[(KUDK06ebG*G9"p&4?)6Y.h@l<bJ\G\A&Sf08D(6YdDC!T5/_d[pnH.%%+;&Ol?VbV)=,#-+dWKF()?Z4b'8V^UZVO[a@`Nf$r>l=IrCs[pbgnKW?DW@<nr!Ff=06RDqNe@(p#+=qhQcdL;_'8>cmMi$e$Gj%%<XYPCoG8!V-S'%j-YVJ>@3b@![6pCN8%-M9s)kPZR[9sR7'2N3g'@3$)E$EH+-us+-P;GSW-lVl`Loq(Y/e<U)78gd8E%)<roS4%WkWpm,Rr)KPn`hM+d_O&7HM9Z-5r.8pUs&X:kQ3Bp(oIaCrdnsIS2d[L\a!u*S&Q&.48Jdd3MgqPIn[#j=>*k6fcqh]o@#-XZofM%;dRTl-?.#P^fQE6MH3Y?J#_\=m]d]*7.IdfneS-M^Mk%!Pef@&,8DsBMt!J/Po6MJ>5/u@&TKu'r/SD(KugA8mNOG2@NWKr2r'C3%DtP2i\FWccrqTai^`2^]]d[m,itHl?hF-WhCD3[?ML!*F*8gPKDn,DrpZfNRDDf]KGB(B4N_(_*Y)=?%O;4:g0ueE-Z*W1%[BM8@%#B\/9_V4mTLH$o=8CQ[bEh"IQq&&.%3CCQ&`VTD*2iE(Dd*Dh%CU'4f6mnTY2S>[On%qL-1"hg@rp0-pY&>Bj7&TX(pV"W:m*E`!%Y"o]TpfM2I;[=jk]?qoTG!8U$18_B4c1\r$3Le[!c*8cQgW0%mH8-1P]8p?$@\MtP78,?6(mZ&2KJVc<'LSCR5?D:3YO_Q*_eL>Z%TGU];XpKl3[4.DiFro\T8([JfL>PPr')JGZ+kJj]k[W/[&@3eYVl?=>FVr-Xf=4ihrbqCfXhtS.Di>T>nD5blpDR,G,]?N?"]mk-%.*RYJ`g^<p7!sX.3PRncELRIWcRLa:<4gsD1!*&[Nn3jog-t'"W-2&,QHJOId:OS*XVBL>C8JFoBq0t9QKUoSH`+ot9>5c*NkaI)%KBqK^V_=U`.H\83eGehgm^Yp2;\,4#C@?lliMeJujRVqEd%H4@(2S]Vrq0kAO2]I3KuQu$5@dT-eu98A]C2j7]8IN5R5\E(qX7is%bkCBh?);7l,U$8MHYG'ceGd^g6;,e=rAuaH#VWg&o\od)R(j%_ic[KHr%b;Cmj#'ld&K]RHlX42Xd'*]DfoA-_ZoKr(#ePPH+9]c%$ub=7))A.qm^^!W5Nr*^Sl/7P:B5juPeJ!a18*H$XEM`db?J<khD2dbg2Sk#dK5Y.lej\tmfRbu7J_j66!<;HBp75dYKQ=XInf2D%Zd;[=:_--BrQifW;t@p%@8\>H_LtupGr4?lgrseA)j]+<qGQVj:X\+:O;,&=>=Z-SASng(Wed[^i5DX8WmZW5BF[p=fXD-jl7S5Z%7p+[EpINti&aP?%c,;#o)KtF<k`ia-"K]3SSu3<A9("5^s/d.b2P39.a31Um?N]Z[4SKkrbDp[Wb"[<.n>3&N2;l)dEMIbbN7E@=%Ds.uI@i3!?oa+$3?ti\looIqYafkA=rtt*JN0*_:moiN*ZWu\mZ+hM1G.lO)Ws(TVIOd&57t,8lkt;q?OM:WmZhH8XkV^EB0Fq'2%1,cGa)'&W5i##>[7V'f7bO"i_>D@B&n0;K&+1mEhZEm?'IB<p+)8_S&clE&8Kd$;K@j=2r,D>)jKk/3,:EKnQ1F72ni(`if%S!J'%)O;3.n]$;WM7fUSd-hsmd)Om?o!pjL.?QeP@O[t:ho@2-%+CHtbb<$Am/9#f&%=+LG8=NVA'=iGSH[$aUZWA4.hd"_o^^o7o+EF-%Z1(Dp`kY^O,sPmI9F:*&TNjH]46/8L?MQ?k'k#+F)Q3[qq@6)1(F.h9kHeJbX9+>b"3<M&R/Z0V21Q:MAW/+S\2AfADD;O88c0P#%,&0PV;ut"@!K9rg'4(hZ^W%`;*M\#e-F*hp,TA`pqA*?=BNGTOCpHi`qWju*d5S@*l;G@D]Pun;b*NC`#/V]Em\P:32mWAeQgt=O%Yt8<FQPd^Q-ZUXXBmk4.hLBi#?heJ@PJ!,5o_uut>fu6!;G4Rk7Rc,N+igi[K<9M!S2g`.l8R;'T`XZT)^?/:N-kLi0ZJ&(S&De0%n6WlEBA:G:f5G>odR<NrMn[^pp:$`Mh!5dNgJEC3f?Ym9N;PT`+7Jl\:0GMMN_/$l(TjnHAIsiBYFg<ThHTp[I7e#)lPH,<PSii8%NHMF3o[4AoakZ2@M&S^7hs2)l+>1Y4I'9/BE#81Io=s2K(S,O]>a%-Zq2mc3`%F6jcTJPAr;Bs:T\;<eeGZ?rD<OtFEPFaRpKkUJ%;qKH^rd(c?L$df&rC4P_DZVfbA)HSgIB274mc03I:^O<C)=:bFa>>TN8=d]4IQX89EiYh5LA.n5.1s&cH1ETeE3EVZ-o)aU0;I@h%(Z8Klp7BDuh!5c)X5@HfdMgMKSor$IrcG>NFJ*EB<clQ4rM"6'qnmi0,?tj$FW]M5^Z&\Zl8Ok&pkC9g0rd5<n+DTApCN^/qknf>%!pUh3T+lF-nu$j5gc<Q1\,)(ePr<*###Xpome)Ks2cnu):ZPisBJXt!qtS1GX4q\;hZSsJn?%0"h8_IS/KOKVL;A687_4K'hj+5"%3e+Zk0D\_aLs!c#me-H5+,b9F?aQ9^d+I7Dp%-GOB2t#aeY]!drPn@"NH)./=>)DDh@T9b^L8uEPI]9u\ejodD28#@8$$tC\^bVO%Dl<JnU$#`HVm7dciSbjQdI-Z8;?P]PCbkb]7ACLa'qN:VIQ#1I]fC`&Ko8n$1jH4]BR\-En+DSkQjic\j;9aM\)$7PrC4pNN4@Im%=tt-hYs7(1(TeMa6k[PQf.R8lr)US:aN1=SqF*nj'$88NlPH*&**?K.`k?hp(o']SiN]2'=6N'XE4j`/j59/=/KF[gSE&Jl(G$P0%8qDYJGEeC+0kD[JU-<$YY$H=uHn5%5]8:&p'JjXd]shh*n'Z6(=A2c@H]EO>_sR"=`b\uf6=g4!$'aClG'bf<X9Y4i?)IMJq;T7L%eQA5\<hi^!gQd*Hl-+3m^R.eLcHE-?C0B)m]pF`<=9!_X]jmFt[EH+=RH]^goQ7W`:n0P\d2(mT:M4Ib\'MtC6KdGlY8t'#DY:KZ%eoU*CDW`=.h!,lJk0DNRccMmU^%HLBZN'cMgam@;:MuZdeEq*1S,RW7rnID(b:Yr+B.lllh;i!ZU"bjqVJ!V(?cAfppTg$tBXLXA%Ap-8DqD7ln&g!7/[;L2*EGmmZh1W1099n?-lr%%:#n:<[<G3AC2MC5Zf8e55h0J7.?e=l)rlaRnD]uU]J.&"3Q'SI8p$@R@F,=*V%9kA60rC"Efp7=3UL#R!j[7tO70AdSG04!uDeh.m&<b%u=dWVdDAG6?^<.5=/OnC=VLG-\h5Mabc[PN?CZ^%AP-B`pqmGAZ@1@rVo%]fBTe]oq/4Ci1l\*H%r,k5;ZR[>RC\S$)%%]f#g#a<KC&bqq?Le(rXA+r5,=J8!X'H>G<Z8f[6`0)=r*XeIkmrN-fIBo_h*j'bYh%=IfDSPko+UkG2)Tc.%9]R*%e$;O>s-!8ZK_4WPX3Ph3=TSZJfnX>S54K?*9Mk3P.2<2uI$lg/$.opMl*dhMdRAS\he^QD^WfF[@-%Mp'Z&qkAn9o3$"HrKqh9cJJ-?mJ:<f.,P!b;9$pj7RS<T#(a>Uod6j_cP3<^Mmq"bO>/!p<@(@h!ldi>nE48Hre/1:n,n0+niY%s%4a(l<>Fo&*^2)N$0=QV4S'l@lWAWLcH#L5@RM.mRlj"F&K50tnIZSV83#3SL8c)B$rTJOgaaPAB*ouKB?E=AnBj.LgCsCbiYcOmF%o;9m3#@o(JjP>m2(BoI,\O]P@">![O&D+=UKRZUqmt[C.h=lAa20ns4oCutTAiOis.]IP/A\Z#![C%LXZS0[<j2L`g0)`o(D-pP*%A>TXOo1$0uIJ>/,e"[mGQ."CGUG_74JW1kLk6sY&56NE9c^F$edZSQ)k9`d4*0VpITCqKU3hb<&Y?PA3[X8st>J\jl=Ieb1B9/Cj%g?PrK;qA,o;s[bc0+Oms8j:"Saraum??tl/oZeU:.G]K$Z]K.k+rdMi^4JE).ALs`G-N3r"&Ne%Wr1KGZ,D.b05n?*?E0plD[0eq%8iBc$m)jP#`;o8r)1qr8P/IF[S1DePCO*6cm!Z&L(T@#qpN?WVJFEJB:5bS`bbtLWSYfru+5<SIS$dAUp#H@<F0:%?OFf^#HMG.?%Xe2,c,:]mA:9uFIkb:e_&JP/n1[OJccQ"Fa2d/.)Zl=,\WRMi'Z'KD2P5V3"aL&:O0/MbdFM)i9kSsWKE5efprWaO$\V6@oT&[3T%J=F<\(3RfK?urG$Suf%V4!hEV]jl*akX%L:YMQsX+&Q$`YIr2/2Z3IQM3#(TR6j3>jY*r2A'ImepMJ[<Gc%<^/IOhf?I_Eg")]td%4n43`>!;d!J^c3$Uc&!BnX*Cm>kc&ifM&\8""t_n@cJ+tbr=*Add@TcYB=1W8BGpgbj_=lS#)?p/iut"?o'U>CJCrcXF+U7C)'Ps%8B=9Kks4IVW't%uM<*@C?J4c+2<E9K.'uAdMKYqI[?R$@QS(_"VcjQJ0%4A<#-.;eJ\eL9[k\P0UFpC&nEUj.c#@/6W1SL=5^M:2%/fmL,A]FO8"NnLtHuSMUQX?s5oTHcOaq*&n&P=h+f_24ka72#\<,)3DQb^-OmYc+7iM]E+l\hkq+9=(\dh;Ap$kg[mK+I4dIq]p-%:p"qT0?A?MF>d[dhCGX0D8O+BIIAA.j3m'$=mdh/\tF^j:XFge"c^rEk+;2i<3,MAm<oH#qHS@l'7bSG_)q*)pI;e;mt>OG0m"Xf%gHZgCTT.n"=Sp8`G?,M1P1)kb@IE&'X908:'?TH@KQWCrBb%@#K3dR<\r;4OQ1Xa[d?Yr/m)FqDBpT4JR#_f"\X5P6P@o*<moUY?%Go"%Nnm,!!mkNB;F-8<nUN?DLQE@1U$\u][CJpeqd[onX-DV$"9J,q)"Ncn3at].P7+/!)s!PrL<=?CgoD_3=#E3rYoD_3=:F(AR%q1#-/]AbJ;4o\<BF).!o4aJm+q1Nkh+j)h:osrTDs$SjP9(o:J"3S1(dd=0+B,V"RLKDc"9HC9CQ0Bi3/-7j0k"XdL_4TmrMBs]#%U%k*,OLejL*pX29$1ril'1]L?SgK?1+>Ng$s."QR\34)c^?4UY8p\`'-o1b_NT09WDo'!cj>FE6--d[[/_)e4iX581aj-3K7Iu#u%_(h;CX*WL>nMP8+*VOSt-0r?;<c3HY^07A>T9:Z?a(q42XDS^UojMWqSOH%;?9@tcn0ZE!1tR0WZbU/][O#DS3+[X"n@Zq%iq!+R%:$@>*(=Xd#20AUhnY#p=l0`_%T3jg\Ef$V\Z+M6;a.JE"NGbY8eG9,nCL?K.8*BJfC2p7U5-/X<(i$2%rd*p)j[f'UF1*jA?%Lcq%-\j_MQLJdY9's`:^9,^&XPDF!K_&3Y>;%S3YFo+g+H`2>Y.cJ`-Tg>=FRJ8J+o^/&3YJd]I(j'eb234OBUROWVd&E;ZeMV2g=F:9%Tqgh8,-8LCe:23L%9/2-lfqrb[[)?PXPE26L\b%c/I-d6o?:Mce%tAL6ogpp^="#tr=iuC^[oq=jW+MkEItO"_-5u97WCJU/sR!Z%3M"uufpU-o$Tn,kD)u$i+/a27BC"$7T@khp]4'Bp?Z30T;O6]$(gTd^o,G0Jej8-hU-k#M#6riUo.%'k)6\CV+ekP1/b%e%&5n3+%ZO].l[jh=B?RNb;%$'L31\Bj>$B_U=N&P?8nh.^ir3]5B%De`S@K$2WZj>?3%%J&Wc@U:*='`'P<.W.QO*mkBGlT5`\SOF]($u5b%r3LUlQ&GfdO5-i!kQ-W/O'H0R2[X5IB>DNt+pjeEJc)\^%h;#('1DaTr4,mLqS&g(!J!$uE+a]\FXfdrBQP3SDJ^9PZ\1f[7C:fj%0Yl!Sr-:ulB%Z5[pF^#]/ckf]QY4E%!!<qN1-KR;*Nj7=654nM(onD?Qff0W58T>!bB;p=c\TI5cFu@[AAs5'3)IeO)1GVW*eX<!%0)aEc>(.%J0th;fRms_]>3HsV2BGqsq.VlS'.kP[,e4Wr.K+]WCC.(h`ErDSS%KecM0J)AK7,^3EjC0S'?#[W7N-`,fOn+CiC7!.%2^I%VLO0mJ<VYqjaoj_eX^c:Ab*^3jch9-SA"38>)E[i,TC:Uo@rLrRIdE!aga$OLE;PhPA%.Y1@Wl2AOPE%<P8jIE;Fck^"KmcV%f'f$&K>W`?E]qC[@]/sT.fXgL+)u:t859mZa"'/SUuj*/"L)VA6cNcia)g/\lWP+4;%*pk!^Emp";?9dllS3d$HTcaF#[d2e=q)3%(MOa9YN!6!at^0B2!!1V_8R+kHOk&=<L!B`$FS.?04BqM!7PRb#HU0qTDQ+?PZ:2pma1&LQQ_Ktl46;Y:RL8;+<cqS3NPGSJdq=[%[-)iIRr3FqldY%dW?+2N5)0Sr^iA,oi%F9_T`;7j6[g>!g/$%%8=P([eF^oZL[CNk*cOh&kBfRD>OoeqL[Ct#HAC?1'rjs8Ar!R0%]-*q7.QUI@$I"$5!GOU>@J;u(%XX\eir5pc;tJDQ444sCs7l!lJSrnmFEYGJ;=9HD[$b^7#Q"!nKQG6b$YA3f@LFA)5PPVbliTF=%SP+E9h/OS4XSTo-2*L6AFtP@p**?(T1k'#dS95f:"1>>`X:n1W]ZHi0)^-!6rD%I&h^DeYrs(=raN+5q%jF\g2<10YbMa5SpU/q&%qMd06Q_D"KhV,6#JLiT!KM!$ZNjB.[#VaoM[?(%;./.3;b24rS[m</<WtuZhD)_5/[*Xi]&jkauB9=WujFm3[iIa;CVuJ!]Bu`/,%?OXAI?J>mkMMcD999>E[AL*N\F;QW"s%AX4ig0VH8ra_jV>NPYa^$t-J#JO:O+A/JYtC&R&u%]g:aL=,R/]o-G<6?84-^e"%$Yd:%-*K:4(,psd,D+&h^-BS5@mj,u5@Q`q$oL+/K'Gt5(cR11(d[Qf^X^78?thtBDsO$VDHBXYR0:T>kI:JN%Fj-)kP=eWFoQr^DF0k&%rtF=?poeR1M39S>W@@rP"LfEb.;CskVPdUiM<&NYh#4@g[XVZ!54?,`2mnI7ZgH?67Vum[MRC-O[S'OJR#Z+nXl3+q*Dj4!`S6&"%<JLOGrGSD@rtD8Q'*99U/KsVo^uPHI5;qK@561ZNPVTX0Fa5Q44lVq9$!@lJMCr[CZDnZc<B$d='!eSS"Bh"eA4%l'ROh4A!+lu\%6'8'U'-8X-4B^&>P([bB7KHfrLaj3OaUeK)NAZ!]R_VsUB$/Uq'/X8mQEdu/;GX<o^bE'!cm3jFW!-*S,^`<C$\fegd&0pk6s7MY%$r"'oGY6%<5ZMKr.0X!fo*:@,b7_Wjd==.UU5=Ig&ElVr&-I(\+ehA'eYRjES'Y>;@>4ib6W[ZP-8s9ZL'BGtFVX$]i,D.O20GJH%dgNH6@WN,hJcS*oTe<\6YX/PFG-GZ9/>rb0DC5uB8dI5;Jn[iiGPYab$3\>D/k&&o,f@P0dD59/]qCe'(fQ(]F;S*^`"NapaeB'a%;dfm)`#u&i$\n0OPreVq+:WMrn0j1(cN$g1>QO2aC@[BQ`!$RI!b)=-,abD!pC*U0.D,]F;0A8&UiH_tJ^G#pZG\h+,t&7TN/A9&%b^qAqWXAl1TnP:=W[@,$;@j6^.mtR=LG%u=oB^`;#m%M9`CX_E6h(Dt9O6*QVWk*HH`JCY+N0pIL:q/^#DfAD%)kP!&85n8Af4/L%.%HtAjpDAa*93h0d0l(I`/O@-U<b5)##Z0g%/(@H+t?"'f>N9?C)0Je1a>[J)>+?*Xq8OuJ4=ON9i5>9$k_u6V=t,11^M*E@fR,(%J0%.0D%LZLE69Fp61c;D&FgJCV?eN1PUI,31hC5j&Ht?F;Q4(K,q5Pkj=(ZHE!`]K^sJ/g%@M&k6;/RP6NAS@8/5H`LGBlXSZTX1%0UTRh*HX9K;[?5PLa[!N5n!ki)[K6kAVKtI'I$;FJ)WYn01csZRY:sXNW[.-f\CUJVHGXlj+7G;UrA.?(l9D*&TikqbW$P.TPMK'%5nqB@n.pNg<>@Z6(kVqkE@_X=&9Ys<c%Z7T!5N(]o+MSi&TU0hi!Df-$p9kD"P-&l7$0i)"qc[A=cg(9bBYTY[TDGV!S)N?)BK!.%cNSs]MmG6jkprX#;#KD(VDAM@7PP=7*(1YdFDb&`A(&:0O@\_J!YA'bFb0lKSl6$FVLq8!c"R<98s'toR'fJ,A4lV&p/ckK60A\Q%]#ILVTYZ6Lk_^M0O=e>s?lKC`@'U[a&V`sZSY$os-Un5[!i]g/kD#t9S-N^G6Sd#P8J=%)SYd[##%K/i$kR=Y,1U8#9Ek2@:)*2,%!8Z$O!gj*!%UP:-XAg`b!>+7g#U.k+o0VGk3>0P$+Th^(Q[#Ui.#<W;L*6LP<;r>c&EU_@ANY;B&ig]k\u=%5_*FlRZ^2*WR[k;J%4])uo.m.I%_I0[D;(G49g&@D>bYF[Aa=^#QNMiO2F]s@/@<;Yc`&-+U6sX8k9\^KB"7@?=%&Z.fM=@7,!h0q'#r4f614]OcC^751%JVjVg0Fd0tEl3D\$,l]dQof2cK#3`6!%^oCffhs,6#7NK[*c6`)WNoj@>YK1p`*3\BT)[e!R*AH#=`Wg8=^M>%$Cf,%&cn3-nq2a%J1^^B,*lcp&l!s:J6lV@$HOJi0h='56kc44-jh>4U3&g+VQ2DQ#'^,b+MpYpKC"d)AG6')Q%2.W<G)kA!hOu.L*0U%ksYLhmM=4`%^4s]u#cK/!3)\1$9+b,I4U"V*d\V]jJcpT8#q8D4SdVJ\U#%(u@60ibRVY>Z<Fp2HTT]oPA\8"^+:>]sB*E;qE1ip:1.dj"s/Jh?%&8[hf%i'eT%d\d,^T;t6,cGNP'ieZm":8Y<r4J0Q:_9n+aNpYO!'58t\"`)6I6\*T_?MG;0IK6(rBP6gg[*foggu^G![8Wq0$aBI%7'!%,-c28j`9UF+!ihQPAg/"p0@Uk)ItJtTaou'+<2S7[cJV)F>jJ>YRI%<'!`r1^p`Y=m9GKGA8gYlt^a_mG!=aur(4'$cdP4#T%W#AV5,Y_YrR"/?LM@H!>V(bcoe5>"Y>_>=!O?aS4G7bVKoDpbW,WTR[J0G/0N"F]l5ba8lJJ?Op.<,@1CtN+4"[[_l8.8m@E+B9L%kn`FG&0jl3,^tUSJZ0Ej.;;0c,X2P-K^it#:LV9OL#`Jicu-'Ra@AoZ%<*<pk9G(R/3o[aJr!Tjdg2%/EZZI)CbRXH\<t)CZ_3G_%+Rm'7R#/Z][_bj_4To5_-7Rn3#T$1G.VcD^Hj,Lt7SN8=Lrt_l)Gm0PNs9B080VQ"N%$_<:b*<;h88Dgl8^?BE3d#TWtWKM(DVc9%aiq%UdE.&sL'ecl_LaK#Y7]19X]00X;GRps;)D=`19<5K#7r4R8_rQE]?8)Pp4On+C(6W50F.ql-H/^."[L:gr'8qp@,b_H;JS0(%i*lbn,oDXjZq;0J@Kd=<8fD\`J12[43\qiE7^+HO.K/bSe4dmR'IGua`"\T?!/&([<f2j[!I#B'E=W0T]u2KU)od+/N$en*(LRlB%7Ymk&Ph#;c)iX,oM6'e.^kgV,S2Gqq,H7^-5h`$SW1'Bj>(I+67>\DRDSl$%-Ij\=S$WI0%8JF8-3g(Wmg1ro6^0AJfZ&N?\An[W%1O'I?1@nX7h1:jsFtdns*Vd(b@It+R#>s%,8(`%0gVfmb>;_hG9*4.+@)TcMq_`K&G6#Unc?(L,;j!1ZF:)jg\Os'Y8ifnG&Yf("%<o#@]C][!MmT)*rPVg%h+A?b5,hXUnR%X#,_[0iAOj/dqM8/4Z*3hR+&^!sE]]C@]J^@gdV$-t?RqicTkE8NSW%&\qU^cddQcBfr%XakI2Ju,OKJ+GoBkAl-(pebBE#YGh`+9<TQP5)R#R(4f:$C^W]((1J`"q!Q9+9I?%O:3`E"GP)4KUARGgAhECS>MuieI1=@bla_>%KH5m^BBF;j&-@0CkWnW#NGCaR.g*1WdlF*-@HtE-C"!iZp1ka[!Sma]lbnA\ecirS(`88uWe0JQUqj]aSV3CK!h.nL">d#.$PJ=m%^2;p_!i"$f`C0cZA:itJaauOt:jAWX",R9EL;4?/L'D)oc\p"(,Z8%_,3]<\j%/9@ZN)5#=c*89);qBr7R>rJQ:)WN6<'0%)N$g:%"!JmD6ULrB[hbcSgka<rIK1OdO8sOf!$FnhqB6-=O/(?A"=f@F1=LkqFb$D?[gERuc4D1N3=K=NMP?gE&n+%]9IV9jL(KU^K#&F0%6lNYZNC$UKW^JH^><*,V%3`;-`IX<[O\Y$u$56=(STB`S^#p54A!Ot?m64]`MSealKRiT1X2_H^>G2Iei?Tfa'+_[/HRW_?M%D#f%j@iT+Ik_V+!0OeM`"ZDlJ9VlWb6"YV`$7NZdg"&^@fT4X>pRDG1.akYN0HP[W(]q5A<\eK0Sj=L'1crUdU]Qbd(fnbSiJu<"I!M=%DA^_*3>"PiZRddJ%[4agQ./n?;\b:[.gjpF;q/rhq0L,m"VA[u&L,RnKcs/G:!"LiR:Db'!+p&?*p89>T"s4C0Yk8nZ-Ge+RtJ;2%RjM?'<8;WG_!sR\/"*^jQ$a@)KSP`X.";A4;6ni@_E=8P$",)qmT(5bWbp%W=NABh?`^g!D?MF%`>NLCKZl^A"Cs5@Y^=KbGI8&D%h]g<r1c`sOJ?"t@G6CJEf;m#SN0L+$/p9*s53ULP0L([N7$IGuiRE[&/e.B5U[&TH#b!NmUF\/f!?iR]:$/!8?Th((]r*iuL+Wls%+p,n<OnnhW$m6\a"cHS48gEb(-)M+U]&pe3"QL2qTJ]CcPd^kKlH.ltJBelb[3_tTM#q=V0Iol(-:KBkJs_)uArrnKe7!V8;C/K4%(_!A;L.(n=+B.Ig'$3O0'N;Imq1fO3Y`p]A<s$Um3=54V.+0]4J1Q,!aM]^Q]jd--&s:$G`mQ\0@H/5!cU7FSWr<*)Kc>9,0W.h5%WO(&AVOnEtC1O@WcTj.IjaBK#_juX]jifW>_4b+2\.>)kQ^GsT\\8mn/C3%^)eT!)'P;Bs?$$FIbjsdKDj[JD.^Zm;/7dab"B#"d%*p4*OA?H,nj974k0#eo6>V1UlQhY@75-#B71)9e[60>P7MQjn0.L*Ej<:8%/'fnEi'e#BGdrMeY[MRi^9NILi<ri1UbS!:G8]"?b%Yp,RC`#KJSKiEWP"W.uca[X1EOAjA6_#S4E)C;DUR`^RW3oMuMfmT;?]3?^.F4[**7cdFs3"rP`RdcUgEimB=-fTsq,t8!T\Ierp%d(#.g1sc7NTZM(lg**nWB,K[B2M<Mcn?1hh"Zt"8g)M4`VG"V%1>Q.J>\[)n?uSjM7p/.aS5524"e./;D?YR?$cOkWd;21+BQ,uM%+i(%uc#,h7IS/(22j-##15i.X]-33SmK.C9??:c)=8cQTg*jF]J>#T[AObV;Cehl*9bC*'2kMG99[Rs+,7EI*8*JgjFp/rt@>;k2%B\l@*4?5B>2h:d&C^=B4p0ro6K-CG;S(GY)_S?0C["8B,lYcHTTQ$MQ*`X=[H;A/@#YW\[ABW=T\\PTr5S3!,AT-6U;a[PH5QFmH%jV#YLabU>MSk0&T@<gTYCK/Y"9HOZ\JF&S,U;U;J[W&S4Jo1T;=n,Ns9^:sI\jWN+Bh(&t`rlB2j"-Fg*$C:?62MqDiXOMZ[4+Ur%`JE</1m<h5VJa8]B<GY'f.(i=b>t"JXmRWC:N=9/k1[,k7tg,m34"lDMc2T]W5^Y`O1'qKEn.;?C,T_f9!8?$'k7KeQ"N3iL.Au_%SgW_c/K?q&MHa.PX^>#_qRhFE!/aS<=1OXWfENHgFH7;q*d(3HSkaghj0;Xb`V8b@LYb(taBYWAQ'ifVC5')VT-rAj2oOd+<<m,u%$hVBf%dWVX^X2Od&qigdjr*2%F;U_eBU\?*71_eCmVJI&_VLhX:Lu5#Fq]E/abtc93e%uXUd1El_d"b-Jd(n:)\Zk7"N;C\gsp+B%=L=Wr<WpY.1rXEa,jOeu(n!(F6WDP`iWDO),`e^.Gtf`)7<L2Z750qB]8jq`DT.%@,.G;BIUeLL)]n/t$dcK`cQ$CM=#Yr;')H%)%'b1A4X(abi\>>s(Uk1X^m3#gYGec7^1"m[n/)e9XKMk.uUC!7@5]\pigZ1O4/`F_'J.ASpY.eH\.,7dEcY02o_`ggGTK&(+:0$E'%'cR4/MSeC6*/;`kPi3rY[hO;^EH2'+/8QP]N@$Cga(b\q,'(/C7-=ojV[@W)gR>(WK7Bg<)Pk@i>W5(rMA-Q<i,NTV=%0Jm+rc[q%SqO?nPA?b5e-R.9F9nthP_+o@<H<ku'ND]co4u=T0FYk3b'"auA;OK5?j8ch+Nn>6#kI$gFSO!p0.AIW+Y9'n61@#>*J_5<Q,.<1%Z?'Ff*=1q8P-0s<e_h2O#&Va6qsK1>_\"?>`8Ep61^m4B<^6lZA/4NDKfM[d87Es.J67t.Smu10(kFYL-NIUj[G==34PS.BEC6h/%'*kCs?OZhZM7"K,W>HeQaYdFW0ZULb>)qDGdE?QA1q(`U(0D-V/V#Ooh+Hg%QdZU!:)%g=Gd,_qVRfu_4^_s+M)t]MF`&&6JLIa%%.iV2XcSd7]!fTY&D(mb2@4lYn#@p8Ngt>#OPoF50'WF4i?mcto<b;cd9O`QCPLu4e_=Z#/Qjf;"U4CWd3AnCBY^AX=jtZQ;I8\i'%,=^JE@mUt9W@BslaG.em!t9kgmg\@*-Hd6(;<kIIb$&R3jIl,:3ok,40?Oo?31s!n@7<\hk@u4q`*.o)hm@8K)@6F]DHqh4nOoAS%e+"]LJq0tk2M%;@-+H4dbUnZ\cq9rS#ReX,f8$u'+DX):KpDc19Hc]5V<_)PPT-ppAG*0++@T11HB9Dp//0[t>(F^+b\(MVh#_"V%8"/PEWZ"KIb^H]>\14as/$\)e*3O,*G5;A_%gqZ+)&fMc77hbC8!Ud-N,4e"d%^&(am`gPBNE@&c8%XHPVIAD'g]+s?Ro8E+oab?%'<8i')L,3lpln2#Tn57:k(Q.QRE1RjclL'+)DoPa/O<g5>#j!"-%RF^8ilQk,"O(W##k3q^c[L/_Qtgj'BRe%"aI%(4:@'u\<:qa%OCtDi.Ql#a,bll^Q"q>7*F[MLBcAC_p'-7XdB'bVpg8u"Z]lGlP'hA>bsUYs#F)HEZjtnIS__BredO_qG_q8EbrWL^l<3c8:[d@;%`"ZGHQ,7F.#4oW?Zrf.j=e[L"Yp;=kQ^%&>4TJHaFB;3e$b>m,<p&2TShNhb0U7\F=fE6T<`Ip%p+S0NN;@+G'E*ST&QasI:_c+#%%S1-U4m3sJ)BLc"LS7/d1CTiT9JWZ>5aWfq.i9A7TFesS#*\L&6D/,FL1bZR%*2@Wc5]NLVOf1AK+N->,"*\LbC\YskSqo4XY>Z:%A\BU_b%<8oS7Lu3nl-<924+A2IQVtr%YUS\hQpVp=3_CEc<c-9%O1&&,N"*[))b'IEOXq1D'k0\+G<dU&9@/<fm=WIp)<eKltq=R%RMq]YJZY\\*"#3`?ks!d;*P=UH9UFiTFjI$Sb$1@q%F5k\g49^$Y!RWNe2@"@AY`([7mab\7*sX*Z4>c!K8Y5dEuY[>IdTdMihJo%/#=S&V@Y)R"(/<\r0SV-@o!pme!QJjBu$C^K3#rb)%i&?&>0sX"A]%b1u=4b/*K3nN[X'1)kf!G&675I9i%K*+eW?_%"cubUENte%#heO",r!J1f;&Yu:R`O9R(gi?RfVXgDMg"7i$6$.2j5KqLoRPAL:WcuTjQIJ)eL^jgeP(]/V<5M,.cW`^&c":^'A7H-">7]&$u!*%_ZrO:#"MLXK)f>k.[qDIr/*`rI12P-$AU#<!qJd'?E48=M+&G8ED0!aU('!C%kikcM?o=jDNa9'O;gN:=)oZIL;Kt_*jaKM(d_2m%^LnBO-'X1b3"XkM$%o=N<YB9sO!LE&k(1lAfmAUAcp\ZR#VeahE$n?\a"nuY.M;mAUJ*^E.g8)9gkd3]%)N?>#U3Kr;[pq;$DY*B%`T&7sk[[Yknq]7Z$j-UU*sA?TFL5W,8qr>En=lY^SQ02c#ZsM8n$nDq8A^oDLR#9PYT-g,5m<GW9<f^LHji>]&rD4<U2)_jO,S1r%PB^bA/XdD_eDLoDR_#XX#"]\\P)Q8mbh>Ud*odsUN8UcQQ]2QE>[n%*)1`@%j4bk.oU]eQ?E7Qm$HFqr3h-8p;]\>5eJ!5n'*:SG%5so2hj"qh\i^jZRp0nJ1Mt$l>MlJmt#pGbY/UaYi^_7/tLlj(8pU'1LX#sEN<WE18KmT:hS0@qQGG8u[$U`pQ[9tE(1`-TtP7uC*%X?l#H"%mK?Rq\8$jo*(;a&oi$Z&f+aXbeN,S[lp;$GdnlCh]1S8a-d<K#tGML;jBk8eIG]9/bc/^dQREV(unF1dH^j4rr<!-6?Y'%'0EaE-o6i)@1pm#-USUte$_A1+\%9&)+%j@</GnB]FG.q!0oOGS^Tk2ZN%g#PQc>W0R[>eZ-YtWgh%=@KgUDL)f30=:(s05P#5ac%67j0[(@#\r.n5=c^.<A".9'K*mthr_WN")`LV:l%'3)Dn$cKDd;rTZL!i\!h3fPO,%-9/iE_%T7EAS]\&`fK@5[d6rp_F)P,0Qk#%Y*o<Qat#_'P8$[n2+7b%Zsg8941gVK_-E<!LE]#NLGUgXTS[Qj@h+u@>('=?#pD&_i#)IrLdjC4<+eV0\Ce?jE=hu%&>8@%9EY,W%Y$tR'"WYs&Rj.AOYZBs3PI[*!JhH&7!)?L]SMCEs0],&<"jeeVj%sAMin\N^Y%0:ACQ!!J+9JQD,@a=Mi^UjoOIedsABCMp7!:0$%"Ahb=M3DBPREUl;d:4>.]TNC["roII%=^q0@+H/._5X1W9B3uKBJL_gWOfpqIO^+@RT!397)S:$d_?@u*K//@6#RrEVQ%_n@0_9T%W*i9LheY7)%KhC:Be.#CcVPW!6<*M'U%Lf8Kl-mQ23H7jNl-c;g.u8[!pQ/2a9ALG_^Pj*]tfK2j!4*R0/UTUMUph+,u\7*&6/.L%]>nr:%9E=W)[n'm_Q(jS7P(45JMk^Siu$)D=be_E?LL--_:U]#)H@QMK"!S[q5r!g$1ikmJk(LRC=-.Y=?,:NrOagOa3uWF1uf@f%q!]7M@=Xn(`t3iS'*'SK?U;\!$*F@E7uA"X,4X/;oTan[La^>&#aq&jE7ZK-*E"!p9lhFNgt51_]G3m?\-(MS/&qfJ=?mnaF2;B<%&L<0MV5e5dR`JD$Gp'UhDs<.rj:mm4+[icohi+!(_B&FldO+[k.m1Pj>G5(CBm`[=l%P5Mced\9A4n+(!lL(GQ;NXXi=q9L(_MEE%`AC<>eI'dF,TCl.!KI_^8$iQM-C%2gGs%S*U*(HA?,uUf!]U!:!"ZGe?4>B5`j?@t%?QEFGYhKp^Wsoi0hbV1800'F!)S1hGUU@#%,]1:CK07UZCelJk&c"Cc#:*/0TdA7:Gq,LaQ8H_RH,El@Ld5qdb;5.i^cQUC@XJ=[TN3b/.N@Fu8!q:O27_JtJY72i*Q'LcaS]gR%f6^U(bcFY\KFp(6;R#>;>h,Lm<Q8%\<JPJ02PIq[(,@n#/hX/\6*D0s52b!o5@tcA!gtuLDT9a>%8u,4fXkuF;O+i3&lMjp>b^4l%$%knGm/WZ@Ju*,diANc0bF""lJn53KBqPqEq$J1KQ5aGAg3!XPU/0^\CU25*GGK,]3O%j4>WY<32(Mi4MG/*ob>o@Z`cNYO/5)Kk%.!$4ABP5LeKcQl>jAiAdBbO2i'Jt$C@[mbj'.'*X$N`q]_;F9,FA>Kq4f0I_^_dV*L`omj#<kr-q@TfBK?CYm&iD'9+;qVshi:SW%N6ED?/!2h52<O:J5u_G>Z1i&O\WRO+S)QV#hLe:T"=P=c@T[%^Oa&k:lqf/7_/O0$@e)X1l:Mjp\XM=h657>d5W-'s9;M^rd?mF\%VsILL-'`%WWU*OjXCH$0L`77::g?E("p57ZJdH6U;7"lJZM2!^,9MU##I&RP?nbTeH:&`Cc3TU=_DLtqCg)7lZt\%5gcPoEW!Bj6%,%]do8A^MkeJ3a)!6\'3jm&pp!CW-ZO,D*#!g4,*\\a7>."H'c1kY+ge`s_E[q9#61@D;[QbO[HnH<#7A+LCBQ7rM/\^.9`Km-A*%e7=b_/Z-jgQ:H^(`F<0$%7*.7lBN?NMdn_#MdtBNRpuFd2$M[N0i6%KFMl'P1e];U6l3m/k;W#43ue@O'e$S"Et!(lCG,U:9!H;a%hI7<=.old[,;@=N(W12Z/;E-!/;A]ec#iI`'t$B]__/0Q+BcnhfnG<g%ET>+76T$t1`$9b_^N(O(N2aA"?*`n!=lGTJJbReH1J=2%Q`BH_EO'd:D9Qm,E6j+fP?"[%_BkE1Wu'Q?@knoX[FbfK1)UJl$soTEa^iOp;-Y<u!n\.="ul\;!bjErpfe46%2\YMU"ZSGndD=n%iTE[,D\a%Y$G[ndYZkL,P3'UqZ6V-X%$`381OkUKL-@Pd#h#UAVFdS[gTA!SO<>Bi7lejMK(6J['Ym/)a:csI=Z!k5Mu)d]l9EHu%77s("Io?KBVrl-&5fa,H35%RP>j=ut3K2D"E=sf/h0QOFcl]:d!Y-N5,2[m:2]"8Al'jJ2QXioa]SJEmADNV8GUT;=:8?;QTE#=9%Qnj_gA(CruARjXdil-1<?q@#F%ePSi;'8-"n'RfcbTPXW@lLJa(6oA'%n2;WRYE=<Jrq7C<T"!Td*\`[E&V\]E#dOC(`VIldl9&5%1eD"6i@Bc*45F<gM,smC_'=<?G(</m,*8r]'[SLel'tc]f!;OS7)ZVDj!H9ma7mqn@rRJknfUVid6u+<`lC+f6W>'sRtV=Ns15pU%a-%all3m/)m\D*FFNN@_grt0P8L#C4"9U&uL9?-/!\(D^<AbTchfI@PqdgYmZ](13k'l[-T51(*[!JL)V_IO\!*flT`&H'f1G+C1%!#\F@nLABhIH3mB[1N\("R)0QC@B[C:V-011lRZ8+MmNbE"&Zf8k;CFk%uTp/`$r/3pJ/l0*7U,qsn-]@a\NtWg&7qAJnE\*.E;q%_E,RkX']Mh<5l()/@5k@D+%#^0708?>5,5L7I$YrH\uAR&OgU:G&LJj`Uf@^]@@mOk6hkP%64o6fqgj$\jmJ7XhZ.gT0Vi93/cr-%_*b,'.*V::clb*e^orG\fig?'@lQ0r5f@O>V7J\@9B'(iD/?=,duhMl;%\"n,j'!)7[f+E3&'&?GAD2>S.+egXl'7Y.[9[LN_HN"%K'0]_SC=SA<RERLb[GP._R@2i!S5TN>'VM_p,%p>,2>-]1M75oEsnNpLX:`Kb-m9WK"g]SNotu+V.Z*^!Psfn+Ph&5=Enr3nVN('%B2rU(Bb;`3:PqNR;\TXIXrmPGliJU7gn4%i%n$Eq?Wg^(0rrY^0%XXo8T\1V(b?3<FJHG6%b!3Q#,?]VCqM&_GT5FE`^:nr,eP7T%F1,c304g4fXFeA9Zus[;pf1_#DG97a`s=E4AG:YD9^s3Z0pqjcd;-$&3CWg8UKcfDI@Wk.SpSQr[meN(0VD^CJ9dP\!hi1<<Wp<R%N^4jYj#)>IlaKSV?l?c(,b"(a1=3pMZb!F-^];T+@AIp$1C5kA"@uVnZ6=HF(1(]$IM7m3i7Ct^nNQZ:YkGXh]005tNVFd*=Z!$?%^lNbHg3;7"htW,5Mag#lAp-1<_V0j"RsAid;%;f&2YDDE/?=O?\nZ\*XqP<)_FT$A9/Z+H_t[j!g8bt_C@kJpn?==GZl;)&MBf]i%jtgS7DM&@7]X!8jX:/EaDCFY2[+PTa8f5\.M)E[$^(ouA.q'Q+G"5kocVSL(j1<bWm0/i=dD<*Xd\6$;=nL\n8DPjfofJ/pr<OM&%+k-4j^bJRn%J\8\&p]hGr"rY=DFuKU7JaVG6N/]&B@nui&-h@AZI!0\FM0AFRJjCD6Z7U!hWo>81l(h2=OV"EV)RhDXdV88dfb$m%DFm347m^H6``q0,4hk8<hZ/O:\6ro27Y7$;XuS?L]>BID]$j4&C9(8R-jgK[qa).[=adk%+b=k1r4\9UYr$at%X2F*EZ_URamH>A%6MM]g"SK;c.iCn12O>c/S*Sc+T)8'X0<]^'3L!X*A@dQsa<).d>#8JW2ouH*Mk3c#0DQu0<RU5pe(CNC>/G5QFV_fX0GDQP;ZL\(%WuY8YK_4]UI&:FP(s<nBl&BK&@CY`IfcdAd8P.mk9-eq8JYe-@)4*[9&J96]'YgC/oOi),GpJkB-;btI*&KZmNJ9HGcJi2OFD6+d%T8IaX[I7JHbD0R&&;2QF]!kYUIoIsUF[o>tmr%/:)S`VjL04Lb/bcYW%U(CFKm/t%/5!&^+d@d$G)@[-\)!9W0ik]A6G:ei;NS,O%";[jLk_cKqPQSIg@cNa0l6U7GM_5iSRs3@A7Yi9nB-MS<;BX%MBcH`*i6+3cCO7(B=k;.0gYSk=p">2_O/nY&?o9a*KM@ea3L`;J%+#%>E'DrS/+c)n9ElXP*SBp@T_qe`Fc=IuH-VQ1X'53*$Mr_/8P$CV>jDkXH(1hoS:?Ph:LLVI0>rKD*cutj]r*\gB\i+]=/<X&&%D?Qgc(kUmh8KM4K'&GX@7,I1-REo$?k$q0fS3l%kj<%$Y&'rU4"!%:bKUpu?/3]prbRk"GZU6n^D\_l;$7(?>L5g=_gRpcKlZXG>%Io:Eq=[kkU0aNp(X:#&cb"ptQ"X$$@Xs^gRT"WD%7Tku[#hMRY<L\JK<dtO+-uN7fSsDlDi6_hQqt(^JmPn<_(p$]F-$$/7gKIn&%3L2fsZ9u>9*%Jko5&99%Eq/+FjKGVOL&aBaiY,W$,[8LXfjWl_>I=oXggbOkgseU4Uqp$hFKpc[-[3sP&baqF:NsEB=X#L2osi>Z%O;uB](.dl:^i7-,kk8&^6Uj?a']+rmE&&O>H!ntKbX8(LiB"<(D=Udd;MQ-*A6<?Fd0bI74cTFs>Fc,O&**,S-#`/tif!f=1aDlL%\!rh597-=*05aHgVpJYdG^YHKnV>&!OqJF4QcH)4VD*#T3H+$,0-KS?OW"b0ea1sa1.Vu%-je0R&^r/_pc0%,"[kbaLm*URMG,e2%e[iJUhO4#pf\73\'VG53q0H]\G.ShiRS\/ahJei?/eSJ<"n1'l7F9)Ls,c1d7T>#s$KRbmIITW6#Fl[<9BU_oWg$aZpWHMOA%[)^%FnZeus&ZEOC2`nc:.@bh%&/8#"JE"bO,(o3RI&:8A4QFj46X+?\j^8?h*jfJ+1eTDo`Lrf.3T]'*S@m*OV^7M#>_6X(NT"_R4gb6%X5!H]P@"s3no[1,b=L.`%#+mJ9!dhK#U<UGH3NJLFHK:Hn4R(`ish'Nftquri2oh^nDp:YHo*):r<I6RGdQtHQor&L4=9\Gm/hNq%gtm@nRf'TueuB6AJX-5dQB"c<h?1FM#i@YnD6Ff*IXZq&Fi1eR"1DhYr"IoDdD=SjVJI_(nm=/Mn^.27#g<5Ze0W<@,:E6+kBZ1O%-Zp^pr\,fU[esO;eOsMf3SQKuT=<MAN2+dZOc0Ae75F/#0JXXJoI(TY55:#%XDr:N0RN^bT5lXSF"&*pj,;7D7jI#:E'>gXiCCj>%EINB#NdY3s*!P'b%>0dr8YO3Qr*\I,IGN%<IFcLPr:CK5H$)P_0Zb"UHF^E79B5-'-YNm,d,-ObZbPOCW5#]:'LY3nCLA5Hr(2pD%[/jk(;uaW(pNC,A/%(X>'">,)j&,&L04]nlnQ#e:n)"a>0't:ifFu:>Yh*V#%!G=ApRYQ9'VY:H\t">D53$i+OdGKS=iNhFTW9RO%#Rs@.K4"K'B4nBphrt;ln83\`]AsO:>&D%4;tiHbjQo=,.4n.V.Y].W*ush2@^`V>$>e?kGhL+RSc/2<6Q,[R/%Y:2[iW-ui&Al?%ToUl'gY[%mOBc.Ebb;B;X[D.caeE(FWVQ`>T=b!Q<mPKeHeL%ccnIg-Od1kB67sY["ell`k7W$q\O2,]iu9/`/r_U9UYiiMrhl)8%nW<[IfMLAE#GpU1(c=%mTGodp9_mK$:N,Kl)qj(gjPfAe*XJCphZ43SD9#GcmI*#rHM#ZJ0_Y7emskFe7rJ,'5JH>UVslB_"]\@B%S"81VrZiNMa*QgeI*!.b@p0*Bl-2Ee-l`[]Qmeg^N1D*WRO:eFp]f.AIf9re/B\mPLZdn!TYm?QnU%5mI8oPUOb07B'a[$@C^:M6%I5(NdLN:6L5P=Qc4+0$.Q(\k.kU_+W6K%+WBA>1eS<p@YgB-7$H]M4$f4fm$&RT;H$;1X'pu8^Z(c_L"Jg0+^L8k'*,S+KB_Z>6M%G)a7YYGEsB50AU;juM1t1$T$\(q34D@$bD/4_esA`d=C@er%s>+](22"dC`pIHc'dFATK&f@hr)k*rBbs"(:'dt4;8;Nj5O#3N`Y%\1%g[8&^QQ/C=P3-Hss<&jo'Y0'mt@jgfkgnQm"4Pd4$cdG+-.`r\?jme<1&r:"%22$mcE!jNUn6gQgl$.4<pDn)$PnaXS&5A3>P%5RPPH8`*W*7L"N-O5VLG&6o*Ka<#a+gt/%78kKpGc^+,O;a:K-m5*"m1bl.tXi7Q2)".<S/3':!dp!li9_)_@:1)FmFo[`P/?j<>%_-M79-2hoaN.pI(V+AHf7I?-h?CR'@'D3=tr>0MbIT1,4iTcCH,og\O+1%2Ji6[m#7PN=6<r.U!Kc>3X4fq3j"Vsqs6dODh9*Mup%fjT(CV5Xp9,\h2B:3nW'HLfc(nf"UMkd;#8a.a35\?&IE"/>61Xm<Sgj1LA."n%t0)9gL3Ms!mt"/'^?V]YX2i:=.I5]>PEfeLG2%6K<eSZF>o+7V"Kc-!]9%.i:n.hb2K5`h:P5JOp\6\:,fRT/^8Yk&8mFY!I2r[kFWX9oaVtCnS7IRh$Df:>VBtGY9Eg-?Z#e65*m%%k4r[=6?7Z%%-mjO$DRj?(`4!SdV:07r_L,:+TB1NqU!l@.kGQH,]2Do\n;68JH$F:/8rI/XD+?S#tC@h_7Tk\@Gu/u5s6.10dN`E%@cJ'BMmf2a*dra99\n]YhA/qq21lq.l<e%W4_VD-;!n@c<F961/mH$_jrDlonM@nrRLZ&N)bZEp5\^:?*m*F;RN`j]:KY(Uo`,"_%bBJuB1aKY9\p&k0+$p8)j`,;O6YOP(Ua;#DI^mDK0Op#eir\4,)e@r]#nfHARGiN+2DGUW6R[L^]97aDk>pFQ<EOWJ]Pe]c>5\Z\%!eZ>(r:kCBA"=CS7RB=.?gntA'XT+JU#YmZBpdO=n0"0h!At<odfN!2+\fp@n'f?8'=",+riKS;b]k+;!fs;^fH26o*3?V7[Pb(,%Lj0aEES;=/"FD>d%iF\0L4M^Xcf1UEUG>O2;dtC%0OjBT<sCm@0b9-%V^@-\D'\q_-P"EJ6b!1m;1/V(;TfY'$fVYT+DH&l$-.Ti%ND[Pl8Vcksa0]7#K(L`^:(,MQB&)&CCPqQc_B<1Yc68]AVT/#srp?aUh@XONgcId'rVO)%.]d4"rOl4T1W0lQO-D9"ghUV3-EGgm%F6)95a?\7/s7ob\2_lBs6hc$D%rCFjTY:(qHlq1oK2mT__-RNR]SY!%oV\G1%pL7>3Q;Y5="sIn%ipd&1r)9,oZ5Y)RIV_R'9*Dk%Zko9MA'IGcI`g5T7ka2N]eC'2Bj7Z6$eM.m8t+WAhlt<C!A6MpjREsKdFdT;IiBHV_1NP-5C.YS)BC^4^%@kib^\Q;bQ1'Cj:[+t%8:kG98ROeEgr"bV\1r/[0&ZJB"^;`pO?G27(ROk6o$2/eSU2Sb/]CbVScUA0/!t`boFt[3oC%$m\";a=.H:q[D'9k9$ARTGEC`)g%M&dcs(.O`q=k@e+"U=jS/j$"*#ao*9&Eq`sh*WFY+elc]cX5Z5"Y?rQ_L_Aid\&ul*JRIE]FGOC@afm&*EEiDef-BlTl]W51Mq\+%5mHVVbJZu*Bc8X8.@ZP=S^=M)rYM=?Jkdc;.k"X*?O#^CQ*;ZR(i.X&mRI=jTX'=]i`?5TYNc9F':".1//.hG.-`4j>rbA.@A:gI%_qg_*$9Gq3.ZRd+`fAt;`3]-C[^qEi%H_@q>6X8cil6%j%@Pkr'@d4.%")VS3dk`s&@\uMFSkC,_fJaE(iT7oosM^L`j'(4<Wc"=%=9W]U)NBtiVi6H0c/^d9,ogsKahfG0d&/Dm.iVb0kDZ>ego(LCf;a?1]\RniPjoi_rP3-pT0TRXDlRZ#.^4J3*qmL7$E*=S"Mdgt%D_cj%IKUM0MhkIp.enQb08LZ2R!2G4n`0hib*<o4(S<kRfE14I#)%Rd^6,3t5ZIXnoI@m9D'6k"a"^^XT#&g'8E9u\%DAs7lc]sC%JOTTG[VGdFVecnJM*WSHD&tYn&;1&gP/[?RDEPJs(2&h3\8?M$kdAVJ(t.-&X91_]i/0/E&Ce(sQ49'e>tG$d(aa%Vd-A'*B`.$R%"DLo/0]9MB-T!t99%H8sHTN(!Qt'TU[^8X47[qjnbhV:Vq.R-6*<F]`%Ni.'*gYVN+LrKGh%#9#deLJ`@EV4f-ddKP#m;S]deJp6%\t9o)G<U5BQhi'9,dTlU8dDdBb3,jnF(rda!rbr\U1`HGm`l(>KW3*Z:fe%Gc/:$@o\=3>SZ/aR_rZ*@Rdc%ccU#kp(>mfhB9-?0%:@U>A@#CMWhl#1jk#<iqfT$CN$]BApiBh:X50)Mp0TsipQSRVr;Og2SO!.1P4NRLl)gMQ@l5tmo3Kt(N5G*'Gp6sFY_ogt1n>"Ge%%0ZZBYbU)cD4^fD$DSSl0i8^c%q?NP]Fb;44pB>T8t`/cHFF>YMp[:'/"^mA?@MTs,L.e$.M3nUd;pL#K]ecp#D@deE2YLm1V__,%mIs&MB%?7pe&<tYAg-TN;r9U*&'9L/Y,B43PA@ViNo1Hj>5YTB@q&D2'YmPF/BhJ&HgZ7OX^L'Flh=2Be^uKFdtL>GV,1APE<D;W%JIY:?`?Mjfo4E]hMem'+P\(=5&B%)QP@O&pG%<%bm)4#id=GHB!*%k3&O!!K<*P4M(^RET.mSPF4Ven16J)mpXN3$23=1A?/e7*c%.Hr/t*A$is8k1R2dE:gs4-.5.9FS4-35sKTH^_8-D=<+3e[AM[]j*Wk^jfU?2uoo9@1no]#`O7lGq9&SC(^2[n#^8QaVd*8nCE&W%cPpUbnDMODV<1hq^p6lIX$h5pEA?NPEZeDP"1BJiJ%eW@ntKirQ$#G8(=]Z4`;8!t,1-,`L`aN-83>(_nutF0qdH3sCQ_'ALc*Z_%!ljR.,*[I[dbPJWO6S7"Tf.=(Xc+te;0$T?RD@=tVp*'uZ+/0Jaj^/h5aVp]&RPk[UMkfKSS)*VHlj6ebJJmKQNa4,2a@tH:Ydas%ZrIl&XO,:9f2f@PNS2c9o'>j13,KrMPudULroFlOI9\Ic!YC[\c3"*Sh8e0f(uHI<TX7nO2R;Vl_/@Ne>$q<u9M_J-4]hMpL0Lg6%;o@$S7H=g^_qD0A(1Q!Z54_6;6t*U$.B+GM@Wl&32PhGDLGKP8[E+8.>A7hupP"X38@uql>N.XYq`RkT!>h8^V-_o-*6-'UGYSB!%6`KBD3^q9BBnnPZCW0^=AkJC8gH04[qn[gX/(.Y@J0L\?A3d\]+6/eB;Zk.1"o4l-P>$@e`CO)B?O@OsJt\/&eC0U4Jb.`b3r*O!%%C)u_Gp60d&CEG.S!Kuf9>//fG5l>KCrq:^r':oSlXF\Wr-Z*q$XrYZA+"'`q:[[rAfNH\Ln`/$6_'tpofgC"o8m/`IUoaaBc;.+%Jg.AJZZ9/=Z6S8A3+P695Gk.$V]+HmjUFc"Nu]InD]QUJ.^b*\!&lQ)Nb"nXmNlO-%hVDkpetDpYoI2P6JQX:e3-l;0tP)BFESp4%q7C`XWXLPpC#,,H^07B4h5-,0[*qR`*;TSZ9_,VQ/>Xa'#Hf"sH]obkMJbg[d^uGI@'FZ#:T>"*hFA.\hjNC#d`S^:`hLTd/$4M?%"GGj575aAkDL[OYKOTojj5W`B.P*4$nQe"u@8*i,NDrA'1o#r<gn%XH9]gk[Ad!cU@Z"cNT8,DCd#@Pi]$:CeYDZ\aAqZ:U^05Ar%pMgqm-jDfA&m03X3@kl>5)jb8e/K[i+)S@80H%+PF&S$P)l2Ib#4F`-'r*LBC8uZu(hrc-@K]k/7T,#aK+tTV.#=H.Y>K.*+)!,n%'lh3k@T&/8ZtGW&8gG,r@&L+99cq+7Y'NroGj7`no1CNuCC\$kGZfTl(C_YChgNt3"rHW/oHK5JXVe2X+XqIP@oJ>@gG+Rp'Ne4k%&p$o-&XR*lRbCJ91<!q:8_(f>EEEuGa:bF65bh_t7L(H!bp%kZ9lXM4Jje\uAMT'KUPSR))Tl*_R&cns<5<FMMWkTic=.Ksi?6gj%IZ&dsF^@M86e\0"FJC3/5*F[7#`S^RPHhNI:Z8GX@qYJ-?"!$?U?HB2V<WB[;aE`B-l<0i^b[oh@p*\:'hZ93F3_Ia!r$22^t@VP%i3S4:7%Tr(a5i"5*D5Xj>Kt$b*l[4P.k2-<FbuoKo]]7&.M?"IUj3*4jIu@A^te3YOAeSLLn&WV1QhX,cRI-N)9CmP781SKL![aH%j<[(Td%n8gcTu`b%HB?:iNQ_p+,\(Z4MBR86fafkW7-_kdHVnZ1sRYJg/c!BV2At(=e;_>4DXIF-Hm@#O0lL7hPM_91QUm\DPD0-%^QZ?>Y+s^nOQplYC'+REPo\6LSp0=>.+:97L2p%akNNM1&Kl'`kqRpgkC%kk%F'E/M4j(t/apc)np$]QNN_$tCpRGt(#`G2O#aYu%k$St&kNEI;%Z),`gmn5Zk8k6q-:G-0M'`6OX5tnlL-6?Y"N4^IfOZGF-6([mBE@<G)n'Q->2WZ?"Y%>2=H'#tEc`,E5r[B]Os,gn%9q0reF;=jQ+[D"%D/:,oX2Q\*Lm%5NIVOWi,r0/J:6SqX3-bP3DYNuN=VdE:\jNe5):Eo%=+Ds5LF?E2#g+Y/,Wkq''4IjM6,)(c%ocpWXCc.3%U*:e7#@cc'=R1D-I,!sl?&.:V-,OZpmr>Tqjo_1fdf,FiJiDAb;CX^(NnAfB$;ao?d/]U/%a\KpO"L5XS0K6@\c"L4%"KAY/GcmWB]ubsf;<k92k*8(5Ea)jV`FpUPO:+[K#a^ZrjbPLtDCS/`d^e>nU((Pe]lt^ZRoKhhUbM:\ZKOR@PT)8W1C<*2H9]o6%U)mAp/^cmX)?Z%WKH(p[/tRi%lh'd[=:K4>CoM.mQ<%0,PD+nZhok;G"I,W`JTSI4]=OF7,A)l'>3G&=e<@m%IqJL]cnn>M6CqFP%oOCBI3QtYY/,E,*n^qp,UoVO?CK=4JLZ`0q,!C\?>D0io'fDE+7;Cd&E%s<.o"id*:[5rBO$rWqFc<T7$:G)`MGUY:Snic`8+3>W%aS5q"fd_?0]7Qk4+IQpQphc-!,e@V7nkKsqA!s5LekQXb,WZP`f`8Ve)4,EQo(tLZ_[Fl\]i]A%)sH;-<q%Ej>>GEB$*n#LfgJ0b%-6%\5;^=oPFftQ,X[oR\''+1=A:0L^0@-X-$'O84e\2N$mcO2,og8-S`9#$-;L\Nh,8U)p?06Yhnmc'Ia!Tg:,7rG0/+OphdpscH%O/T+,RiX3X&S*/.4Ic8)OL>'%nSo#EqLr=e(k#P'Xm_2tPNB'XRWgtpI&qjVNtp+lU*F38L9O,W.hbrXHpkKu*(?N)Qdl<H0lW8:%Y6^B]$s++YH+$'+h7ZENf^IGI??V7]YV_K#-9o$`n\Y^2?[j$*=q2)NgKMZh$mW<^p.!)4ZE)6jZI6:+d[%-rFK8mZUf1:1oWt8#%OCh>jYt1/qg!-?-81Z\iHr8JX@%odu?Ct>$(_B%uLF_a5Yc:!6+jJL)@El:>"s%t58<nLW)T%<n'Bbnen&i(AGAVtqJEE&*Xt(AK%0%9[,hVT2bD=0hWiIS)-!"b^;M4gH)34om16$On^$rnK8S3Y*)NVOT7(VVWmDA9gi0j2iB!c37EOY>@8LN+Vjr-d8He7s7PbTNu[%l?3B4g.F`oCU4)VJ1IL.NfNs7'KbeKp]@nKEd'%J*c5lhNtSrFT(6A%DZE^]oV>MW,*a1bJ:2:T!)#H"E`A^[o&Ic@^:>BVb6k,=%%unF!MN,t>dYg/H`_]N9?-;=Y1NFATBq72EK:#e=Hh2FCnCX3Q;GfPC=XOdu&rS3#=E':b]p[O6c[2_>OK=5sZ;\A#f.`BR`jFQ3%9Ttk#k%6'"$eTP.7Sp#r;`ct*&^J=nfKM+.$)bR3i0#?0F#Usjf4?Tk9bo,OC-!l(I4-_cDRXR/;e"h^0<WN>S[()Z"Z2Bd>?((c%==o"NC"oU-2Rd7\PMOs&Lr[<@;>`jJSj&$'&.C)P?)3^/ZEWueIeH7k168hbhhnoL<&(r;d*l.R[gW@$9/qX>nsD;OJV5YFaUW<2%r@[%CmgR<dSlJLJ0;Mn(NCR0'^0;jKa1P&r/5bgJ-ERf8PTNs\)hPMZ*-lc+]43BT\uE-4LEPcUk?OI[r,djoZ3Z"/D?08T1OSjl%i2o)7OdC=IM(hpaGJdDD"C[+F3<<b6G:9D*W;/IEc4tOs>1o\$aM9Cl@U]U$;k(<&^nC'1$)QX3jbF#OgZ*)D0tosgQr1A*5J0fI%=Zg*@3gpBo@f&*)OX'FW<QjUG5$4TsfMeG%6B'<il2P?:,I(jt+3iI%I6AJb?C*oJY0&CF\b>?h[H[mDG]r5DXg'+A,tRXS"\-q6%Xjq]#8/m2"2oO#:%AW+fUtp7O9`0E!dKZZokbHt19t/!1IP1^>D3#P%;#rFVN>qtAKEJrjm:DUr4%:/>&so5\5l@d<m)NI&.[:*h%o??Wl(ri8[bso2CmW1m-)XZekG'75E,Y1?fp?AG2dYT&*4/N2Qfh1PP-Ad0H<\_3[J<804pB"iS%O[0W7")=*c.8n#e':,QKZIB3%"__<k8\[lU!t.L=LCs!$T^POO0\UI_F3L@JegqlKb=Jr:Ak$/13H`G[s2\@2#!?9kl3r%:iqCK`WKV%i(Rb+i_>JI0Le.S3R*S[k%"Ce,e$@mpbb>4/M`F7Qqh'i6k>dN/Q0"h6.1M\TMKUAoT?VAK$D,ja@@b%t7:i1`2A3hW3Z(%el%`c&2F0]ToKQ8.4.;cTIcEbna%(ufk%n&KM1YI.D%%D>6qB`?Bg_#CKnicXG8A0'^3T3Ms)=U!2+T;m9?#&!''`XknA%W8CJ]d>*/M-KDUZ2Jo6]X1UsU*L9bJTF[$%M!A?u,m&Y;!`EkY"VQa<OVB)L('_R+ff`2of<DJUH@-HQATS"S>@qU_`BJaq?)(FT$HH^uJ6?ME<Y9,(l^;6f"3U\+3i`MorELam%fP7I`%!8s.D1J5t'iWBPF"6]7KH.^d:@]*QEe.f&+l__6dnj@MOh>^#B.I?\fi',4a7d)VbG@+STsKad&jNR-)?\m@3D@\TEn8'C%b'DfH]hZO`<gl"C\%2*_-tg%/S#e.;4MJCperIpL1cl^f5m7mZ/s%chI6LZSM2O@.@A+F,Wds0D<D4Z9LFhf*]/Ghaf+(R.0$^L=%PO4QU6d94[ME$+VZhiP$50C)#MYN`L0aS'J^%ER11nWA^cX:g>qCHL[+8pZ?Tnm[,iJ&mF3Z13F#GkU0<Y@IiRA+Dpn!ZilX)5pO%RV-8%ieJ7bR`;@MQ6S6X;M]=_1?t3,(MQ\:nAL<(^X_n-kejr*DIp8A]K.D,[E#pGJaaEJ>droNnHub89MVDso)6.c%X5Ej%I.]d%\DuWQ11MYe4BDC_MjRLfi;S*d`Sp?[ZtUjJ3h]l.o2BO"k34d3g)&T,SVe93s+X*Ec^t&(6'm@r0L3^RpSm(D$ukqM*HT#"`H-qd%T\@1K3*RP-fA9$:C-sP6G/L\7ckAFsI>-V^`j;fBDRip'`e)la1!:rZfq'&A]8eASpQ<@hNY"t92cTleDYJQrD0.;h2]'E!I)WVV%]3-/t&@#F$[1D=0L#CN3k1L<KW`\-SAX@h>e@luuU,fWXbBB?l`NsQ(kQZ9JI<W#_?jTapc'e7S3mF+(4OEbl-6_\qn3Ci4n-hCq%So`UT+X;<#3geI<oM.1c!RQZBAgTR+4iCWC(-B_Z&M!>8iF"%VAU_2oap#W0VK;@B,Sj9U+tcHH=Q:iKNAHoh<OFu'GiS/+_@&WG%5S<J)+es;8Arj3Ljt*:9VMG*El?H9a@;@/t/!a<=@P&A><pX</=Y+=;F)Tf957V$%en4\O*rBT;e5pi3l@1qpY,s<$-r+=PUa4kY%0Cp*cRm&_G]0k:Y(W-.C"a8Y&,mOB(D$C]?6Z-8M,'rG_l`k.R^!4\uLHTR3L$id0'"+rE@!?qQ0n#CB_3<M[B/i8&ndB:b&s+.J%OZUKDAlAp>lcLfupSd<%oV9MQGKQRi)nTfoAJ_-NIUFmf<s00qj%)'7.3`sqBj9d2&3<Q2H3VjEOq8p]#8eae?;rD'CG^Q0=BVLO%"4dK8"nfWI9l*#kPcKVZmNe+73ubWHa_PO@"fgYL1O99C;sI#V9-Wk[8G^Ek*A2OBj7]qG@YdJAE,9f'AFrXBM+@#R^5kc3(ZTOV%"_@68QcXC<NO3RSG\7+0Gc+pb]H`U+C\qtt$jdfa6VKrfs1&!L.shWAJp0,3_)iUQYT/\GoVbFemr66;[jnM%E-UltL03pT1#7!G%%0a#p*R;j8a;><Aan>#:4.'FseK2HB<BqEN_fpVO20t%9LQ\:Mj`$'9;%Qs5>)9#?/QFki.U_d."\\g-@QNS]?f`'>;jp)[:M_eI%i:0-.&Vu'39l[RF!"Xim4L;JbIW$%@UkK*4a]$IeG^.<P7:7<&&02N(^dCfMe(hQ'T!O+4!7?:-!"Uc\B5OaPBjNqT&.@DF=S(!$%HM;1eD"PtW3V#c2UJB#%[q4KA7R\M([`+B*q?biRjd9h.7a(=E,=C85fubu<OHr?ADeWd=gHSk-qD_\N;;;_l1/prMK#au<DEeEC%VH=]YrZ%L=b>o1;mM_MN)>.pbU0ALi([_\^!t*Yh;'Nf4aGLWC4@S7Nq'Qc4i$h3c)*UWL7>e`1M;1OUF=;%\!*k2i0&(V>KY0Vr%F:n'N_k,&5f*J(u7EB9Bd6oJ?pP?/f>I?t-mK4p?j>BhCZW94(":>PPDum7R)F+H%*EUXGY2P7M#a!Z7qSq3#lM_)M&7L&QM3!Ji%lSTQY1KNtCYI[YrnlIt8kbATcg-!$'LEq`ocI:iI)M)4UTrR`r/e*[BXL<:62ZT#0$?EWr&l?1t0/Mreb:7AAhCkuIf>boh1;8aR%%W!f"2._VC4H)OF`0,)@"5?q<KMN&@Ic]/I/>-Xt[It.]$Irr^4CqZGiL)tL.uW0R9o#`9r?h^*SDmo2>0/#MHb9E/&6)=1&NVsf%l3T\*@SAe,:i!]YMs'E[!j*D/h"!`Q*H]U"10mNH?`2<%Ec78IaVh#Tf`mXuiq<pa$)7$qCBpjj4XcZ-J'q;;=bYMf53eqro<cK[%=tp[E"cVd@Y=u2+n]7:RlG=qO>E>'e&Pj7O^'_03/shIc=F$s7n+9"Wmk0qpnqbNYnq6T*!kE='+r[ldnS:WM_cY`rb_&!#B<357%K<JZiB,Ic-lP0E\0m54QZO6IgX-g%9FFJ-E*'W<;_^4e^mWmDQKdchn=*m%>,>Y!+$e8%SCuf54G(`JTf<`6;&&[*n)LqH[OSF))%dhiMF'OmI-S?IQ*4q7<ASMR1_ZBMc>]1`FO.DC27`%njXoN;rfhgMc(*/I&H5[L<P?^RGR>ScO$g>S*MR7'b;M=N9AA'%n$JW%>M%#<rAH?]rT2]E?W#[oaX!<G$(Bo/o[8a)24aWZV(nc)h?JoC/$[9Q$Ad\OdNnLMnAt$L6h8@GM94U3E/HZtiuO_E(F4d8&0@OKFII%N<i<\*tl$lgEFCQF/:mOf%':"iE>mQMb2SXY#3]ip-EZmTa%6Ee[T[d)8kI6.Y'8K-001*lgSE5#lKK`(;]GE0JLl[\88HuB,N]O%^JXim'DMS`4(YiT.Gbp>$5+&%)oh=nU93I%`&`=b;O:SM+3d[&%!30uNf>M]_X\1@;#'^+=iK97AHc4g_QP(JiE%]l))'U(S\bn;%.IEE0$9rpU-.7sLnACScODtUl%NWUE)#OG+!l'D)+lNZq%FITb7!-TT)4BR`E1YA.C4`t&AEa-B5DlPPN'9)cs(eIY#TL8PD$5;,%-Li#Q4N<)Q/WkjoeSU,T8jIX[4$+P!OYt[P_[dS?p:"'LRed=g&``B80O7XnVJ&R359LTiP/@ftc@QUA_:^nEGdmDVF$fTYnA?H+%F2D*<rrT[s,nctN&DKCGUBcQ]B:a\9S@O\uR6m)OIf.$212E()X!o!2SH+8X0-MQZiTt=N\<CU:)6*jk+1Km4bWWOE:bMW!DB0)I%0d,_<=FNY,)m",(Kos:He%(hKI]W03T!P.I"r>[XLhi!/5!F/1"0f,qN/U7b(U)oPgIa8!eMDt=ifSSgm_*sLWa@0--nX1hAceQV%cquSdJ11$6e]%sK-Pf*SSi(7UCg:Upo%8>:#R?tZ=pPiaYH)Je+Nc/b7ffXQ*6p%-<k%A!A4O+/F"AuV<H0\HTLt,tk38?C@_\rd%qWT+chE6.`ETLOE@sDW9EjW,OfU*,4o60f^'`At+NGW%EVtUf=H>'TP0([u>$6^/ZXQq9r=DNq]:nYbTPaIh"9G?s;NVKLd$A>]c%VK1r-_N,R9PrS5:\\CQa`CTYo(<$m"2mX,IMja7]`F+q(Gs($=>E.`4<6*\n(V2+D!<O:$[>Oa.UX$h"'V,U_>:n1rMOndQrM3B1%K$IE2k-LsoCULlpfQ*snI-dr0"QJ#ZU_3*uS:`Z"JpJH[iH^^9l?.22A"/\j3L%.0/rlWqhojXV_Ft<tq'ck'O2b9sJ]*]Z,aF6_%7r#<U4c^\A5mi9+6$>p).1jYF[&9/s'Cl("jmnKILp_Mo;>_=]&1c9fbL.bl$P6@J$;quj9R]]6+CIYZAA15OrA7:l/8d"(e11W_%T$u@q)JM[2'PKkha.HK09P'`<,6d(>2D`jnq[o4TR*A'g^Xn/rN/FQs;NuOfXt$Qp%\KJ#%!XJsY\]Jpe\"CZ';[8tkP52pIMKcY%q_s`r3Oa8"2e)BW)1k,FL`B\M_P=KlquU7\##mL2`0JKmAFZ8?fd&Dg/3qeQ$B%s."1?5WZlp4W^L?1+@dfAW@@X<K"=FbcA`UFm%4X/pL#f1;PI!LeTQ/>YHl*th5+<nNV:!FtBgI;N<9FKF[",HZUE"QdAK:Khb2j0:)YpbT`mXc-$Z+Oo\B'+bufX4E60e\Z24$[f6%W8?BNg)0^$`6)TXYconk=A\8OA-9+]&f%;dIa2q6hG68c4ZU-]Z5dm*[MrTZnqQ\aAk0EjlsRj=8>=2c+$YK+@7mT<UmLH4YQE6u%h*bP[]HpC_CjR7]RpG3flMH,)A,XpBA6<@8<"Qf`.`NFj\Xi`8mh3S!O(UBW^+c=".'5Tr>o*u#an[4WKnI#T0#b>>Su5Bkd"M)1%"eR-C\/`A?Q&$Ba'$1OEe"r3D%a/,&8%LQpD*N3&[gS;p1d>pufSJ_[<;#K,QR\%F+0SEa7-f0G#]2pWTQPGlqKQ?)Z*Tg<E-219%/_-Qt;2i[d??V.&%S<-(0s,8hFB+Z-JK4D*k,S9FX^FDipR>j/!HsTBQlXPM,9G2ZXR^!=eH&7"N&JYIUM`gcN0P?6R1AY;;QK4"%9\rXU>J@bOS&uRbL-(9eRtCDgWu)RfFu5]uY,U-OCKj^/=l+8SrCB)2'esV_IaHTK+_Fj/0^@#]Vpd*tSY/ikFnsLcU?<fa@+e3f%W'O%m@D"0QcHkt]/a"_iVQtV``St;S;"j*Bd3-9rDhM9UD[5D_$TdKRD6;\A)Q4dUbj)IKBM$O1/6J1fEt=>4ZV(d8jKhST)_9UM%dHZr1,UT[%\mNf_AWd+64WZt-X5s)%,sA8gPcFr;:mQ<89<oRPgpL1d?!I6&.eu08G;VV`UJ:W\o4.<Co5CXYj_t+aVMdJ/.UFmU%/b9k4FcX45]03;u'uS@nX0V4nr$%X*fCB%T!:/;u\HKAEbKN'i"fLQrNgDCpaI"Ae2jAr+_%j&"qj?JNp3J:.LT1!'gUWW9X!)*D%glOmkM$5[co%T2(*d/a4'UAm[]KHP2pI_.a^2o:.p].!;?:Bk&A_7PO:lt1J%N_dc5'BdJep;2P$9]PI<5:q^MFg(K.\;ocQV7?+%C3GpASYOe;;`2-Y:R@Vg7FX;TCYDsO:[dnM[D's6A8<KTTDOg2,^s+:1^H-JF-Mc_>PX>&8D@hpXls;rP;7.c@d78<q0;3&>2@H/%#)8OqlUm$25F,4jZ/c8/EVTNe/7ES=J,As;no+Np0E:\%^V0UCDh%P+s69A%s7hr\q=a-hr:[ULpkNd;pqqUWp!:DOf>%:\^H[2E%gUBEIrR]qVqrQGEr8k-^r9HTIp4$EKo?3d+p=nL)q6,;Fm?bTfYJ:'$+Kn;Jq&fV*O8o#?If'/UD^eW~>%AI9_PrivateDataEnd